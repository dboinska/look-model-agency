%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1403.m00.i004.n010_140705_beauty in evening dress with glass of vine.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: German
%%CreationDate: 7/5/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2014-07-05T13:16:54+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-07-05T13:16:54+04:00</xmp:CreateDate>
         <xmp:MetadataDate>2014-07-05T13:16:54+04:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FUHrGtaRounTanq95DYafbgGa6uHWONakKKsxA3JoMVYFdf8AOSH5JW0q&#xA;RSeabdmf7JiiuZV+lo4nVfpOKsz8t+bPLPmax+veX9TttTtQeLyW0ivwb+VwPiRvZgDiqbYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+FP+cj/wA7&#xA;NY85eZr3y7YTtB5U0q4aCKBDT61LCxVp5SPtDkD6a9AKGlcVeLYqy78sPPev+RvNVt5i0tpTb2zo&#xA;NTgTl6c1szBXjlA+Hevw8ujUOC1p+kkciSRrIh5I4DKw6EEVBwquxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvlb8sPKkvlDzl59006SLy4j1BoPWmdI&#xA;41sHBmhHKQNUzRzK3HoabnbNT2lLcWaDs9BHY0LKO8zfkh5P82WD38GiXHl29tzIBYWf1CEXLAAq&#xA;weP10CsTRTyX3XMfFrJQPPiHxb8mljLmOE/BiNl+XXl2y8u6p5N0rUtMude15BHNah5Li8SS3YTq&#xA;qXK8I2WJoyXX6vHtuW+EVvGolKYkQREden4+LUcAjAxBHEenX8fB9i28KQ28UMZrHGiohO5oooM2&#xA;7qlTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8k/&#xA;MLQvK+qeb7nTr5J5L6S2ttQkFvI0VIg8kCF+BHKrKw+IHoKbrmo1fHjnx7GPm7bSRjlhwA8MvJEa&#xA;NpekaDo9tptqs31YKEX1nlmZmoAzMzlgpb7RpxXrQZrsuYyldAe5zcOnMRwgmVdT+PubttJ0PTL5&#xA;Db2NppsN3NFA80MMcVZLl0gQDgF+0zDYd/fLvEyZiIEtccOHDGU4j1fj8e8vUVUKoUdAKD6M6ECn&#xA;Qk23hQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWIx&#xA;+Qq+fdY81XF56qalp9tp0FmEoYBbu8hfnU8uTP0oKe9cry4hkiYlsxZDCVhj2o6TZy39z60jLMga&#xA;3mVwJUADD4o1lDrGTxG60r3rnN8ZxyMe7yerwZ5CAobHccx86Iv4pxb/AJe6XqWm6UJ3ltrXT7y0&#xA;1KygtnVQ7WkgniE1VfkrOAzDr71za6DTV+8lzPJ0faOrM5Edb3ZvmzdY7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVskscSF5GCIOrMaD8cjKQiLJoJjEk&#xA;0Ek1rzfp2n2sptyL2/8ASkltbBCVaYxgVVWIIB3GY51uIdXIGkyHoxS01yw12NtUsW5Q3DsSp2dG&#xA;GxRx2ZehGc/qCTMk9Xd4RUAO5mWg61p97GbKGYNeWSRrdQ7hl5L8J3G9QK7Z0GjyiWOPudHqsZjM&#xA;ptmU47sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7i4jgQPJUJUK&#xA;W7Cu1T7ZDJkEBZ5M4QMjQQFhrcNw3pzFY5SVVV33YrVvxzE0+tjPY7Fyc2kMdxuEzzOcN2Ksd81z&#xA;t6kEFfgALkeJJoM03aszYj8Xa9nQFGTzf8ybO5m8pXd3Zu0N/plL60nQ0ZGh3cj5xFxmu05HGAeR&#xA;2c7MPTt0YN5P83Q+YZz6GojQfNMoUSqyLJY3zrsHaOsbCQ9DwkVvAnoMnNh4RuOKP2hqxZbOxqX2&#xA;FPPMst15ItLfzJcXP1/Ury/iTVnVBCssJgdPShSrFQgRSnJyajcnK8YGQ8I2AGzLIeAcR3JO72zy&#xA;brlprnl611G0nFzbyg8JgakgHo3cMOhBzd6OUjjHFzDqNXGIn6eRTvMpxnYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWpI0kRkcBkYUZT3BwSiCKPJIJBsMdvfKrHkbaQMh&#xA;3Eb7Ee3IZps3ZZ/gPzdri7RH8QV9Cv5I2bT7wlZkP7rmamn8tf1ZdodQQfDn9Q5fqatZhBHiQ5J5&#xA;m0dcxnzWD9ahbsY6fcTmj7VHrHudv2cfSfexXW+P6Hv1lFI2tptz0ICHkPorv881sLsOxkPSXyRm&#xA;+dMmGoeYNc1G1gtL+/nure3NYY5nZwppTavttkI44g2AyMyRRL0X8gvzGvvL3mi30GYtNo+tzxwe&#xA;j19K5lISOVB/lEhX9t+2ZGKdFpyxsPrLMtxHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FUn8waaZohdwik8O7U6lRv965re0NNxDjj9Qc/RZ+E8J5FV0TVheRenKaX&#xA;MY+L/KH8w/jlmi1fiCj9QYavTeGbH0lBebE+G2fwLqfpocxu1Y/Sfe5HZp+oe5jPmnyzq3mP8uNc&#xA;0zRpRBrMiMbCRgCGcKC0JLFQFnSsRau3KvbB2fijOBscpfoTrMsoT26xfFf6R1VeSvprF0Zo5EDh&#xA;WSRCVZHRwGVlIoczDAd7iiZ7lFk8zXPxCSKyQ1pGPjanuaMPuw+geaPWfJ77/wA4yflW+p3n+NNZ&#xA;1P61HpN00NlpqRKgNykaOJpXpUhPVBRV/aFSdqGzHGJ3prySkNrfUeXtLsVcdt8VSq31OZpKORTr&#xA;SnauZM8UR73Cx55HnyTXMZzXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;xHVrKXS75Z7clIZDWFx+y3Up/T2+Wc/q8Bwz4o8jy8vJ3mmyjNCpcxz/AFrtS1ZL6whVxxuUf4x2&#xA;Iodxg1OrGXGAfqBRp9McczX0kJt5YQrppP8ANIxH3AfwzYdmCsXxcLtA/vPg+Vv+cjfKUXlv8zhf&#xA;2sfp6f5rha8AAAUX0BC3QUD+dWSRj/MxzJzR6tGGXR5vmO5D6f8A+cXUWDyNqVxK6ok2pOE5ED7E&#xA;EVTv/rZfikALJpoyxJNAPWLjX9Mhr+99Vv5Yxy/Hp+OQya/FHrfuZQ0eSXSvegP0/qF0/Cxta/5R&#xA;q339AMxPz+TIaxxcn8ljgLnJQvrTzPMvMyOu32YXC0+gdfxyGXHqjvfyLZiyaYbUPiEouNF82Ttb&#xA;w6e31YeqhuriZuLrArhmWNSrAlh8Ir0xwYtQSJG9tt/L9DeM+ljxCQ4rB2HUnayzxOfAcyC9PiIF&#xA;BX2rXNyLrfm6I1ezeFDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqjeWkF3b&#xA;vbzCsbihpsQexB8RleXFGcTGXItmLIYSEhzYTqNpPpsxiuh8BP7q4A+Bx/BvEZzOo08sMqly6F6H&#xA;BljlFx59R3fsZjpNu0GnQRsOL8eTA9QW+Ig/fnRaTHwYwC6HUz4shL5h/wCcr/NGk6r5x8ueXrCQ&#xA;T3uhLdXOqMtCsRuVjWKMmv2/3dWHaoyWUimOIbvIcxXKfTP5F6Pe3fkCzeCILGZZ+UzsApIlI7Vb&#xA;p7ZhZNJkyTJHLvcuGpx44Czv3PVbPyzaxENcMZmG/H7K/wBTmXh7MhHeXqcXL2hI7R2TeOOONAka&#xA;hEHRVFB+GbGMQBQ2cCUiTZXYULPS/ec+TVPau2G9qY8O9r8DJ2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVxAIoRUeBxpbecfnz+aA/L/yRNeWvxa1fk22lx7VDkfFLQ9RG&#xA;CPpIyEj0ZRHV8ZWZkV5Jr52fUbxzNdzyGrSSMan4t+lcxZG3KiKRuQZvqP8A5xc1VLryLe2PKslj&#xA;fuQB/vuaNGU/8GHzKwnZxsw3eyZc0uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV8df85NeYW1381odIV+VnoMKgr2MlA5b585OJ/1cx5y5/JyIR5fN5xcw&#xA;iWFl/aG6/PMdvKXWsbzSBCx9Nd2FdqYWIe//APOLeuLaebNR0Zzxj1K1EkQ8ZbVqgAf8Y5HP0Zdg&#xA;O9NeYbW+nsyXGdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdir4M85XD33n3zJqb/APH1fT+nXsgldgP+Hp9GYUpW5sRSV5BkoWsIjDnuzn7gaDFAZP5A8w/4&#xA;d856PrJJWK0uUM5HX0X+CX/kmzZKBo2iYsU+5wQQCDUHocznCdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir4B1Ik6jdFjVjNJU+/I5r3PQ2KuxVSllKniv&#xA;XucBLKMX2t+THmb/ABF+W+j3jvzureL6ndk7t6lt+7q3uyhX+nM3FK4uFljUmbZY1uxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvgrzJbfVfMWqW1OPoXk8fH&#xA;rThKwpX6MwZDdzonZLcilUlj4pG/7LKCfnTLJxoAsISskMk/LTyV/ifWHkukZtOtaGVQaeo7fZjr&#xA;4UBLHw+ea7V5zAUPqLs9JgEzcvpD6u/LnTrTSbOfTbWKK3hJEywwoEUNQIx2pUkBd8s7KyS9UZG+&#xA;rR2rGJqURXRmObl07sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdir4l/NqxNj+ZXmOEinO+lnHynPrf8b5h5R6i5mM+liR2Bytmj5YA9v6XfjRT7gZmyhcacOM6&#xA;lb6D/Kfyz+g/KNqJU4Xl0DcXAIoQ0lDQjxCgL9GcvnlxTJ+D0sNoAD3/ADejeXpSmqRjtIGU/dX9&#xA;YzI7PlWUebia6N4z5Mvzo3ROxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2Kvk//AJyW0s2n5kNdgHjqNpBPy7FkBgP4RDMbON3JwnZ5Sgq6jxIH45VEWQ2yNBmv&#xA;5e+XP8R+ctK0hlLQTTBrqn++Ih6ku/aqKR88znBfUfmG0WDUCyCiSgOAOgPQ5zvaOLhyX/O3d5oc&#xA;nFjruUdFBOqW9P5q/cDleiH72LZq/wC7LNM6Z592KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV83f85aXNkNU8uxRkfX1guXnXwhZ0EX/DLJmNqDycrTxu3g1m&#xA;7PdxgnapNPkDlWLeQbcoqJfSf/OM/lUquo+aJ0pz/wBBsifAEPMw+kKoPzzOcB6b5muRLfiIdIVo&#xA;f9Ztz/DNB2lk4slfzXdaDHUL72vLMXPUuf8AvtGb6T8P8cHZkLy33BOvlWOu8srzoHSOxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kviv89PMf6e/MnVJ0blbW&#xA;hFlbeHG3qrEezPyb6cw9QfU52nHpY95G8tal5l8z2Wj6cnK4uGILn7MaAVeRz/Kq7/gN8jh+oMs/&#xA;0F9x+XNBsfL+h2ej2K0trOMRqT1Y9WdvdmJY5nOvYrdSma5llO/N2b7znJ5Z8Uie8vS448MQPJPP&#xA;KcXw3Ep7lVB+VSf4Zteyo/UXXdpS5BkGbd1bsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVcRUEeP0Yq8C83/APOPXlE60ZLW5vLeGRQ5hEiuBUkbM6O3Udyc02vz&#xA;zhkoVydxoccJY975su/LDyLoflrUAunRBXZG5yn4pH2p8Tnf6OmUaCUp5gZHoW/XGMcJERW4enOS&#xA;EYjqAaZvzydCObz/ADkHp2W+WouGmBv9+Ozfd8P/ABrnQ9mxrFfeXSa+V5PcE0zPcJ2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjvmuGklvMO4ZCfluP1nNN&#xA;2rDeMna9my2IQ/lcE6i3tExP3jKezB+9+Db2h/d/FlWb90rz914uy/ykj7s5CQo09ODYtm+mxelY&#xA;W8fQhFJ+ZFT+OdRpocOOI8nnc8uKZPmicvanYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUr8yQ89ML94mVvv+H+OYHaULxX3FzdBKsld6WeVQPrsp7+n/AMbD&#xA;MHsv6z7nL7R+ge9k+b107B5oeWpyQ/zTlKD3emctOF5TH+l+l6KEqxg/0f0M4AAFB0zqXnXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhdVQPptyD2jY/8&#xA;CK/wyjVC8Uvc3ac1kj70i8q/72Tf8Y/+Nhmp7K+s+52XaP0D3snzeunYfY0uNdRhuGmaQH5EtnOY&#xA;PXqAf6V/pd9m9OGvKmYZ0boXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqwm5/NDybqGtaj5T0zUFu9cs42N5BGrlIwrBJB6hHBmUsAVUmh69DmFr8vDjPn&#xA;s5eix8WQeW6YeVQfrcx7CP8A42GYHZQ9Z9zm9o/SPe8ssvz91/Wvzc1HyTb6fDa6RZyXdq1wQ7XT&#xA;PaEqXJLBEVipoOFdxvmw105RxEguDo4CWQAvTfLMfPUuX++0Zvvov8c1fZsby33B2OvlWP3llmdA&#xA;6R2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtPIiCrsFHiTQfjhAJ5IJA5oSTWd&#xA;Jj+3dxV8A4J/CuWjT5D/AAlolq8Q5yHzQz+adDT/AI+OR/yUc/wywaLKejSe0cI/i+wqDecdHHT1&#xA;W+S/1IyY0GTyaz2rh81JvO2m/swzHxqEH/GxyY7On3hge18fdL7P1rG872X7NvIfmVH8ThHZ0u8M&#xA;T2xD+aWv8cWn/LNJ964/ydLvCP5Yh/NLv8cWn/LNJ964/wAnS7wv8sQ/ml8x/l7pc2l/nneXC/BY&#xA;au+sGxBPJvTgvZIyjk/tAwV+WaPtbCY49+/7jTv+ytQMk9u77wC+j9H1e002WR7gOfUUBeAB6Het&#xA;SMx+xNNLIZEdK/S3dtauGER4ut/ZX63hHlWPS5vzyOrWpZptZ02+1O4L7UkuNSm9IKOm1oIht13O&#xA;W9rQMcYvv/Ww7LyCcyR0/Y+gPLt7YWrTG5nWKR+IQMabCtcr7H005RlMCxyZ9q6vHCUYSIB5siiv&#xA;rKb+6uI5K/yup/Uc2sschzBddHNCXIg/FXyDY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXE&#xA;gAkmgG5JxVjGo+dERmjsYxJTb1pKhfoUbnNli7PJ3kXTZ+1gDUBfmUiufMOsXBPK5ZFP7MfwD/ha&#xA;HM6Glxx6Otya7NLnL5bIB5JJG5OxdvFiSfxy8ADk4pkTzW4WLsVdirsVcSB1xZwxykaiCVhmiHVh&#xA;9G/6sFubj7Lzy/hr3rDdR16E425cOxJn6pAfb+p4V5o1+Ty15j8seZ/TaS3tdU1yOdV6mNtSnEii&#xA;tByMcrUr4ZoO08PiY67+L/dO60WL8vLiu+X2DheqyfmV5f1eyjm0Gd71p47oWhWCZQ9xbRrK8IZ0&#xA;VfUCyK3HwyjsGBxRmJD1n9AcjtTBi1MokknhBeOecdQ1j8v/ADv5c1u1iEgg0uC29OSoST0YzDNG&#xA;T1rQq1fEg5b2lpuICJ7h9jHB+4lcff8AN6t5O/MuPzhLM9vAsCRW1tO3CRpeDz8w8EhaOKjxmPtU&#xA;EEHMrsePh4vD7uvfbXqtPi1GQzlHf3lk/wBYl/m/AZtraB2Xp/5v2n9avBq+p29PQuZI6dlYgfd0&#xA;yEscZcwG6Ojxx5Cvif1pjF5z19AA04cDxRAfv45iz0MDy2cqAiOYv5plbebdSmFVlFV+0pRf4DNd&#xA;m05xnfk5+HT4cg2G/vRK+adTHURt81P8CMppsPZ2PzVU823Y+3BG3y5D9ZOCmB7Nh0JREfm9D/eW&#xA;xHurV/WBjTVLsw9JIqLzRpj/AG+cf+stf+I8saaZdn5Byoo6DUrCeginRiei1ofuO+Bxp4Jx5gon&#xA;FqdirsVdirsVdirsVdirToroyOKqwKsPEHY4QaNoIBFFh2o+TbuNi9iwmj7RsQrj6Tsc2+LtCJ+r&#xA;Yugz9lSBuG4+1I7ixvLY0ngeL3ZSB9/TM2GSMuRt1uTDOH1AhQybU7FXYq7FVKeVkAC9T3wEu57K&#xA;0UMoMpb0eSFZmY1JrgelhCMRQFBrFk7FWM+YPIGj615cn0Sd3VJLie9guDRniuLiaScsuygqGmZa&#xA;fy9675RkwRlHh+LExsMQ8ofktqfl7W7XUU8xOYrZ+Zt4oSgkU05o1ZGADhQDtmPh0RhK+JiIU9D1&#xA;7y3omv2X1LV7RLu3B5KGqrK3irqVZT8jmZkxxmKkGZFpf5Y/L/yt5ZuJrnR7VoJ509OR2lkkqlQa&#xA;UdiOo8Mhi08IG4hREBkWXJbAJNAKnwGKq0dlcv0TiPFtsonqYR6t8NNOXRMbW0WAE15O3U9s1mo1&#xA;JybdHZafTjHv1V8xXJdirsVdirsVR9jrV/aMAsheIdYn3FPbw+jGnGzaWE+Yo97No25orUK8gDxP&#xA;UV7ZF54ijTeKHYq7FXYq7FXYq7FXYq4gEUO4OKoWbSdMm3ltYmP83EA/eN8tjnmORLRPTY5c4hBS&#xA;eVNEfpAUP+S7fxJy4a3KOrjy7Nwnp9qGfyVph+xLMvtVSP8AiOWDtGfcGk9kY+hl+PgoP5GgP2Lt&#xA;h80B/iMmO0j3NZ7Hj0l9ii/kQkU+uBh3rHT/AI2OS/lIfzftZYuzp4jcJ0fd+1DS/l7cf7qu0+TK&#xA;R+quEdojudvjnMfVR936kHN5G1aPoVlA7oR/xsVOH+UI9zlx4D/FSDk8s6hH9uORR4+maffj/KEe&#xA;5vjp4nlKKgdJcGhkofAr/bg/lAdzeNB5uGlCu8lR7Cn8cH8of0ftT+Q/pfYvGlw93b8P6ZA6+XcG&#xA;Q0EepXrp1sBuC3uT/SmQOuyHuZjRQHevWztl6Rj6d/15WdVkPVtGmxjoqqqqKKAB4DbKZSJ5ltjE&#xA;DkG8iydirsVdiqpHbzyf3cbv/qqT+rFjKcRzKKi0TVZfs2zD/Xov/EqY20S1eIfxI+DyneNQzSpG&#xA;PAVY/wAB+OC3Hn2lAcgSm9j5fsLRg/EyyjcO+9D7DpjbgZtbOe3IJlgcR2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KtMisKMAw8CK4pBIUWsbJ/t28TfNFP8MWYzTHIn5qbaRpjdbWP6Fp+&#xA;rG2Y1OT+cVh0LSSam2X6Cw/UcNshrMv85adA0gje3H0Mw/UcbSNbl7/uaHl7Rwa/V/8Ah3/5qxtP&#xA;53L3/YF36B0j/lnH3t/XG2P5zL/OXDRdKFKWybeNT+vBaDq8v84qi6Zpy9LWL58FP8MWJ1GQ/wAR&#xA;+aqlvbp9iJF+SgfqxazOR5lUxYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:56836B1D1B04E4118E5D94913138D7DB</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:56836B1D1B04E4118E5D94913138D7DB</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:71014e2a-37b2-4548-82cc-6ea99ecca0e4</stRef:instanceID>
            <stRef:documentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:56836B1D1B04E4118E5D94913138D7DB</stEvt:instanceID>
                  <stEvt:when>2014-07-05T13:16:54+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
[1 0 0 1 0 0 ]ct
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
283.806 383.303 mo
296.363 386.571 303.658 390.466 303.658 394.647 cv
303.658 406.195 248.066 415.555 179.492 415.555 cv
174.997 415.555 170.56 415.514 166.189 415.436 cv
188.306 421.191 226.763 425 270.506 425 cv
339.081 425 394.673 415.641 394.673 404.092 cv
394.673 393.301 346.126 384.421 283.806 383.303 cv
cp
.94902 .678431 .8 rgb
f
146.341 404.092 mo
146.341 392.544 201.932 383.184 270.506 383.184 cv
274.999 383.184 279.436 383.225 283.806 383.303 cv
261.688 377.548 223.232 373.738 179.492 373.738 cv
110.917 373.738 55.3267 383.1 55.3267 394.647 cv
55.3267 405.438 103.871 414.317 166.189 415.436 cv
153.634 412.168 146.341 408.273 146.341 404.092 cv
cp
.607843 .831373 .984314 rgb
f
303.658 394.647 mo
303.658 390.466 296.363 386.571 283.806 383.303 cv
279.436 383.225 274.999 383.184 270.506 383.184 cv
201.932 383.184 146.341 392.544 146.341 404.092 cv
146.341 408.273 153.634 412.168 166.189 415.436 cv
170.56 415.514 174.997 415.555 179.492 415.555 cv
248.066 415.555 303.658 406.195 303.658 394.647 cv
cp
.709804 .631373 .921569 rgb
f
201.761 302.701 mo
202.078 306.882 202.729 311.607 203.865 316.978 cv
207.396 333.662 211.173 347.037 208.337 357.437 cv
206.833 362.949 199.277 361.88 198.649 366.661 cv
198.021 371.442 203.65 371.975 204.919 377.544 cv
206.193 383.135 205.968 391.85 209.533 396.144 cv
213.097 400.437 220.772 400.952 221.347 399.503 cv
221.92 398.052 214.835 395.314 216.983 383.156 cv
220.345 364.118 218.04 343.633 219.382 324.261 cv
219.853 317.45 220.21 308.784 220.516 300.299 cv
215.334 303.626 207.629 303.882 201.761 302.701 cv
cp
.968627 .760784 .521569 rgb
f
223.127 209.243 mo
214.849 191.404 197.998 215.738 197.998 215.738 cv
197.998 215.738 205.48 266.171 204.548 274.397 cv
203.985 279.359 200.594 287.302 201.761 302.701 cv
207.629 303.882 215.334 303.626 220.516 300.299 cv
220.949 288.322 221.28 276.706 221.688 271.178 cv
222.852 255.439 231.407 227.085 223.127 209.243 cv
.917647 .611765 .360784 rgb
f
220.401 392.055 mo
220.28 391.666 220.585 391.165 220.474 390.737 cv
220.215 389.742 219.206 389.227 218.483 389.749 cv
217.89 390.18 217.799 391.25 217.258 391.788 cv
216.961 391.708 li
215.989 391.357 209.917 388.968 210.899 392.772 cv
211.1 393.555 212.053 393.604 212.24 394.232 cv
212.407 394.779 211.799 395.442 211.918 396.111 cv
212.28 398.128 214.007 397.977 215.031 397.218 cv
215.998 396.498 216.57 395.032 217.505 394.409 cv
218.502 393.747 218.183 395.032 219.496 395.633 cv
220.589 395.542 222.038 394.479 220.976 392.738 cv
220.763 392.39 220.549 392.529 220.401 392.055 cv
cp
.0980392 .0980392 .0980392 rgb
f
218.011 391.88 mo
217.113 392.547 li
217.024 392.534 213.558 391.849 213.924 392.911 cv
214.125 393.494 215.034 392.713 215.351 393.318 cv
215.085 393.688 214.319 393.944 214.293 394.479 cv
214.246 395.443 215.22 394.911 215.567 394.653 cv
216.58 393.907 217.534 392.989 218.813 393.393 cv
219.256 393.532 219.404 393.562 219.881 393.391 cv
219.875 393.06 219.71 392.749 219.422 392.641 cv
219.842 392.351 219.881 391.731 219.336 391.465 cv
218.919 391.262 218.294 391.584 218.011 391.88 cv
cp
0 0 0 rgb
f
219.739 395.69 mo
217.457 395.132 217.783 393.292 217.097 392.061 cv
208.56 391.104 207.821 385.354 206.617 377.904 cv
205.647 371.898 206.952 364.977 204.288 361.698 cv
199.905 362.921 197.895 364.075 198.002 368.735 cv
198.354 369.945 198.704 370.813 199.053 371.482 cv
199.053 398.951 li
200.285 398.951 li
200.285 373.194 li
201.174 374.09 202.062 374.579 202.962 376.722 cv
204.443 380.25 201.424 389.033 207.254 397.305 cv
210.765 402.283 216.496 401.505 221.938 399.992 cv
223.175 399.649 223.806 396.688 219.739 395.69 cv
cp
.0980392 .0980392 .0980392 rgb
f
216.859 391.53 mo
215.996 391.821 215.965 392.15 216.272 393.061 cv
216.58 393.971 216.798 394.883 217.662 394.591 cv
218.525 394.299 218.884 393.699 218.575 392.789 cv
218.267 391.878 217.725 391.238 216.859 391.53 cv
cp
1 1 1 rgb
f
259.86 232.005 mo
258.655 227.797 257.26 223.482 255.735 219.033 cv
243.165 182.352 226.932 224.949 226.932 224.949 cv
226.932 224.949 235.896 241.083 241.469 254.426 cv
244.686 245.177 251.072 234.138 259.86 232.005 cv
.917647 .611765 .360784 rgb
f
241.469 254.426 mo
244.377 261.386 246.362 267.586 245.67 270.339 cv
244.121 276.496 237.396 286.814 239.329 312.449 cv
240.609 329.455 242.573 343.214 238.38 353.144 cv
236.156 358.406 228.809 356.343 227.551 360.998 cv
226.293 365.652 231.8 366.929 232.316 372.618 cv
232.836 378.327 231.454 386.937 234.416 391.666 cv
237.378 396.396 243.986 398.003 244.748 396.645 cv
245.509 395.282 239.781 391.549 243.526 379.784 cv
249.392 361.363 249.832 340.753 253.739 321.731 cv
257.05 305.604 261.139 278.696 263.086 269.428 cv
265.557 257.675 263.697 245.399 259.86 232.005 cv
251.072 234.138 244.686 245.177 241.469 254.426 cv
cp
.968627 .760784 .521569 rgb
f
244.592 392.574 mo
242.403 391.718 242.973 389.938 242.456 388.625 cv
234.121 386.543 234.155 380.745 233.953 373.201 cv
233.789 367.119 236.003 360.433 233.799 356.828 cv
229.293 357.457 227.146 358.334 226.634 362.967 cv
226.896 364.546 227.271 365.563 227.694 366.358 cv
223.797 391.14 li
225.028 391.334 li
228.712 367.914 li
229.349 368.795 229.993 369.72 230.486 371.543 cv
231.484 375.235 227.325 383.539 232.002 392.514 cv
234.82 397.915 240.604 397.904 246.198 397.131 cv
247.471 396.956 248.49 394.104 244.592 392.574 cv
cp
.0980392 .0980392 .0980392 rgb
f
245.731 389.059 mo
245.663 388.657 246.032 388.201 245.978 387.764 cv
245.854 386.742 244.923 386.097 244.137 386.519 cv
243.491 386.866 243.259 387.916 242.651 388.377 cv
242.368 388.258 li
241.45 387.781 235.751 384.605 236.218 388.506 cv
236.313 389.309 237.251 389.485 237.353 390.133 cv
237.446 390.695 236.755 391.272 236.784 391.951 cv
236.875 393.998 238.605 394.078 239.722 393.462 cv
240.775 392.877 241.537 391.5 242.549 391.007 cv
243.624 390.483 243.136 391.715 244.358 392.484 cv
245.454 392.54 247.031 391.679 246.209 389.812 cv
246.046 389.438 245.815 389.549 245.731 389.059 cv
cp
f
243.385 388.568 mo
242.407 389.108 li
242.32 389.086 238.977 387.944 239.197 389.047 cv
239.318 389.65 240.324 388.997 240.557 389.641 cv
240.245 389.971 239.452 390.122 239.356 390.649 cv
239.18 391.599 240.217 391.2 240.595 390.992 cv
241.697 390.387 242.765 389.604 243.979 390.174 cv
244.399 390.37 244.542 390.419 245.038 390.313 cv
245.076 389.983 244.954 389.654 244.683 389.509 cv
245.138 389.277 245.259 388.67 244.753 388.332 cv
244.368 388.075 243.705 388.313 243.385 388.568 cv
cp
0 0 0 rgb
f
242.291 388.067 mo
241.396 388.242 241.322 388.564 241.505 389.507 cv
241.688 390.45 241.784 391.383 242.68 391.209 cv
243.574 391.034 244.008 390.486 243.824 389.543 cv
243.639 388.6 243.187 387.895 242.291 388.067 cv
cp
1 1 1 rgb
f
146.499 111.09 mo
147.174 112.483 154.062 114.454 148.327 115.663 cv
150.192 117.277 158.727 120.614 161.087 121.43 cv
160.319 119.46 159.648 116.828 158.135 115.271 cv
156.833 113.933 144.839 107.663 146.499 111.09 cv
cp
.976471 .705882 .458824 rgb
f
292.28 142.433 mo
289.899 142.324 286.346 143.881 284.638 145.125 cv
287.065 145.711 294.45 148.01 296.892 147.655 cv
292.713 143.545 297.966 145.636 299.285 144.827 cv
302.532 142.837 294.146 142.518 292.28 142.433 cv
cp
f
201.422 121.43 mo
210.497 136.036 212.014 138.853 218.111 141.036 cv
208.937 129.934 199.792 117.934 196.742 103.819 cv
196.758 108.922 197.881 115.73 201.422 121.43 cv
.917647 .611765 .360784 rgb
f
198.328 96.23 mo
180.225 96.8223 193.544 137.349 190.977 152.304 cv
187.978 150.177 185.614 147.431 182.828 144.993 cv
174.99 138.135 168.705 127.877 161.399 121.213 cv
160.056 119.988 158.712 116.496 156.993 115.963 cv
153.985 115.033 150.801 117.675 148.125 114.479 cv
148.91 113.752 150.268 112.979 151.529 110.703 cv
152.229 109.437 152.684 107.77 151.211 108.848 cv
149.879 109.823 147.72 112.398 146.782 112.959 cv
146.298 110.896 147.479 106.375 145.778 104.586 cv
144.076 102.796 144.598 109.668 144.553 112.856 cv
143.212 111.918 143.654 106.014 141.971 104.308 cv
140.288 102.601 141.002 110.819 142.117 113.984 cv
139.88 112.164 139.516 109.591 137.096 108.292 cv
134.699 107.007 136.244 109.237 136.688 110.025 cv
138.685 113.569 140.607 116.147 143.675 118.156 cv
148.11 121.059 152.886 120.151 157.084 124.182 cv
161.42 128.344 184.579 168.875 194.972 168.876 cv
201.175 168.878 204.066 130.206 201.422 119.447 cv
198.328 96.23 li
cp
.968627 .760784 .521569 rgb
f
195.271 166.916 mo
188.816 166.667 178.1 153.445 169.294 141.493 cv
177.905 153.936 188.748 168.459 194.972 168.876 cv
195.764 168.93 196.618 166.841 197.429 163.473 cv
196.677 165.656 195.937 166.941 195.271 166.916 cv
cp
.917647 .611765 .360784 rgb
f
302.131 139.397 mo
301.839 139.397 301.604 139.764 301.604 140.216 cv
301.604 140.67 301.839 141.037 302.131 141.037 cv
302.422 141.037 302.658 140.67 302.658 140.216 cv
302.658 139.764 302.422 139.397 302.131 139.397 cv
cp
1 1 1 rgb
f
301.636 141.037 mo
301.463 141.037 301.323 141.255 301.323 141.525 cv
301.323 141.795 301.463 142.013 301.636 142.013 cv
301.809 142.013 301.95 141.795 301.95 141.525 cv
301.95 141.255 301.809 141.037 301.636 141.037 cv
cp
f
306.651 158.31 mo
306.651 158.641 304.619 158.909 302.111 158.909 cv
299.603 158.909 297.57 158.641 297.57 158.31 cv
297.57 157.979 299.603 157.71 302.111 157.71 cv
304.619 157.71 306.651 157.979 306.651 158.31 cv
cp
.811765 .929412 1 rgb
f
298.205 130.973 mo
297.57 130.973 li
296.182 133.857 295.191 141.041 295.728 144.002 cv
295.874 144.002 li
295.201 141.045 296.379 133.884 298.205 130.973 cv
cp
.521569 .819608 .929412 rgb
f
295.874 144.002 mo
295.728 144.002 li
296.189 146.549 297.775 148.433 301.253 148.433 cv
297.999 148.026 296.391 146.274 295.874 144.002 cv
cp
f
297.57 130.973 mo
297.151 130.973 li
295.731 133.444 294.833 140.043 294.833 142.78 cv
294.833 143.218 294.863 143.619 294.908 144.002 cv
295.183 144.002 295.451 144.002 295.728 144.002 cv
295.191 141.041 296.182 133.857 297.57 130.973 cv
cp
.811765 .929412 1 rgb
f
302.483 130.973 mo
298.205 130.973 li
296.379 133.884 295.201 141.045 295.874 144.002 cv
298.644 144.002 301.548 144.002 304.448 144.002 cv
304.728 140.697 304.131 133.776 302.483 130.973 cv
cp
f
308.865 142.78 mo
308.865 140.043 307.967 133.444 306.547 130.973 cv
306.344 130.973 li
307.763 134.044 307.829 140.964 306.651 144.002 cv
307.369 144.002 308.081 144.002 308.79 144.002 cv
308.834 143.619 308.865 143.218 308.865 142.78 cv
cp
f
306.344 130.973 mo
302.483 130.973 li
304.131 133.776 304.728 140.697 304.448 144.002 cv
305.184 144.002 305.92 144.002 306.651 144.002 cv
307.829 140.964 307.763 134.044 306.344 130.973 cv
cp
.890196 .960784 1 rgb
f
304.448 144.002 mo
304.315 145.586 303.998 147.108 303.468 148.433 cv
304.921 147.271 305.984 145.726 306.651 144.002 cv
305.92 144.002 305.184 144.002 304.448 144.002 cv
cp
.443137 .00784314 .0470588 rgb
f
302.131 149.179 mo
301.85 149.179 301.778 149.496 301.604 149.474 cv
301.599 149.527 li
301.717 149.53 301.83 149.546 301.95 149.546 cv
302.2 149.546 302.438 149.521 302.68 149.506 cv
302.674 149.401 302.667 149.294 302.658 149.179 cv
302.511 149.193 302.288 149.179 302.131 149.179 cv
cp
.741176 .0901961 .14902 rgb
f
299.592 144.002 mo
298.859 144.002 298.144 144.002 297.423 144.002 cv
297.63 144.965 297.83 145.828 298.04 146.249 cv
298.553 145.75 299.058 144.914 299.592 144.002 cv
cp
f
295.345 144.002 mo
295.2 144.002 295.054 144.002 294.908 144.002 cv
295.041 145.149 295.391 146.065 295.877 146.821 cv
296.088 146.804 li
295.91 146.114 295.531 145.259 295.345 144.002 cv
cp
f
301.541 149.522 mo
301.599 149.527 li
301.604 149.474 li
301.778 149.496 301.85 149.179 302.131 149.179 cv
302.288 149.179 302.511 149.193 302.658 149.179 cv
302.67 149.361 li
304.328 148.877 305.652 147.976 307.222 147.655 cv
308.036 146.795 308.604 145.617 308.79 144.002 cv
308.081 144.002 307.369 144.002 306.651 144.002 cv
305.984 145.726 304.921 147.271 303.468 148.433 cv
303.624 148.045 303.755 147.636 303.875 147.217 cv
303.057 148.138 302.23 148.965 301.541 149.522 cv
cp
f
303.658 144.002 mo
303.162 144.002 302.669 144.002 302.172 144.002 cv
301.389 145.214 300.541 146.449 299.972 147.365 cv
300.915 147.325 302.25 145.578 303.658 144.002 cv
cp
f
303.4 139.739 mo
301.811 140.129 300.643 142.211 299.592 144.002 cv
300.446 144.002 301.308 144.002 302.172 144.002 cv
303.706 141.63 304.987 139.348 303.4 139.739 cv
cp
.968627 .760784 .521569 rgb
f
242.62 164.347 mo
242.62 165.019 242.467 165.589 242.223 166.08 cv
248.815 164.161 256.453 161.155 263.384 158.264 cv
256.428 160.38 249.709 162.856 242.62 162.96 cv
242.62 164.347 li
.917647 .611765 .360784 rgb
f
310.504 146.207 mo
309.97 146.165 307.692 147.559 307.222 147.655 cv
306.109 148.83 304.521 149.394 302.68 149.506 cv
302.678 149.46 301.861 149.577 301.416 149.627 cv
301.541 149.522 li
299.156 149.444 297.064 148.665 295.877 146.821 cv
291.897 147.18 291.171 145.687 288.189 144.863 cv
286.455 144.384 283.07 145.009 281.278 145.317 cv
271.533 146.989 260.707 152.239 250.41 153.788 cv
247.89 154.166 245.458 154.771 242.99 155.171 cv
242.914 157.005 242.734 158.83 242.531 160.653 cv
242.587 160.92 242.62 161.201 242.62 161.502 cv
242.62 162.96 li
249.709 162.856 256.428 160.38 263.384 158.264 cv
272.81 154.333 280.928 150.616 283.312 150.144 cv
286.557 149.502 289.099 150.304 291.662 151.106 cv
293.608 151.714 295.566 152.323 297.854 152.3 cv
301.521 152.264 304.53 151.129 308.123 149.221 cv
308.92 148.797 313.216 146.417 310.504 146.207 cv
.968627 .760784 .521569 rgb
f
303.875 147.217 mo
306.232 144.559 308.466 141.17 306.757 141.557 cv
305.767 141.781 304.692 142.846 303.658 144.002 cv
303.923 144.002 304.185 144.002 304.448 144.002 cv
304.354 145.122 304.163 146.207 303.875 147.217 cv
cp
f
301.253 148.433 mo
297.999 148.026 296.391 146.274 295.874 144.002 cv
296.38 144.002 296.909 144.002 297.423 144.002 cv
297.15 142.728 296.865 141.275 296.526 140.397 cv
295.867 138.695 295.352 140.345 295.259 141.789 cv
295.203 142.654 295.252 143.375 295.345 144.002 cv
295.473 144.002 295.599 144.002 295.728 144.002 cv
296.189 146.549 297.775 148.433 301.253 148.433 cv
cp
f
302.68 149.506 mo
304.521 149.394 306.109 148.83 307.222 147.655 cv
305.652 147.976 304.328 148.877 302.67 149.361 cv
302.68 149.506 li
cp
.556863 .0666667 .113725 rgb
f
301.541 149.522 mo
302.23 148.965 303.057 148.138 303.875 147.217 cv
304.163 146.207 304.354 145.122 304.448 144.002 cv
304.185 144.002 303.923 144.002 303.658 144.002 cv
302.25 145.578 300.915 147.325 299.972 147.365 cv
300.541 146.449 301.389 145.214 302.172 144.002 cv
301.308 144.002 300.446 144.002 299.592 144.002 cv
299.058 144.914 298.553 145.75 298.04 146.249 cv
297.83 145.828 297.63 144.965 297.423 144.002 cv
296.909 144.002 296.38 144.002 295.874 144.002 cv
296.391 146.274 297.999 148.026 301.253 148.433 cv
297.775 148.433 296.189 146.549 295.728 144.002 cv
295.599 144.002 295.473 144.002 295.345 144.002 cv
295.531 145.259 295.91 146.114 296.088 146.804 cv
295.877 146.821 li
297.064 148.665 299.156 149.444 301.541 149.522 cv
cp
.968627 .760784 .521569 rgb
f
301.599 149.527 mo
301.518 150.526 301.516 150.913 301.604 152.019 cv
301.95 156.39 301.719 158.588 302.062 158.588 cv
302.404 158.588 301.957 156.008 302.483 152.218 cv
302.661 150.943 302.726 150.362 302.68 149.506 cv
302.438 149.521 302.2 149.546 301.95 149.546 cv
301.83 149.546 301.717 149.53 301.599 149.527 cv
cp
.811765 .929412 1 rgb
f
238.582 99.1133 mo
236.274 98.2124 230.545 98.9141 228.029 94.6006 cv
224.312 85.3067 227.731 75.5581 227.731 75.5581 cv
227.731 75.5581 214.141 73.2617 213.437 73.2115 cv
214.118 90.3062 217.717 94.5312 198.328 96.2299 cv
197.533 96.2998 196.729 99.4297 196.742 103.819 cv
199.792 117.934 208.937 129.934 218.111 141.036 cv
218.573 141.201 219.059 141.364 219.579 141.527 cv
235.808 146.612 251.213 104.043 238.582 99.1133 cv
.968627 .760784 .521569 rgb
f
213.785 89.1768 mo
216.664 80.1226 221.645 83.2378 226.313 84.0718 cv
226.646 76.8604 227.731 74.792 227.731 74.792 cv
227.731 74.792 209.875 69.3394 209.17 69.2891 cv
211.905 77.4775 215.237 84.9229 213.785 89.1768 cv
cp
.898039 .631373 .407843 rgb
f
225.761 100.132 mo
225.563 100.084 225.433 100.466 225.072 100.646 cv
224.73 100.854 224.012 100.816 223.321 100.61 cv
221.906 100.229 220.642 99.333 220.679 99.2969 cv
220.633 99.3198 221.663 100.539 223.156 101.15 cv
223.865 101.45 224.805 101.637 225.445 101.162 cv
226.041 100.66 225.915 100.13 225.761 100.132 cv
cp
.886275 .552941 .278431 rgb
f
243.05 157.11 mo
245.557 141.31 244.582 145.612 243.707 134.296 cv
248.319 132.588 253.598 126.731 250.05 121.43 cv
249.268 120.261 245.954 116.148 244.752 114.355 cv
241.307 110.625 235.175 104.144 233.88 98.8384 cv
236.482 121.43 220.635 118.426 200.211 96.5815 cv
202.861 100.333 205.015 104.436 206.618 108.604 cv
208.956 114.679 211.653 125.349 207.612 131.69 cv
214.038 140.9 220.41 153.701 218.512 162.102 cv
216.664 170.277 183.362 179.81 205.363 271.224 cv
211.734 272.611 216.596 270.985 220.487 267.547 cv
223.603 257.159 225.915 225.309 226.932 224.949 cv
226.393 221.03 235.955 242.23 236.191 242.835 cv
240.756 229.303 244.035 212.592 253.814 214.094 cv
251.73 205.437 240.095 175.726 243.05 157.11 cv
.968627 .760784 .521569 rgb
f
243.619 178.977 mo
240.916 181.883 234.642 185.065 228.558 184.151 cv
221.803 183.137 219.033 176.772 209.336 176.772 cv
223.646 180.506 227.275 198.864 227.365 212.177 cv
228.896 200.709 235.519 188.313 243.213 179.789 cv
243.619 178.977 li
.670588 .494118 .294118 rgb
f
201.602 300.084 mo
200.052 299.735 198.432 299.208 196.741 298.488 cv
198.596 293.547 204.548 274.397 204.548 274.397 cv
204.018 279.07 200.98 286.387 201.602 300.084 cv
220.756 293.448 mo
221.079 284.066 221.358 275.639 221.688 271.178 cv
222.534 259.733 227.289 241.618 226.637 225.724 cv
226.745 225.25 226.843 224.98 226.932 224.949 cv
226.886 224.618 226.913 224.466 227 224.466 cv
227.028 224.466 227.063 224.482 227.103 224.513 cv
226.99 224.795 226.932 224.949 226.932 224.949 cv
226.932 224.949 231.53 233.225 236.187 242.825 cv
236.189 242.829 236.19 242.832 236.191 242.835 cv
236.191 242.835 li
237.487 245.503 238.786 248.275 239.993 251 cv
238.597 254.992 237.198 259.201 235.728 263.409 cv
231.724 274.873 227.194 286.337 220.756 293.448 cv
204.548 274.397 mo
183.362 179.45 216.779 169.767 218.512 162.102 cv
216.692 170.15 184.395 179.514 204.372 267.001 cv
204.622 270.381 204.706 273 204.548 274.397 cv
204.548 274.397 li
258.137 226.295 mo
258.136 226.295 258.136 226.295 258.135 226.295 cv
257.382 223.912 256.578 221.493 255.735 219.033 cv
255.102 217.184 254.458 215.536 253.809 214.074 cv
252.021 206.672 243.318 184.012 242.617 165.964 cv
242.682 165.945 242.749 165.925 242.815 165.906 cv
244.199 186.563 256.339 218.822 258.137 226.295 cv
242.585 164.893 mo
242.56 163.737 242.571 162.6 242.62 161.491 cv
242.62 161.495 242.62 161.498 242.62 161.502 cv
242.62 162.96 li
242.62 162.96 li
242.62 164.347 li
242.62 164.537 242.608 164.719 242.585 164.893 cv
.290196 .290196 .290196 rgb
f
206.179 300.616 mo
204.722 300.616 203.198 300.444 201.602 300.084 cv
200.98 286.387 204.018 279.07 204.548 274.397 cv
204.548 274.397 li
204.548 274.397 li
204.548 274.397 li
204.706 273 204.622 270.381 204.372 267.001 cv
204.689 268.389 205.019 269.795 205.363 271.224 cv
206.904 271.559 208.357 271.719 209.729 271.719 cv
214.029 271.719 217.537 270.154 220.487 267.547 cv
223.331 258.064 225.506 230.694 226.637 225.724 cv
227.289 241.618 222.534 259.733 221.688 271.178 cv
221.358 275.639 221.079 284.066 220.756 293.448 cv
216.747 297.876 212 300.616 206.179 300.616 cv
.266667 .176471 .105882 rgb
f
239.993 251 mo
238.786 248.275 237.487 245.503 236.192 242.834 cv
240.563 229.875 243.755 214 252.607 214 cv
252.998 214 253.4 214.031 253.814 214.094 cv
253.812 214.087 253.81 214.081 253.809 214.074 cv
254.458 215.536 255.102 217.184 255.735 219.033 cv
256.578 221.493 257.382 223.912 258.135 226.295 cv
257.732 226.233 257.337 226.203 256.949 226.203 cv
249.51 226.203 244.768 237.342 239.993 251 cv
236.187 242.825 mo
231.53 233.225 226.932 224.949 226.932 224.949 cv
226.932 224.949 226.99 224.795 227.103 224.513 cv
228.41 225.515 235.899 242.113 236.187 242.825 cv
f
242.617 165.964 mo
242.603 165.605 242.592 165.249 242.585 164.893 cv
242.608 164.719 242.62 164.537 242.62 164.347 cv
242.62 162.96 li
242.62 162.96 li
242.644 162.96 242.667 162.96 242.691 162.959 cv
242.705 163.912 242.747 164.894 242.815 165.906 cv
242.749 165.925 242.682 165.945 242.617 165.964 cv
f
242.62 162.96 mo
242.62 162.96 li
242.62 161.502 li
242.62 161.498 242.62 161.495 242.62 161.491 cv
242.687 159.977 242.827 158.512 243.05 157.11 cv
243.162 156.404 243.267 155.737 243.365 155.109 cv
243.365 155.109 li
243.267 155.737 243.162 156.404 243.05 157.11 cv
242.771 158.868 242.66 160.834 242.691 162.959 cv
242.667 162.96 242.644 162.96 242.62 162.96 cv
.282353 .219608 .152941 rgb
f
244.752 114.355 mo
244.748 114.352 244.745 114.348 244.741 114.344 cv
244.745 114.348 244.748 114.352 244.752 114.355 cv
232.897 98.0142 mo
232.897 98.0141 li
232.896 98.0127 232.896 98.0103 232.895 98.0088 cv
232.896 98.0108 232.896 98.0122 232.897 98.0142 cv
203.816 95.5817 mo
203.816 95.581 203.815 95.5803 203.814 95.5796 cv
203.814 95.5796 li
203.817 95.5816 203.816 95.5817 203.816 95.5817 cv
.290196 .290196 .290196 rgb
f
226.744 114.432 mo
221.973 114.432 215.217 110.698 207.416 103.687 cv
206.482 100.722 205.29 97.6692 203.816 95.5817 cv
203.817 95.5816 li
214.52 105.971 222.107 112.211 227.036 114.427 cv
226.94 114.43 226.842 114.432 226.744 114.432 cv
234.094 105.281 mo
233.868 103.182 233.465 100.759 232.897 98.0141 cv
232.897 98.0142 li
233.126 98.9511 233.537 99.9511 234.077 100.982 cv
234.183 102.559 234.187 103.989 234.094 105.281 cv
.282353 .219608 .152941 rgb
f
209.729 271.719 mo
208.357 271.719 206.904 271.559 205.363 271.224 cv
205.019 269.795 204.689 268.389 204.372 267.001 cv
184.395 179.514 216.692 170.15 218.512 162.102 cv
218.512 162.102 li
218.743 161.076 218.852 159.985 218.852 158.843 cv
218.854 150.629 213.254 139.776 207.612 131.69 cv
211.653 125.349 210.747 116.394 209.17 110.079 cv
208.741 108.359 208.16 106.05 207.416 103.687 cv
215.217 110.698 221.973 114.432 226.744 114.432 cv
226.842 114.432 226.94 114.43 227.036 114.427 cv
228.398 115.04 229.559 115.345 230.525 115.345 cv
233.743 115.345 234.814 111.958 234.094 105.281 cv
234.187 103.989 234.183 102.559 234.077 100.982 cv
236.591 105.783 241.903 111.271 244.741 114.344 cv
244.745 114.348 244.748 114.352 244.752 114.355 cv
244.752 114.355 li
245.954 116.148 249.268 120.261 250.05 121.43 cv
250.864 122.646 251.213 123.892 251.213 125.111 cv
251.21 129.201 247.261 132.98 243.707 134.296 cv
243.707 134.296 li
243.707 134.296 li
244.165 140.214 244.649 141.86 244.649 144.344 cv
244.649 146.398 244.318 149.023 243.365 155.109 cv
243.267 155.737 243.162 156.404 243.05 157.11 cv
242.827 158.512 242.687 159.977 242.62 161.491 cv
242.571 162.6 242.56 163.737 242.585 164.893 cv
242.592 165.249 242.603 165.605 242.617 165.964 cv
243.318 184.012 252.021 206.672 253.809 214.074 cv
253.81 214.081 253.812 214.087 253.814 214.094 cv
253.4 214.031 252.998 214 252.607 214 cv
243.755 214 240.563 229.875 236.191 242.835 cv
236.191 242.835 li
236.19 242.832 236.189 242.829 236.187 242.825 cv
235.899 242.113 228.41 225.515 227.103 224.513 cv
227.063 224.482 227.028 224.466 227 224.466 cv
226.913 224.466 226.886 224.618 226.932 224.949 cv
226.843 224.98 226.745 225.25 226.637 225.724 cv
225.506 230.694 223.331 258.064 220.487 267.547 cv
217.537 270.154 214.029 271.719 209.729 271.719 cv
209.336 176.772 mo
223.646 180.506 227.275 198.864 227.365 212.177 cv
228.896 200.709 235.519 188.313 243.213 179.789 cv
243.619 178.977 li
241.238 181.537 236.085 184.311 230.733 184.311 cv
230.009 184.311 229.283 184.26 228.558 184.151 cv
221.803 183.137 219.033 176.772 209.336 176.772 cv
f
227.365 212.177 mo
227.275 198.864 223.646 180.506 209.336 176.772 cv
219.033 176.772 221.803 183.137 228.558 184.151 cv
229.283 184.26 230.009 184.311 230.733 184.311 cv
236.085 184.311 241.238 181.537 243.619 178.977 cv
243.213 179.789 li
235.519 188.313 228.896 200.709 227.365 212.177 cv
.196078 .145098 .0862745 rgb
f
244.022 130.921 mo
238.467 129.326 233.657 129.894 226.49 133.452 cv
222.69 135.932 215.999 134.022 211.905 132.959 cv
215.905 138.036 224.283 138.008 226.816 136.768 cv
229.643 135.351 232.859 134.376 235.978 134.288 cv
238.564 134.167 241.422 133.719 244.027 134.171 cv
246.03 133.352 248.115 131.779 249.521 129.832 cv
247.945 130.461 245.731 131.395 244.022 130.921 cv
cp
0 0 0 rgb
f
221.504 155.111 mo
220.884 151.303 213.442 136.51 210.343 132.613 cv
209.791 131.902 209.202 131.194 208.598 130.496 cv
208.521 130.606 208.447 130.717 208.364 130.825 cv
208.127 131.135 207.887 131.441 207.648 131.749 cv
207.648 131.75 li
208.252 130.972 207.871 131.461 207.72 131.681 cv
207.656 131.761 li
214.071 140.967 221.123 153.916 218.512 162.102 cv
217.246 166.07 213.291 171.888 208.008 178.443 cv
208.415 178.8 201.175 196.044 201.422 208.642 cv
206.182 184.387 216.104 170.663 212.911 175.13 cv
212.38 175.839 214.151 173.89 214.594 173.093 cv
215.834 171.145 217.252 169.638 218.581 167.867 cv
220.086 165.83 221.061 163.792 221.504 161.401 cv
221.946 159.275 221.857 157.238 221.504 155.111 cv
cp
f
202.146 57.666 mo
199.144 58.375 200.245 61.1021 201.083 63.5581 cv
201.921 66.0146 203.248 67.3599 205.179 66.5635 cv
207.11 65.7666 207.996 63.1294 207.159 60.6724 cv
206.32 58.2158 204.151 57.1938 202.146 57.666 cv
cp
.968627 .760784 .521569 rgb
f
202.962 59.4009 mo
200.616 59.9536 200.847 60.7891 201.501 62.7095 cv
202.156 64.6294 203.646 65.5044 204.74 64.2007 cv
205.783 62.9595 207.047 62.9014 206.393 60.981 cv
205.738 59.061 204.529 59.0313 202.962 59.4009 cv
cp
.976471 .705882 .458824 rgb
f
236.865 54.0244 mo
234.589 54.0435 232.441 55.6392 232.041 58.377 cv
231.645 61.1143 233.154 63.604 235.421 63.9385 cv
237.682 64.272 238.847 62.5552 239.245 59.8174 cv
239.645 57.0791 240.273 53.9976 236.865 54.0244 cv
cp
.968627 .760784 .521569 rgb
f
236.338 56.0132 mo
234.559 56.0269 233.252 56.3623 232.94 58.502 cv
232.628 60.6421 234.016 60.3843 235.403 61.3984 cv
236.864 62.4644 238.302 61.1899 238.614 59.0498 cv
238.926 56.9097 239.005 55.9927 236.338 56.0132 cv
cp
.976471 .705882 .458824 rgb
f
235.562 63.9194 mo
235.696 63.8184 235.789 63.6611 235.779 63.4785 cv
235.764 63.1899 235.516 62.9678 235.227 62.9834 cv
234.938 62.9985 234.716 63.2456 234.731 63.5342 cv
234.74 63.7163 234.848 63.8633 234.992 63.9497 cv
234.398 65.3506 234.201 71.1592 234.342 73.8247 cv
234.504 76.8594 235.04 74.6694 235.842 74.6274 cv
236.645 74.5854 237.407 76.7061 237.247 73.6714 cv
237.105 71.0063 236.299 65.251 235.562 63.9194 cv
cp
0 0 0 rgb
f
217.423 32.8896 mo
201.458 34.604 199.019 44.8833 203.618 62.4888 cv
207.076 75.7227 216.253 82.8354 222.713 82.1416 cv
229.171 81.4482 236.474 72.541 237.199 58.8823 cv
238.136 41.2598 233.387 31.1748 217.423 32.8896 cv
cp
.988235 .788235 .564706 rgb
f
222.643 81.3071 mo
217.424 81.8672 210.449 77.1465 206.008 68.9072 cv
210.308 77.8867 217.422 82.5557 222.713 81.9873 cv
227.972 81.4224 233.966 75.4238 236.261 65.8389 cv
233.667 74.729 227.824 80.751 222.643 81.3071 cv
cp
.976471 .705882 .458824 rgb
f
223.031 71.8442 mo
222.5 71.9907 221.908 72.3979 221.256 72.3062 cv
220.795 72.2769 220.205 71.9253 219.771 72.144 cv
218.557 72.7095 217.304 72.9409 216.04 73.0908 cv
216.027 73.0933 li
217.285 73.7441 218.532 76.1821 222.012 75.771 cv
225.762 75.3286 226.317 72.2715 226.98 71.749 cv
226.84 71.7114 li
225.595 72.209 224.215 71.5444 223.031 71.8442 cv
cp
.968627 .239216 .25098 rgb
f
221.311 70.106 mo
217.687 70.5347 217.59 73.0513 215.729 72.9619 cv
215.831 72.9985 215.929 73.0425 216.027 73.0933 cv
216.04 73.0908 li
217.304 72.9409 218.557 72.7095 219.771 72.144 cv
220.205 71.9253 220.795 72.2769 221.256 72.3062 cv
221.908 72.3979 222.5 71.9907 223.031 71.8442 cv
224.215 71.5444 225.595 72.209 226.84 71.7114 cv
225.42 71.2822 224.821 69.6919 221.311 70.106 cv
cp
.898039 .172549 .172549 rgb
f
228.068 70.7563 mo
227.914 70.8159 227.671 70.9268 227.589 71.0713 cv
227.16 71.8159 225.904 71.834 225.131 71.7544 cv
224.814 71.7212 223.123 71.5635 221.325 71.7778 cv
219.718 71.9702 217.988 72.5283 217.69 72.6323 cv
216.959 72.8901 215.733 73.165 215.141 72.541 cv
215.026 72.4204 214.764 72.3682 214.6 72.3467 cv
214.523 72.3364 214.291 72.3218 214.406 72.4434 cv
214.742 72.7964 215.261 72.9614 215.743 73.0723 cv
216.269 73.1934 219.82 73.9355 221.737 73.71 cv
223.66 73.4829 226.646 71.9673 227.129 71.7285 cv
227.571 71.5078 228.036 71.2271 228.28 70.8057 cv
228.363 70.6597 228.141 70.728 228.068 70.7563 cv
cp
.6 .0627451 .0627451 rgb
f
221.793 73.8633 mo
220.215 74.106 218.836 74.0864 218.938 74.7119 cv
219.038 75.3379 220.4 75.6479 221.978 75.4053 cv
223.556 75.1631 224.752 74.4585 224.649 73.833 cv
224.548 73.207 223.371 73.6201 221.793 73.8633 cv
cp
.968627 .431373 .380392 rgb
f
221.395 70.2954 mo
220.204 70.4395 219.274 70.8569 219.319 71.229 cv
219.364 71.6006 220.265 71.3555 221.457 71.2114 cv
222.649 71.0679 223.681 71.0791 223.635 70.7075 cv
223.588 70.3359 222.585 70.1514 221.395 70.2954 cv
cp
.968627 .301961 .25098 rgb
f
220.86 70.6509 mo
220.542 70.688 220.3 70.8325 220.317 70.9731 cv
220.335 71.1143 220.604 71.1978 220.92 71.1602 cv
221.236 71.123 221.479 70.9785 221.462 70.8384 cv
221.445 70.6973 221.176 70.6143 220.86 70.6509 cv
cp
1 .768627 .611765 rgb
f
219.647 71.1274 mo
219.659 71.2275 219.813 71.291 219.99 71.27 cv
220.167 71.249 220.302 71.1519 220.29 71.0522 cv
220.278 70.9521 220.125 70.8882 219.947 70.9102 cv
219.77 70.9307 219.634 71.0283 219.647 71.1274 cv
cp
f
221.479 74.3037 mo
221.163 74.3408 220.919 74.4854 220.938 74.626 cv
220.954 74.7666 221.224 74.8501 221.541 74.813 cv
221.856 74.7759 222.099 74.6313 222.082 74.4907 cv
222.065 74.3506 221.796 74.2661 221.479 74.3037 cv
cp
f
220.267 74.7798 mo
220.279 74.8799 220.433 74.9434 220.61 74.9229 cv
220.788 74.9019 220.922 74.8042 220.91 74.7041 cv
220.898 74.605 220.744 74.5415 220.567 74.562 cv
220.39 74.583 220.254 74.6807 220.267 74.7798 cv
cp
f
225.48 72.0698 mo
221.535 71.7178 219.291 72.6196 217.945 73.1001 cv
222.413 74.1826 225.48 72.0698 225.48 72.0698 cv
cp
1 1 1 rgb
f
223.782 66.1416 mo
223.804 66.4346 223.505 66.7646 223.265 66.8916 cv
223.004 67.0283 222.73 67.0522 222.456 67.0112 cv
222.503 66.9224 222.549 66.8306 222.587 66.7334 cv
222.627 66.6304 222.626 66.5054 222.609 66.3979 cv
222.605 66.3682 222.56 66.2085 222.52 66.3101 cv
221.968 67.7036 220.327 67.7432 219.43 66.6611 cv
219.405 66.6299 219.31 67.0288 219.396 67.1333 cv
219.588 67.3384 li
219.281 67.438 218.944 67.4531 218.658 67.2827 cv
218.396 67.1279 218.167 66.8843 218.122 66.5732 cv
218.079 66.2651 217.992 66.7095 218.008 66.8208 cv
218.063 67.1978 218.273 67.5776 218.622 67.7559 cv
219.083 67.9897 219.542 67.8994 219.979 67.6563 cv
219.987 67.6504 li
220.35 67.874 220.772 67.9927 221.203 67.9209 cv
221.582 67.8584 221.898 67.6826 222.145 67.4292 cv
222.147 67.4316 li
222.661 67.585 223.275 67.5537 223.623 67.0859 cv
223.857 66.7695 223.938 66.3999 223.91 66.0112 cv
223.886 65.6724 223.77 65.958 223.782 66.1416 cv
cp
.756863 .478431 .227451 rgb
f
221.343 65.8643 mo
221.258 66.0229 221.137 66.1274 220.975 66.1548 cv
220.784 66.187 220.615 66.0972 220.491 65.9561 cv
219.886 65.2583 219.834 62.9839 219.834 62.3022 cv
219.833 62.1797 219.834 62.1089 219.834 62.1089 cv
219.834 62.1089 219.728 59.0313 219.933 58.1484 cv
220.067 57.9141 li
220.117 57.918 220.172 57.9907 220.231 58.1162 cv
220.619 58.9346 221.168 61.9648 221.168 61.9648 cv
221.168 61.9648 221.186 62.0342 221.21 62.1548 cv
221.355 62.8203 221.787 65.0537 221.343 65.8643 cv
cp
level3{
gsave
clp
[1 0 0 1 -7966 -7966 ]ct
<<
/ShadingType 7 
/BBox [8185.81 8023.91 8187.57 8032.17 ] 
/ColorSpace /0 /CSA get_res
/BitsPerFlag 8
/BitsPerCoordinate 16
/BitsPerComponent 8
/Decode [8023.91 8187.57 8023.91 8187.57 0 1 0 1 0 1 ]
/DataSource Adobe_AGM_Utils/rdcmntline get /ASCII85Decode filter
>>shfill grestore
}if
%!<8i'E;u+1OT0b<WrHZ>^Aj'!)?4pgg](@^V#QP`R/b25L]???F8u4HScAWrcN!5=mJjj.#61t9bQ$c5
%[en.,qoFiset;i\Nr]4>$$6-e$&APC$(1`p$)IS\#]BYL#=&4[#.OUT#-n2##-.]A#,D3W#:TVl#YP,o
%#Zq%F#\<rq#<2Zq#;>tqO8[Y%rnXOMaH$?$AdlER9aoJM0aut>&Idb#!";$ih?s)X]a;COj9`Et*so4P
%=:(f'GRE4*M@:C&<t$VZ+:L4/!XeW#576]QaH-5>O8dt6rRRS@s&]T'ruVQPro=Bsrk/WOrgO1Erd+lD
%rbMeTrg<u+rl55Urq$E(rsAuqs#::%rr<=Lrl,4nrhp&prn7THrRRV?h5LA7Yl<IW!<3W>jSnEQli+m4
%jo2+cf)B(d4oR/Crr*K9`;WU?`;Yo+_#D"R^&Hjqq>UF'4oX.D6iNSa7/h37!WKM7rqjctqoFiset;rt
%VuZh1$,->$$,HO;$,lfT$,lf4#`8N<#?1TS#0HiP#0$R)#/^@U#/U:c#>G,d#_Dtn#_W+0#_r<o#>b=m
%#>P3RW;Y;>rnXOQjKJX`V@;&TKac'%BFM0F:CNNeedMl`PR?=HE=',QPR5/(dL!kk&IHDT0adpZ@15<u
%-4Dd1mgLN@Z3p1$n-]'iaH-5>O8I"ZrRRS@rXfITrR)"jrKIW(rG`.QrCmQXrC@0*rC@.LrH8CprMKkF
%rRhCsrSRoZrUC/MrNccgrH8I,rH8EOrMp0)rRRV<aH-5>O8dt6!<6sAU]4m0ErTGM<rZJ1<rY2b>lPB?
%@fGNpBE%*!FoLb4OoFtW\,RQTZ2[E#WrG<gH2fo0>lPE@C&]"SLAT&QqoFith5C8.VuZhh#.OU!#*JoK
%#'Kq.#&!qJ#&O:"#&sQO#''WS#)rOq#,_B9#/U;,#/L5Y#/'rQ#+Y\,#(Z]9#)iJI#,_CUW;bVNroC9_
%jKJXa?3XI13X/jh&I)_Dk6>SufEL.2WW]g1Es$ghS-,G``<4*Yh#l"'-Ntmt?3XI13X/jh$3hRNg'$jD
%#mDXPaH->VVu>2=qoFfurnR\&rl"uYrgX(`rc80hr]C6KrVHTcrP\aQrQkNirS%<3rT=/Xr\OWJrfR>+
%rdY&]ra#Y'rXf.kr[@j&qoFiset;i\O8I"Z!<2-cBE#OJD#TJ"E;j>OEW/E2?N)5R9E#(s3;t$&3;uMP
%=oNIEI/^,K\,P"`hYsAUT)Na6?2dCu9E'5?Jc=K'roC9^h5C5&T)ek3"+:)?"'PUG"$$8`"$$8?![dl`
%!>GF.!!)u$!!3&0!"&VC!#PV2!:p+O!^cl(!]'`K![dlj!>PLn!<E)LTDmZEqoFiqaH$?#C^.`TBa1I6
%Ad44n@g6rP2$S+#"U9,JeHU?uecps/fES,Lf`oRt$O4TL4U/e&3X2M]3!P?@#6p%a#mR4*jKSXEYQ!@U
%rnXLQrRhCsrR_=LrRM1/rRD*urM0XJrH&7!rC@-SrC@-SrC7'nrC@.LrH8CprMKkFrMBdnrM9^QrH&7!
%rH/=>rnXOPh5C.kO8I"Z!<-I4EW.g"ErH4HFoBhpHMthenboTnc2F+6P5W,tAGtTl3W90a3W:?.9E%Ba
%?N(cF?iBBrVu>-KMuEVX9`F+VrnXLNet;rtVZ?]""$->A"$-=p"(_A""-WV=!a,DI!=8XR!%.Z#!"o0o
%!!)to!!)u8!>GFm![dlh![[fD!^6LH!=Sk3!>>CfVu>2=qoFiqaH$?"eHU?uU]uAJF9[O!8-Y1S8-Y1S
%4U#*h4TkW\<<MdiG6>YZRfeiPXp!#J`Wbo2SH_1SF9[O!?Nj@+L'8(dh5C.kO8I"ZrRRS@rL3nPrHA@Z
%rD`sirB18\rB(.NrC-eurGM[BrGhm:rHA6'rI4eorH\JMrJ1MWrFZ1QrCR-RrCI"lrEoX/rRRV<aH-5>
%O8I"Z~>
gsave
clp
gsave
/0 /CSA get_res setcolorspace
gsave
[1 0 0 -1 0 450 ]ct
[1.76221 0 0 8.25976 219.806 383.829 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 18 
/M[4 0 0 -18 0 18 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~qtp9jr;?Kmqu$Bir;Q]nr;QWlr;QWlqu6Qmqu6Tor;Q]pqu6Tlr;Q]mqu-Kkr;HWmqu-Kkqu$Ejr;6Ei
qtp<gqtp9f~>
<~aN2I&aj/33aO/DYakPRnbh^IcceupeaPPS%aPu%3cfEp<aQ2-tbh_*raOo4nbgkOqaO]"iaNDuUaiM`L
aN2KEaiVWF~>
<~O,oA%OHu44O-uE!OJSe:PGaS,Q`?./O/\hHO0,=XQ`m<bO0GIAPc1L@O.rD:PFe\=O.W/5O-,rrOH5Zh
O,oB`OH>Na~>
]
/SI {level3}
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
grestore
grestore
np
220.848 65.2676 mo
220.372 65.3188 220.011 65.5869 220.041 65.8662 cv
220.071 66.1445 220.455 66.0869 220.932 66.0356 cv
221.407 65.9844 221.797 65.959 221.767 65.6807 cv
221.736 65.4009 221.326 65.2163 220.848 65.2676 cv
cp
1 .882353 .713726 rgb
f
214.733 60.4824 mo
213.581 61.0957 211.916 61.3877 210.118 61.1968 cv
209.923 61.1763 209.732 61.1504 209.544 61.1201 cv
207.993 60.8667 206.671 60.2822 205.814 59.5352 cv
205.07 58.8872 204.673 58.1177 204.777 57.3354 cv
204.827 56.958 204.988 56.6079 205.243 56.2935 cv
205.517 55.9561 205.896 55.6587 206.358 55.4131 cv
207.387 54.8667 208.824 54.5747 210.396 54.6538 cv
210.587 54.6626 210.781 54.6787 210.975 54.6987 cv
212.771 54.8896 214.315 55.5229 215.278 56.3604 cv
215.664 56.6958 215.956 57.0645 216.133 57.4507 cv
216.3 57.8091 216.365 58.1831 216.316 58.561 cv
216.213 59.3433 215.627 60.0083 214.733 60.4824 cv
cp
level3{
gsave
clp
[1 0 0 1 -7966 -7966 ]ct
<<
/ShadingType 7 
/BBox [8170.73 8020.63 8182.36 8027.29 ] 
/ColorSpace /0 /CSA get_res
/BitsPerFlag 8
/BitsPerCoordinate 16
/BitsPerComponent 8
/Decode [8020.63 8182.36 8020.63 8182.36 0 1 0 1 0 1 ]
/DataSource Adobe_AGM_Utils/rdcmntline get /ASCII85Decode filter
>>shfill grestore
}if
%!<$U<62Z6>^&)7G)>YTc9_sqZWqt]\h>8,s#5jnq&H2\9#lc(Rli+6sDZ1[_iVbV??2O7#R/BtjgAS2\
%])0R0qoFih\U=:qNr]2(#OD?i#RL?s#S?kP#R:0*#;H%!##Y8Y"ciNu"i(&""nho]"ulS5#1`a8#AF*8
%#?LcY#=n^o#&sQi#*\r*O7Ki/l)SUsaH$>t,RR6?jpHV4LC/n3)[^*K6OA89A-eXtJd8[X":*l\S-Suh
%)[HZEiX"B:P6n8b1'tYgY6h*#g^(joD$]%raH-5>O6Wiao!s,Jq\oeFqc!eSqf`6Aqi:o@qTB%bq?$n,
%q)AOIq&T_bq"k:%ps031q3D9\qHF4+qMtk-qQ^;lq<8)>q8ERUo!s/4X)$ai?L>"<!;OkFlM15]#l,MG
%,Pa;&7egj)0))(D(A?;^rV!f+k4YGPc1Z_o[.comb4l;Kh"WT.q"Rbl').+as7^.1jmB<nj.]l<SQP0Z
%D#j8K$=ibQ$<m+P$;gCN$:FJY$!d.0#^#`[#EJJt#Fb?:#HIKL#IO28#b(HS$%MX?$$Z'.$#'"7#_D[]
%#a,#*O8I"ZlE"geX_e(3Jd8[V.gN*I`s8(+EX.WtLBa[LSHZh%\HLX[(BimoFp.C0ecbsF\cq6iTE`[7
%70^[&i!-O\qZY4;>6WaGX_m@)Cu:aai13sMs6BkJs8E1ms5X=fs.BL;rqHUPr_!@irL!c/rQYOTrSn&C
%rQbZ&re^mSs#pW&s&'#Ks#^G'reL]<rga3tqoFiqaH,etGO`1i!<(4Ih#67:48mG-@f;\saSb3'QM`H>
%C\rAZ7Ji)Io)#6dh#!-9Nr2i[Vu7;5_#5\c)uUEQ2>g;S&c?>Gqsh1Cn$RB%Ve,+nCB46m"ciJV"Pim7
%"7l>7"%E(&"!@@E!s&-j!p05D"/Yfh"G?M0"\/=j"^UuJ"a0\#"MOZS"4[/M"2"CI"J=qZCZ_O+i14!1
%U0[iq3!DeI:BZ=G5m*tZ9EO>NOoif#f)i;Q*Wi&0"9WE4m0#6=ecbsGU'2>-D?VZfK`l&`IKPZ*]`WZV
%\HGUdU0ccK=P]?Bi13sMp=9BFp3$T0p(mkoosk4Zp!EmVp$VuXp([Xcp2'kmp;I*#pDsC0pB1S5p?_u=
%p5T8'p+HOkp.#3bp8\:(i14!-S6+O6;Vd^<!;/)S6hO%X?M.S0H1c1_Pk;iuJ+O6VBCfC6:%M`u/+[K^
%#kMp?hXg^R#kXAh.eKhL7.dqo@Isp58G!8r./V)HlE"ggY]0K\Nr\ch$/Y8g#mg-1#V5LP#>Och#;boH
%#8Qc+#57S##KcM%#at55#u0tj$&%m+$+9?H#jCid#S-D4#O_.5#fQV]O6j)in@*]?aH$>oEX.j%L'FjS
%S-@+/[fkmdpB9+?2?_%kGm(VJ?NlP_=pAp:>mF*r%gQb>_Zt\`cN]s4gBG1\)[3,2'*a6WXDHda=5olX
%m'(F/o3DSqo3)?:o3VZ_o6CJJo"5+(ncK#_nPKFInMpbHnN$k!nPKManbNJ*nu;pNnt?7hntH;6n`g9f
%n`^6@m'(HgTNpZZBCNBU!:eSG:%6[=hs^@H=mnug_="Z8541]@Y3kug)",cUD=@N0[dd3!p@2f$amkZ&
%RIFqs6gnIheaEVG,k*)bJ,@<JqoFiqaH,i"Gl[A3#57RJ"s`Xu"\eG`"H2cB"F]b4"E<g3"D.$g"V0uo
%"jud`#*86[#.3m!#1i:%"pj^S"ZGi,"X*9p"mk`fH0;/>n@*]:^kDdWGQs5t9*N`363Rkf=9N4'\cc1(
%.0NH6VZ]KVOp'k5Y6BLEp]_T'A-PBgk6>\hZ3@])V$-_a'Emgk-3]n4^kM9eH2G[DqoFfuosY(ep!<g]
%p$Mo[p([XcojIoJoVqt2oC`6"o>LeZo8s.Io6CJJoJQilo_/L?oah67ofE7CoRI$#oM5Shhjdd(Qr;e1
%<T9ZV!:tI=\+>^ao^g$(-hI$5C%FUl@e,N\@.E7Y@e#uk#4Z@/g$qoBMt-rQRI[unW:JF?l155a)=gT+
%%e:M?iSpM8hO@O+Ug`GcB)qI!"H2e`"5348!s\;U!b1[Z!bCec!c%3'!d*n)!rq_+"2sY1"D.&q"E<k'
%"F]dJ"4H]'!rqaR!rVNq"3]l,BB5jsm^%$)[s7uB=9N4(D$.`FT`Y8_rW731AcdGLg]EK'A-/Fkqu\&.
%]*#2&VZ]KW.0NH7\cc1(cNClL!s8VmFTW'?4Ti.^[s@DJFSj.?qoFfus.BL;rqQ[Rr_!@jrL*i1rJUiN
%rIY2nrHeW:rZ_Mprl"uQs'c*3s*=eqs,I4WroXCnr]:52r[n;Prmh25qoFie[<M/NHMbdE!<6L2!WL%?
%^&B5YJ,O]r8,[K2)uXUTn,6bu_u9Q:!WJ)]7K4#'OT.!:[Jri$gA\G]Q2VR%<W3C/.fQ1FD>VD8n[No;
%]n-(%Nr]-I"3LK)".&j?")Id\"%E*1!u:]W!p'6'!j__P!oEk)!tY?W"%W<B"*=F""/#MI")Ifb"$QQ1
%!tG1["$Q+\GNPf7kc/@e\9\/RHNQe9e,p6Z-j&9&GQP2JH3/ZpI0*4AIf^Yg-j!0Ab6!CrA-0[ID$'2)
%Es!BZciW2(-N^IK.0=qqcN:HC\9dA=C$r9KoY#eUrt>KrrX&`'r6YRpqgSYfqgee7qged\qg8F(r4W4+
%rS%C(rj2bPrmh0Arq6G0rVclFr6>@?r5f!arU9ldqoFidZ?5`PJc!NL!<0>-,Q6?uJGd+^p\T==NVdr$
%?i+^A1Ab>X#lKAWI/S[!&cP6$]DcXKh>WN=!<'n==T#K+bl".8UA_(n1],7SoY#hQaH-5>Nr]'("%E((
%"!IFH!s&-m!p05W!jDE'!dONL!^c`!!b(rI!f-Yt!j_]I!p'6%!u:[L!q#gl!mCEO!g`]%!kRNlA`0+]
%ih0T@WbDJ1GQP2IaT@7o('7q?@0/dkB*&M;D?8>aF9/-4-NV0^ecG18If^YfI0*4AH3/ZoblUi?)ZhSe
%+p%K8dK1QTWbLIc?0J;%m]pp7q+h(Rpltp'pY,bVpEB[4pF?;YpG;q)pH/KNp[eLopoFNAq-a=kq-!iE
%q,@F!pm_DKpZ)C%pZqrJpnRspi14!+Qr;h2<oTcX!;U%)6MRV`,PUg3$MQX`p\.)W^\:D&M"ajL;YUV#
%Aba(BJGF9fUA8[-f(iq[%/@.0m.^GZdeEqGS+sPq[c3rchj[[.UgiPfBE7pZ!Zh-g!U]_2!Q=eU!M]C9
%!H%X^!BKt-!=/HU!A"$%!Eo;I!KHu-!PJ;\!UT[:!PA1Z!Kd.3!F>QX!K$6MFQf`<n[Ei:]n$1\Hi]6'
%g]:RS0``g#JcQ,PK`KWuK`InDK)fuh.KH"8a8jN_>lb6.D?2NiGQD1Jg&WVu1'%1I0EB8leH#I<]n,^_
%HMbdEqoFfuq/cY3pqZu]p^7+6pJ_/kpKIY<pL+'bpLaK4p`0@SpsK0%q18VPq0rE*q0E'YprEJ.p_!T\
%p_X#-ps&mUkc/=XUgic!Fn)qe!;V3I#Pc^IiqOMo`qO*GZhJ;:J+ms`9_W]1)>G`_/bn*$9DO2?F8:Li
%U\TTDeG.VqYP9=BP5$F*?hi=TI.=[lm^.-6aH-5>Nr\nu!ho>/!gr\!!g**j!f?Un!`8S?!Z1Pf!T<[2
%!U'1;!Uf\E!Vc=F!\a9u!bh;T!akYH!a#)J!Zq'h![c`j;Vd^<hO@O&RoTO`49>3Mj8n]BN</592$)Y/
%5QRkX8c`u+<<58VVu]6YrrGad;uonk9EBtD7010sm/aZhQ3"2_T)j31pAog%Ro\C8<TKrajeQ>cpJ_/k
%pAY.cp8A!Yp/M,Vp0Rh*p1XNTp2U/*p;$a(pD3h1pLaK4pL+'bpKIY<pBUd6p9=W,p:11TpCI>^jeQAH
%Ug`\tFRHMY!;C++ZhG79X7j@0U\8^.TD!U3C\ED]3VJC3#PQgN$hl"K&bgGK)>A.O9_WB(J+juaGP9,Y
%Dt_QY4SL'#6gh=(m^%$4aH-5>Nr\kg!f?SY!daL=!cR](!bq9/!]0H^!WM^9!Qt&`!R(.i!Rg[!!T<Z$
%!Z1PQ!`8Q+!^ZIe!]]hj!Wht=!X[\M;VmmCiLX60RoKI^2$)Y.K`TWodfIYa,6>sZ1]`m670-ih<rjrH
%!!+YDWrXsK<<58V8c`u+5QRkWOTCsDi;o59nH!%jT)iQ\RoSF=>3;_ojJ62aoC`6"o0EFenr<cZn`'[[
%nb3)AndGR'nfe+bo#CdTo5k#SoHOCZoFh9)oE,.No2#KAnt6%;o!8Aro3h[shO@O+Ug`D`A`94a!;%K:
%b4B]UaR[@PbjlqYeab^$V=IF`FRj,H7Ipcc2tO0Q0D&<H0(_R5@IuAWQ1Kb3Q1E]2Re$"MB_.Yn@c<n^
%k,2eWY]8g'AH;F(!Bp+V!AX6I!A*kE!A="Y!;lD7!6Okk!1<F1!0d*%!1*>!!2&t!!7LRJ!=/;-!;uL#
%!;Q4.!6+WL!6O;t@HOJ!n@!T0ZZH3@EWDa)cN':(/-(n+MZB.:S,d3oX8k6P\c<-2;#gXili7%ZMuX+V
%KE+%+HN7jSg&PXU3WNU]7K>.8jT%%'ZZP]FGl,RCqoFfuoN)&Go<&*Io*>@UnnA+nnq$lXnsf^Do!SP2
%o1]4aoBH=HoSW^:oQgMZoP"=&o>1M+o,[o:o/6U#o@Eudk,2eWY]9<JJFL!l!;)0LR.KSCSb#PUWUdIt
%]^jGMORh`<BCc?.6M$??..e_a(%f';$hUM#3:r^@BCl*&DY%B=Hh2Ra;"P>"5k)4,oXo_OaH-5>Nr\_1
%!b1[Z!bCec!c%3'!d*oJ!`&5>![dD2!WDNF!UK9(!T*Ak!S-`L!X8,g!]9FB!]fbO!^cCq!Z1B<!Y".c
%@ICIDn@!T(Ve#l!+p$6aI0&3ohZ<'49`b4^B`Z`QL&n=DV?)8<1')%XaoPH3B`UZn:]Y\/3<>uHPl\,Y
%q#S;$'`jNgY5s4:Ve,A+GkAY!m'(I0n,<B1mq)WMmb@l'mUQBlmXG:dm[aJbm_8fcmkb(kn%/W3n4`r^
%n1atkn.u.$mstOEme?j!mhGmon!sM;m^%$4aH-5>O79T&!:W\`rU7?"&+;=V,jrDK4RV).*:Et1rU209
%i:!'7]C6^>S+*9UJaeBpWpj^'eF2&kkjMIP!:P%2h=(+>_=4mXqoFiqaH,u+J,o.S!CcRK!9`q"!0$LS
%!(-7(!+#-i!.XNe!3,K>!93M0!AEr>!J0br!GCrF!E8Oh!;Q+I!28qc!57o>!>+V%EVmh<qoFij]RU"O
%V?)8;jT.%)/-+]"I/p8:!W^^=O9#LR-NQ<taoQAJF9/3+.08AqR/sqh)?H>s>ldajW<!7n1''9$i;n)n
%]R]n#O8I"ZqoFf~>
gsave
clp
gsave
/0 /CSA get_res setcolorspace
gsave
[1 0 0 -1 0 450 ]ct
[11.6396 0 0 6.6582 204.725 388.708 ]ct
snap_to_device
<<
/T 1
/W 25 
/H 14 
/M[25 0 0 -14 0 14 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~s82]jqtp9fnaQ#8mecnYqtp9fqtpEns82]jq>:']naGl3jQ5k"nbW.Tqtp9cqu?QjqtTdNk3(^]j5/\S
kNM3tp%J1Uq"sscq=F%=jPo+ShVR)EhV[8Pkj7s:qYU0eqt]^Il/h!bhqm5Gh;@,JioK7hnbN(Zqtp$T
m-<`niS`VNhr!AMiT'%`lg=09qtp6_o^1r,jPo.Vhr*GOiT'%^kj7a-oCr"Vp[mtEl/q'eio/tWio9%]
kNM:$nb2_Sqt^!XnEfH+l/h!hjQ5LckNV=%nalMPqtp9fq=+"Clg*d"lK[Tsl0I^'nb)YOqtp9fqtp9b
nFQ#4lK[^%lgF92nauSOq>:'dqtp9dqt9RNnF,f:o_%nNpA"CWq>:'ds82]jqtp3aq"=:SpA"=Rp@nF[
qtp9fs8W,rqtp9fqtp3dqtp9dq>:'dqtp9fs8N~>
<~s2`:&aN2HD\@/cN[)g>0aN2HDaN+>\s2`:&`Q6*5\@&WHUnkB+\&HG%a2c6;aT'?&aMb`uVl-,WTpqOI
W2cu'^;.V&_T9g>`OrOXUnOBLR[TV2R[]kDWj'1S`lQ6BaMbHiX/2S`S=5k5R@B_;TqnTl\AZJ0aN2'(
YcOarT:VOBS=H+@T;&0]Y-PIRaN2E:]X"Z<UnF<MS=H.AT;&-YWire>]>;>)_S!@eX/D_eTV&!OTV8-X
WN*/0\A,l$aMbp,\$<'<X/;YjUSO``W2m)0\@f]!aN2HD`4*CbY-4h+XKAM&X08e6\%fbtaN2HDaN2E<
[_&cHXf\b1YI(aG\@o_t`Q6-AaN2HAaM,9r[^EKT]tV7r^r+"+`Q6-As2`:&aN2<;_nWk%^Vmk$^qn%2
aN2HDs8W,?aN2HDaN2?AaN2H@`Q6-AaN2HDs8N~>
<~s,W5%O,o?_H?aUTFcVTEO,o?_O,j8?s,W5%N/s!LH?O@L@:FD)HAmo9NfK-UO8k9%O,8@/AS,+J?<($7
AnZ""Jq]#:Ll[UXMgoha@9m#9<)can<*!+0BlS][N/s$\O,A+#C1CUT=&i3u;cZt&?"%;cHA[cEO,nj;
E,9)l>?P!.='&L,>@(fQDKC#YO,o9QJ9,R?@9cu=='/R.>@(cLBlJ3@Iti]=LOaYqC1Ud[?!C]?>[:`J
B5)=.H\@-7O,A[@H#[Y<C1CX`?t*VVB5;C0H[gg2O,o?_MKs\mDJs3)Ci*m#C2\*5H@ps/O,o?_O,o<V
G^aXMCi+'/Dfp>LH@^g/MiWp[O,o?[O+Mh-H$4=[JV&N-KntJ>MiWp[s,W5%O,o0TM1^>8KSb;5KSGGF
NfT6^s8W+[O,o?_O,o3[O,o?ZMiWp[O,o?_s8N~>
]
/SI {level3}
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
grestore
grestore
np
211.271 57.644 mo
208.37 57.7529 206.089 59.7456 206.089 59.7456 cv
206.089 59.7456 208.512 61.561 211.414 61.4517 cv
212.963 61.3945 214.145 60.79 215.142 60.2915 cv
216.012 59.8574 216.692 59.4321 216.465 59.2495 cv
215.979 58.8574 214.172 57.5356 211.271 57.644 cv
cp
1 1 1 rgb
f
211.246 56.5083 mo
209.821 56.5615 208.708 57.7109 208.757 59.0767 cv
208.809 60.4419 210.006 61.5049 211.431 61.4512 cv
212.857 61.3979 213.971 60.2485 213.92 58.8833 cv
213.869 57.5181 212.671 56.4546 211.246 56.5083 cv
cp
.137255 .513726 .54902 rgb
f
211.246 56.5083 mo
209.821 56.5615 208.708 57.7109 208.757 59.0767 cv
208.768 59.334 208.817 59.5801 208.903 59.8101 cv
210.468 59.1816 212.239 58.9194 213.902 59.269 cv
213.918 59.1431 213.926 59.0142 213.92 58.8833 cv
213.869 57.5181 212.671 56.4546 211.246 56.5083 cv
cp
.0627451 .356863 .368627 rgb
f
211.286 57.5718 mo
210.475 57.6021 209.84 58.2568 209.868 59.0347 cv
209.897 59.813 210.58 60.4189 211.392 60.3882 cv
212.204 60.3584 212.838 59.7021 212.81 58.9248 cv
212.78 58.1475 212.099 57.541 211.286 57.5718 cv
cp
0 0 0 rgb
f
210.592 59.0083 mo
210.392 59.0151 210.236 59.1763 210.243 59.3677 cv
210.25 59.5601 210.418 59.708 210.619 59.7017 cv
210.818 59.6938 210.975 59.5322 210.967 59.3413 cv
210.959 59.1494 210.793 59.0005 210.592 59.0083 cv
cp
1 1 1 rgb
f
212.158 56.2437 mo
207.925 55.4741 206.089 59.7456 206.089 59.7456 cv
206.089 59.7456 210.593 56.2002 216.009 58.9307 cv
215.901 58.623 214.772 56.7188 212.158 56.2437 cv
cp
.988235 .788235 .564706 rgb
f
209.924 56.0635 mo
209.158 56.1738 208.404 56.4194 207.768 56.8354 cv
207.043 57.3091 206.53 57.9346 206.066 58.624 cv
206.009 58.7114 206.55 58.9888 206.623 58.8823 cv
207.054 58.2397 207.534 57.6108 208.212 57.1675 cv
208.754 56.814 209.367 56.5552 210.015 56.4233 cv
211.387 56.1431 212.865 56.3276 214.056 57.02 cv
214.141 57.0698 214.315 57.1616 214.424 57.1299 cv
214.52 57.1016 214.295 56.9644 214.278 56.9546 cv
213.002 56.2134 211.431 55.8472 209.924 56.0635 cv
cp
.756863 .478431 .227451 rgb
f
211.256 57.2241 mo
209.344 57.2964 205.856 57.9141 204.206 57.8369 cv
205.067 59.4834 207.551 60.8228 208.829 61.0845 cv
207.187 60.4082 206.568 59.748 206.568 59.748 cv
206.568 59.748 208.945 58.1655 211.354 58.0752 cv
214.255 57.9668 216.596 59.3511 216.596 59.3511 cv
216.596 59.3511 214.156 57.1162 211.256 57.2241 cv
cp
0 0 0 rgb
f
226.339 58.9272 mo
227.611 59.2178 229.296 59.0649 230.981 58.4121 cv
231.165 58.3408 231.342 58.2661 231.516 58.1875 cv
232.945 57.5381 234.068 56.6294 234.701 55.6846 cv
235.251 54.8652 235.433 54.0181 235.128 53.29 cv
234.982 52.9385 234.734 52.6436 234.407 52.4063 cv
234.056 52.1509 233.61 51.9634 233.1 51.8477 cv
231.964 51.5879 230.502 51.6816 229.003 52.1675 cv
228.82 52.2271 228.639 52.292 228.457 52.3623 cv
226.772 53.0156 225.446 54.0298 224.737 55.0903 cv
224.452 55.5142 224.266 55.9463 224.195 56.3643 cv
224.13 56.7549 224.164 57.1333 224.31 57.4849 cv
224.613 58.2129 225.353 58.7026 226.339 58.9272 cv
cp
level3{
gsave
clp
[1 0 0 1 -7966 -7966 ]ct
<<
/ShadingType 7 
/BBox [8190.13 8017.7 8201.31 8025.11 ] 
/ColorSpace /0 /CSA get_res
/BitsPerFlag 8
/BitsPerCoordinate 16
/BitsPerComponent 8
/Decode [8017.7 8201.31 8017.7 8201.31 0 1 0 1 0 1 ]
/DataSource Adobe_AGM_Utils/rdcmntline get /ASCII85Decode filter
>>shfill grestore
}if
%!:tRF'D,W=8+gL%;tbbL2>-qT`V#,q..o"pJ+Me.i:=2\/+L(T<UqmOX7FI@lgq:e+8!eb#P:atI.JNg
%YkuM&qoFih\U=:qNr\^Z$!$Q&#qPW0#iPA)#_2Ke#M/Nj#9i^s#(c@9#6jY3#DqrK#S?L^#a4^>#ljH`
%#c@3B#Xn8:#F=oP#RgONO7Ki/l)SUsaH$>pJI4:/RgKu,a9g2goa+juSd;+e9aBnWrs((K_$?t5D$V6V
%.0tFrM[:g)rX$R</d[1*EX<TX(^ORDaU$GoaH-5>O6Wiao!s,JodL/roZ%3foQCH_oJHi(o[X42om6l?
%p*'[Op1jkNp:U\]pD4(mp2L?Voum\;okXl+obn%totgp7p([gEo!s/4X)$ai?L>"<!;@97i:ahh/,!`_
%DtY@Y](X2KGP?(\2#%mjnG$PuYP>@,DYX5:/,3KWCA5@GVtXa,me7A!1\\QdoCrb!YjJ]9j.]l<SQP0Z
%D#jD)$![6b#t"K3#q,SV#n-TE#YY">#E/E7#0cn1#3u"S#7gP/#:oUE#O(uT#c%4R#`AI0#\Wtn#H7H]
%#L3.eO8I"ZlE"geX_e(5rs((M7gBP"Qj2jOh?M4"QNdlo:BaJg!X+V[[03`/B*?TV(^0@'AHf:4Ym,+@
%r<?'n:'N6E!sNQ:ZiuNUX_m@)Cu:aai13sMn>HU(n8no!n7W%8n:(XmnGWV9nV%.hndu%Knd#F(ng=XZ
%nm)Jjn\k`jnM:EpnG`_hnE1"YnT4t:nW3t_qoFiqaH,etGO`4j!:jD#8+J#3_t"';#4`?0G4M1-,P*Mj
%eFUKZMY#I(,4kU6n+8IAJb,'0_t*L+"nKA3II`m3[IZ?]C%GI32Y">)n$RB%Ve,+nCB3ua#(cCA"n2'8
%"X<QS"H)hO"@2VG"8_\D"1\$9"BkEV"W@"X"hOAR"oS#D#!_aJ"fM!:"P`Sf"ISjE"^pSqCZ_O+i14!1
%U0[in+pGRNi<:+l]*):0KEJaX*!:BX[KAPa:BLOiPQR]Tec\S>(^0@&E<S2ma9?e]L'6!!>6Gl<qZG[K
%/d.0oU0ccK=P]?Bi13sMp_X/'ph'`VppC7/q#U\\pqR"!pj*$9pacKKpYu=qpR)*BpJ1kipQPcTpXTI=
%pa$%lpi?QIpb;k_pYH"-i14!-S6+O6;Vd^<!;a&/$i4WE:&6.@O87]<dJ@bcQhpjh=o4Ef)Z.JXfDFt@
%QM_a/:&D!tOo$p?dJE,6'Deg9<Vnf^(]/%Sf)*OLlE"ggY]0K\Nr](u#Yk3a#F>8+#1ra:"rdCd"krm^
%"e#<P"]tY+"q^`C#0d$I#B]n<#Jg7t#RUEI#?Lb!#+,8@#$(Th#86pTO6j)in@*]?aH$>si!.U)RKaH$
%;[$4t#6^LkVZ^E(7g(18j9+fH/HhaDA-H68PQi''!sVp)D[)R)0a68+o*$*0Op'Y<bQXL$XDHda=5oiW
%m'(F/qih:'qd]k8q^hrDqW%bGqgejVr#5`dr3$2or9sgOr?2<8rB1<cr3Z]rr$DU$qtpU<qoAnLr*KRO
%r/q3=m'(HgT3UQYBCNBU!<#t(FT*'\h#=Yb2ZG',NW4b:qu=_?BE-uof)Io::]=&keGVN6=8c;,&H-)C
%bl1?A5Q;K&V#NR\q#4M%M#58SqoFiqaH,i"Gl[e+"]tXG"J5P\"6]Tc"%iGY!u1^\!oj2Y!jqrd"$cdk
%"6]Zo"I&gS"P!Ch"W%'?"CM+Y"0DJ1"*=H#"<m9DH0;/>n@*]:^kDdf\HJ,qZNKCiN<;EE<!'H+f)g^,
%;$(#&]`L.mo)cK&rW>Uhirdm4OTZ?t.g/cM0*A?V%g*7?LB??4T*'91^kM9eH2G[DqoFfuq$.%kpqm4+
%pj3*=pacKKpq[#Uq-!hfq==Y&qFC[gqP+-eqW%bGqF:Z8q54@'q-sN<q%3]Hq5aYVq?-nPhjdd(Qr;e1
%<T9WU!;baYmJ<R[:&7B^X82>g(&Eghk5->']DJr9Q2DC!&H$SN\,<E38c0M0IJ\Qt[/3,k)#E7oFo-Xi
%5l9@=k2N"<hO@O+Ug`GcB)qk5"%iE3!k8(C!YG79!L<RP!H7na!DiYo!B'ho!LE^*!\jUQ!jqpQ!oj/G
%!u1\?!f-]T!TEu@!Or#p!aFieBB5jsm^%$)[s7uQ<!'H+*<Iqn_uZ2&<<4uUfDurj;#pq$]E%j/0`b,N
%M#k0e]`L.m;$(#%f)g^+U&kPu9*'/6`W9?E*<G$d[s@DJFSj.?qoFfun:(XmnGWV:nV%.hndktKne21'
%ndksRndPa(nV[QQnIGf/n<jIkn;[]1n:_'NnHB*pnVRLGnV[R"nHoHOqoFie[<M/NHMbdE!:ZB\&+L/6
%ZLNhV=Rln)!qHX#g[YIMZgn/#N:Dl1jRFDt5OcPoT('&i`:0T,lL>PlN:Df01%C/*$Lo#<B)BZ1n[No;
%]n-(%Nr\_^"aBO-"XEUi"P*+Z"H2l^"C^o("?5qF":ar;"BtAV"K_/'"Tn6+"Y'!U"]4cZ"T7j>"K_2;
%"G?92"OunJGNPf7kc/@e\9\/G%0Zh(NWcHT'a._3TEG_qP69k:K`emWGQX&uoE4%BFp'Ym!X+JQ"9c(%
%#mB#RL'32$$3W*SrWEMtI0<gF\9dA=C$r9KoY#eUnA>F$nU^o&no"Xbo6:A!o5"MAo3_Yao2u/1nmDR1
%nVmZhnG<A>nE'mOnC%PcnU^nUnn/(2nmMXYnV%+2qoFidZ?5`PJc!NL!:]jh/+JT%DXq0;\arr+(%Y?*
%m.4$T`:I"2SFUb(6h.nnr:*#T\a_$Mhsh6]"n@l]8Fg-jOn*&cC@S,',5]HBoY#hQaH-5>Nr\de"H2nO
%"@2VE"8hbC"1e)F",un\"(1^r"#BM\"*aAf"2FH#":at)"?5q_"C^po";URa"4$P_"/>EL"7#$HA`0+]
%ih0T@WbDJ)TEG_r.g*QY]*!9M:'39E49Gf\.K\>s)$7#6L][8@r<#=VGQX'!K`emWP69k;*!;JuWWPod
%R0+T($j18.WbLIc?0J;%m]pp7on!:Vp)4$Wp9Xo^pIt_hpG`6%pETg7pCICKp3-SAp#,u?ohGTEoj@l/
%ol:.np'1[kp7DEpp59".p%/>*i14!+Qr;h2<oTcX!;0(h1A0T-me1i+YP/S0FnY_78+u0K)YV__me/jH
%..sP@C%W>FYOs@Hg@[Q1#5-7C_=h@?JbDqB<;!j)Q/\HBhj[[.UgiPfBE7XK"-E-Q"$lL7!ql4(!jD8&
%!e^.?!a,*[!\X+N!d=1d!lOV4!u:E8"$Z<m")%5n!uCNR!m:.L!h])B!po?\FQf`<n[Ei:]n$1T=T]E1
%ecNb]>lo3Al2iU1gB%NMcN2bl`W<@:636oR`WA^&<W\f_:]eT,;Zc=WblX@+:]a>_7fjn+`WC/P]n,^_
%HMbdEqoFfuobdh7or/",p-/U,p=994p;6pJp9F^bp7MG%p'Lhsol^B!o]cK1o_8Jio`tVOop5_Cp+-7B
%p)=%ZonEM\kc/=XUgic!Fn)qe!;,OX0(jAgkOo5`V=pP_C\Eei5k][.(A;\Im.K'5-M:"4B_9:FZ1Q?C
%g@X,$"SH@-]_2($HM-M';"[okP4?#-m^.-6aH-5>Nr\oK!rr"]!os%7!lt'e!j255!e9tE!`A^W![[T7
%!^??]!a57/!d45_!i#EK!n$ap!jq^F!h&ek!c.OJ!f#Nu;Vd^<hO@O&RoTO`&-@"K=TVb#T`RFPl2i:+
%e,f@=^&cIPW<&^e@fa.7*!+O^ecG44klMdsquTC_6inq6MujUcG6-h"0*2+1Ro\C8<TKrajeQ>cp=994
%pDa4_pL=67pSe1epQP]$pOE9;pM9jRpF-,%p>Z0Np7MG%p9F^bp;6pJpBUetpJ1gLpH/Icp@JB5jeQAH
%Ug`\tFRHMY!;<&dC\Hch;>2L?2tq+h+no(=p\.)VcM'*pVY9Q\]CrK0e+R_\m.Po0(A<di5k`S+-heAW
%%JKu*jS$@hr9gq7m^%$4aH-5>Nr\r+!j276!dFHD!^ukU!YtOc!UBKs!PnN/!LWZq!Q"PZ!V#jK![[U@
%!`A_.!e:!G!_N2U!Z1Y_!UTTG!Z^$`;VmmCiLX60RoKI_l2i:,I0&j5&coiEVZE1\N<*tnEWJZ*<rjE<
%a8na)2Z[mlW<&^e^&cIPe,f@>AHBdFq>lrXhuR]i:'$g?RoSF=>3;_ojJ62aq==Y&qMPC:q]Z'Qqm6Bh
%qj@J+qg8E?qd':RqTo78qE+drq547\q8!*Iq:br8qJlVMqZm4fqWn6$qH!]_hO@O+Ug`D`A`94a!;WMn
%R//oGDYh]\9)Doq/,MR4#l>_EjSJrX_YSEUgA0n3qY=1n+8KpX7er#EDu(UX8,BOm,l3c+s7uj!+Q8nq
%k,2eWY]8g'AH;J(!MT9I!H@hT!Ccfc!?_,#!;Q@6!7CTK!3GsF!6t91!;-#%!?q2f!DE0O!Hn/[!Clje
%!?Cm#!;-$m!?L6s@HOJ!n@!T0ZZH3AC]P^RoDnOYIfRah#lq(%mf8+;f)T:T^]6Rn4oe^Z\,^mM1B=<H
%70(X-=9/*ihZ1jpBE4n(;?24@b5e=*ZZP]FGl,RCqoFfuq,[S=q<%bSqK;kmqZ-]6qV_FHqS3)[qO[ap
%qATESq2t`9q$@&&q'#gdq)n`Qq9&cfqH*a+qDeP=q5s_$k,2eWY]9<JJFL!l!;Qp$XSJ"ZMu"@mEVc:-
%?i#6P5l+gf,PjV)$2MI='DXrp,l#.T55<_0@efBlLA?#nBDMK+:\ilJ0_noQ7I[a1oXo_OaH-5>Nr]'a
%!L<RP!H7na!DiYo!B'g7!?1nQ!<2oi!9*j!!;-0U!=ep4!A"%p!DiT\!H\/g!Dr^%!AaS=!>GA>!A<H/
%@ICIDn@!T(Ve#l*?3)SRm/[[oFo_14p&O(LeH!SdZ2gj$NW>(:&HJ0pMZBaR!<C"6+9:L"5QM/fblI)-
%<WL\J1]Xr\XT6K*Ve,A+GkAY!m'(I0rD`kUrR_,ir_W\$rk&7.rgWuMrd+Xkr`B05rU'[&rHA7fr:U-L
%r>,J5rAO`qrON"3r\=KCrXf.`rL!ZMm^%$4aH-5>O79T&!;uNjiVds#ci*83_Z!X;]`'_fW;[;-QMp"I
%L&HN%J,K`TK)CW/NVp'^W;P0G`Via9[Je8KX8SmqPl3<:S+*k2qoFiqaH,u+J,oHI!5eTK!.F]m!'L*B
%!"&M6!!)mP!!)nm!!`>q!$qJ3!*/rW!0-mg!13S@!3,id!,261!%[qs!$hBa!*\`nEVmh<qoFij]RU"[
%NW>(:7K?Hcp])T:V#U_t(B=sCKE*%jkl<R=6i]gWR/gdrkQ$>8J,k)t$NPeV^]770DZD-^hZ,D01B:GI
%]R]n#O8I"ZqoFf~>
gsave
clp
gsave
/0 /CSA get_res setcolorspace
gsave
[1 0 0 -1 0 450 ]ct
[11.1807 0 0 7.40723 224.13 390.893 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 16 
/M[24 0 0 -16 0 16 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~s8W,rqtp9fqtp9`nGE+Np@7eLqtp9js8Vunqtp9fqsNnFnF,f3n+#oAqtp9fs7lKgqtp9fq!R5,k2GC^
jQPpto_JC]qY9sbqtopSleg^Yhqm5KjQ5^pnb)eVqY9j\o_7Y7j5AbLhV[5Lj6#UmnFcYTqY9j\md/ul
i83;GhV[8Nj5oIjnFQDOqYL$ZkiCa]i8<DKhr!DOjlu+#oCi"Wqtp0VkN:gcio/kSi8N\Vjm):'oC`"X
qtfdJl0%0ij5K"Wjl>Lfm-F-7qYU0eqtBOGm-3]pjQ,FdkiV'om-jTCqtp9fq"=1GmHa$$ki_0plK[[$
nFH8LqYL*dqtK[Rn+#f3md9?+m-jB3o(r7\qtp9fqt^$Zp%7bBnF#r<oC;GGqtp9fqtp9jqtp0`p[n(K
p\+:Qp%J.Wqtp9fqtpEnqtp9eq>'g[p\4FZqtp9fqtp9fs8W-!s82]jqtp9fqYU0eqtp9fqtp9js8W-!
~>
<~s8W,?aN2HDaN2H:[`HOr^UUqmaN2I&s8U0]aN2HDaKr4e[^EKH[CEZ]aN2HDs22q!aN2HD_mH5=VOjQY
UoLT(]Z%t5`l#m=aN1j%YFD2SS!oh=USY0!\%]r)`l#^3]tphNU7I[=R@B_=U8P)s\%fr(`l#^3ZEU'o
S=5k6R@Be?U8=fm\%KT!`l>s/Whc;ZSXc.=S=H1CV5pc.]YMJ,aN)0(WMcJcTUqaGSY)UNV6$u3]>)G.
aMtWlXJr%mU7\*OV4sigYHG:M`lQ6BaM50fYcFb"UnjfcWi)i!YdM0aaN2HD_nN[hZEC:0Wi;u"Xf\\/
[^j,na2c9BaMGI$[CEKFZa$[:YI1^G]#Vn5aN2HDaMl'1^V.(`[^3ZU]=>Mha2l?CaN2I&aN2<;_7dIm
_8!^u^;.S+aN2HDaN4D]aN2HB`5TX2_84"0aN2HDaN2HDs8W-!s2`:&aN2HDa2l?CaN2HDaN2I&s8W-!
~>
<~s8W+[O,o?_O,o?SG`Ro.KR86(O,oA%s8S.@O,o?_O*,PsG]n4LGC+RhO,o?_s+l_sO,o?_Lim->A6NDM
@;0V%J;]JLN/3OUO,nU8DcU+C<`E('?t4+qH@h3=N/3:GJVIuS?W^3(<*!()?=dnkH%V':N/3:GFE(Yi
=B/9u<*!.,?Xm\fH%1U1N/WXCBjk:M=BAL(='&R0@qon,It`c@O,f$<B4YFX?!:E6=Bf'=@r-74IY3]B
O,S:&CM.-e?<^]?@pW\]E,KlTNK9-]O+_atE,0)r@:<VYBk:ppE-HklO,o?_M1^.uF)Pi/BkM*rD/=$.
G^P+(NK'![O+r(5GC":KF`MA<E-?ALI>s;KO,o?_O,JjGK7J2jG]eO]IsQTuNfT6^O,oA%O,o-RL4Oi'
L4k/1K8#&@O,o?_O,s>@O,o?\MMm:GL51PFO,o?_O,o?_s8W-!s,W5%O,o?_NfT6^O,o?_O,oA%s8W-!
~>
]
/SI {level3}
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
grestore
grestore
np
228.941 55.2832 mo
226.113 55.9355 224.713 57.6836 224.347 58.188 cv
224.176 58.4233 224.944 58.6572 225.896 58.8491 cv
226.988 59.0693 228.285 59.3447 229.798 58.9966 cv
232.627 58.3442 234.491 55.959 234.491 55.959 cv
234.491 55.959 231.77 54.6309 228.941 55.2832 cv
cp
1 1 1 rgb
f
228.668 54.1797 mo
227.278 54.501 226.399 55.8389 226.708 57.1704 cv
227.015 58.5015 228.39 59.3208 229.779 59.0005 cv
231.171 58.6802 232.048 57.3413 231.74 56.0098 cv
231.434 54.6787 230.059 53.8594 228.668 54.1797 cv
cp
.137255 .513726 .54902 rgb
f
228.668 54.1797 mo
227.278 54.501 226.399 55.8389 226.708 57.1704 cv
226.736 57.2979 226.775 57.4214 226.825 57.5391 cv
228.338 56.7671 230.118 56.5566 231.793 56.7559 cv
231.815 56.5112 231.799 56.2607 231.74 56.0098 cv
231.434 54.6787 230.059 53.8594 228.668 54.1797 cv
cp
.0627451 .356863 .368627 rgb
f
228.907 55.2173 mo
228.115 55.3994 227.614 56.1626 227.79 56.9214 cv
227.965 57.6797 228.748 58.146 229.541 57.9644 cv
230.332 57.7808 230.834 57.0181 230.658 56.2593 cv
230.483 55.502 229.7 55.0342 228.907 55.2173 cv
cp
0 0 0 rgb
f
229.951 56.4229 mo
229.758 56.4673 229.633 56.6553 229.678 56.8418 cv
229.72 57.0283 229.913 57.1431 230.108 57.0986 cv
230.303 57.0537 230.426 56.8657 230.383 56.6792 cv
230.34 56.4927 230.147 56.3779 229.951 56.4229 cv
cp
1 1 1 rgb
f
227.719 54.1631 mo
225.321 55.3037 224.727 57.4365 224.703 57.7617 cv
229.219 53.7129 234.491 55.959 234.491 55.959 cv
234.491 55.959 231.605 52.3145 227.719 54.1631 cv
cp
.988235 .788235 .564706 rgb
f
229.829 53.4067 mo
228.319 53.5898 226.897 54.354 225.859 55.4019 cv
225.846 55.4155 225.663 55.6069 225.763 55.6094 cv
225.876 55.6118 226.021 55.4771 226.09 55.4063 cv
227.058 54.4277 228.437 53.8643 229.836 53.7769 cv
230.495 53.7349 231.155 53.8237 231.769 54.0249 cv
232.54 54.2759 233.166 54.7573 233.753 55.2646 cv
233.849 55.3501 234.299 54.9395 234.221 54.8716 cv
233.594 54.3262 232.935 53.856 232.112 53.5884 cv
231.388 53.3521 230.597 53.3125 229.829 53.4067 cv
cp
.756863 .478431 .227451 rgb
f
224.246 58.3213 mo
224.246 58.3213 226.146 56.3735 228.974 55.7207 cv
231.322 55.1802 234.028 56.0869 234.028 56.0869 cv
234.028 56.0869 233.605 56.8848 232.197 57.9668 cv
233.361 57.3804 235.409 55.4399 235.813 53.625 cv
234.238 54.1304 230.71 54.4443 228.847 54.8735 cv
226.018 55.5264 224.246 58.3213 224.246 58.3213 cv
cp
0 0 0 rgb
f
213.432 69.9858 mo
212.28 70.6143 210.654 70.8354 208.949 70.4844 cv
208.697 70.4326 208.453 70.3535 208.219 70.25 cv
207.222 69.8101 206.396 68.9395 205.786 67.937 cv
205.102 66.8105 204.69 65.5186 204.615 64.4819 cv
204.588 64.1221 204.603 63.7925 204.661 63.5117 cv
204.768 62.9932 205.005 62.6514 205.354 62.4512 cv
206.046 62.0522 207.171 62.2109 208.56 62.6514 cv
209.139 62.834 209.763 63.0674 210.421 63.3286 cv
211.982 63.9478 213.363 64.7158 214.209 65.6157 cv
214.773 66.2173 215.1 66.8765 215.084 67.5913 cv
215.081 67.7275 215.065 67.8667 215.035 68.0068 cv
214.864 68.8433 214.277 69.5254 213.432 69.9858 cv
cp
level3{
gsave
clp
[1 0 0 1 -7966 -7966 ]ct
<<
/ShadingType 7 
/BBox [8170.59 8028.19 8181.09 8036.69 ] 
/ColorSpace /0 /CSA get_res
/BitsPerFlag 8
/BitsPerCoordinate 16
/BitsPerComponent 8
/Decode [8028.19 8181.09 8028.19 8181.09 0 1 0 1 0 1 ]
/DataSource Adobe_AGM_Utils/rdcmntline get /ASCII85Decode filter
>>shfill grestore
}if
%!<"ne%/`F$P5?(*meP6?'`(-*@/>`hIJUP`O8M<P[/IKB]Dh^9T`0]T0E(;IWVlK"0`.p\@f-B<PPo5)
%J,@<JqoFiq[Y4P!Nr]1W$_[I.$bQ='$afcB$]k/M$D@8"$)[S=#fHSP#oikF$#9M($,$;U$?,rb$PNFD
%$MOCH$J#'F$0M4B$6B#bO8HA=ql,#@aH$>sd1-lcM@M`B,RuF![gh?ijp^&=!XmEL'ahkQS-pY=1CIpn
%]*j\rM@=q064I>tfaV9^;[k/LHjhG!%h*.KaH-5>O8Go(qmM.XqR[,rq(iCmpRDU;p([qPp*^6Tp+coK
%p,NA>pXf`Wq0NB^q\ogYqZR;'qWeK]q,du>pU^bVpX'9dq/$FLqmM1TWI4T3FSi%c!;3f1iq5qRbOjd'
%Wq:`LIIrj7DY0V1>kFg!9(a#.G4h@4V=kW2_tF->dIlW1h">t%`q9-:Re7*tM=lr<\,47-qoFiqW-nKA
%HiWjT$H)P,$DmD4$?l';$;0rh#rhLR#UK&@#86\\#=.se#AWrm#E\X7#c%)A$+9H)$'Os,$"W]Y#Z:8p
%#^lNKI/BjiqjDO&RWJQ0kR"p%oa-0Kq[#[jr<Wi1?O35#]a-^s*!b'l)@.A\+p`Ml)[O@Z]*TGU<s`X@
%A-jmf?3o0\]Eio_`<b/oaH-5>O8Gl'ql+uDq\ogYq]Z;lq\f_\q]#jlq0E9cpXocXp,rVBp,iQAp,WF?
%p,NA>pXf`Wq0NB^q1&_jq0<4[pX]XVpXoeXql,#@W-nK1F8MDJ!;8DXOS,j`C@s+_5kLu['(i+,^@\B/
%C%SG1(%j6b61q\kCA'dpOnLmAk4Uh@48#ob(%j-_lh)n8Q1_Nh^AF@@qjDO&R</7nErbi]%=Rj^%8QMs
%%28>,%+"N=$omiJ$_6fM$NBY&$U+,2$[)*3$`3K]$q'ZH%,ph&%'oK5%!hHQ$f(A&$l&T[O8I"ZqmM1T
%Z\&8MS-u1c.1::iZ3rhe3stuY0a_=[,72-V'F>iPRL*9l+UOM-V?tE;U^Ci.U'h4u.LObuXU:ZkU^@"l
%-42[.Z\/.`K_q]qqkSN<o1TS=o1]Ueo.^S[o+VKPnrF(7nd>_onW!lWn\,<onb`aCnhpm>nr=,Ao'-XA
%o%OO_o!8ZHnhpg1nnAIRqoFiqW-nKHJc!NL!;*,pb4Hh`Qh-XP?1Sa:*qKRAIe*7=h=Bt=5P':.IIn*V
%\Fc[(me!C_NV'+T/+aeep[aIP]^pg_*:ssO=8Se>ql"o>T6C+$F9(s2#O_3r#IsAR#CZ12#=%e?#,1VE
%"pXYU"`X'S"fCo$"l8gO"r6d/#.!m!#>k%$#9!,U#2\rk#!hef#($09FSh\RqjV^)R<&B"'F>iONsO\7
%$OE<nNX/bWFpGVK@L!nC;?hgEeHWq^?O$Z'mKYuIp]oXH"pf\KI0`(-p':Qdis/l\C^6U0W-nKHJbuBn
%qk&$3o'Q`Inm;V'n^Ri]nPTREnO!KInMpbWnM^U$n\#)2nk0-Jo%sUio%jQTo&L"Knl#a(n](h^n\,0i
%nk0/1qk&'/W-nK<HMa1R!:i#UkjaH:4n.kHFms/QT't><XRBX(WUC?%X7*>!3Ui4;c1-f"=Rj*3Pk"YY
%e+"Rg3q->[KCAL>>k$&G!rL'"qoFiqaH-5&JH55##[$U/#SQWq#KuTh#D2FT#4CsP#$^QT"jla;"pseF
%#"J,\#))MU#9<8W#J0Eu#BoTa#;Yd[#+=u=#2B$ZJc!*9qmM1TW-eU8;?hgDcNZl.;[*Qsi<@Tsc36W)
%_$%RB]*(aq0a)XgYQUcl2[%\$3<`XW6NulH^BLq463VW'2?`O=Ziq`PW-nKNK_r*.qkSN<n1Frtn*L<_
%n&PYjn%/]pmmR@$maqX9mWAW^mY(eMm^`S'mgfW'mpH@jn%o;jms>6Ymo0GmmcXf)mh>raqn.a^Z\/.r
%O8I"Z!<<!($N@47ZMe)8@JgN>&H!+FZ2>@B;#D49n,6o)<rT?/_#NR'.0'#IErZ+E^&G8BAc6$C$iOZB
%Z2V'8'`5t4qlPAFY^u\mNr]4C#Uo\W#Jg:O#?La@#4MI1#*/U'"t]Zm"jHpW#"8H]#/pP5#>kH8#F>DA
%#N,Na#AsET#5e@7#+tmp#8d9YO8H/4qmV:VaH$?$Sd/*kSHd%2Ad1[$*<j[b(^1?G!sDHtblad>iWMdM
%cij4EL'>3grWYLb?3\=HK*E=o>6U)d3<\4<8HjJ<aH-5-L&8rPqoFfur!WiBqR[!Iq.U(Np_jAPp`Tj:
%pa$,"pa-0^q/urdqTB(ur#,e.r"]N6r"01=qS<D;q/HW:q/ch$qSrg.qlPAFSTXh&GPeUq!;m`>n+t33
%L\Z)t,5<Jg_tYV`;tq^CjS1&)G567`jSI=/<W!j@bkrOe/GpLmNr%'++Sg3b[eY(M:&<9A])/^_qk/01
%WI=ZQK`M#k"jHhl"]bA@"Q]>)"EsPd".Ap.!l+L_!Ts3+!c.YB!s&5C"/Phs"Ao"5"Ut7W"H*"r";CTN
%"%<"1"2k#FL&7itqoFiqaH$>r)@%#Nncm/-bm&7]Ws0=2Xp(QlXp$NOYQV]5b68dX!<mE:-3_<^,mH."
%+U4_8q?BsmcNXCBbls+#rWV<YSTXgtF8MGKqk/-5pa-0^pAkG9oudLVoWSJ4oW\NmoWnYRoXG!;ou.$J
%pB:[9pa-,epa64*pa?;EpB1WsouI95ou.%hpB:\Vqk/01RrnP'HMa[i!;IlDG4u.C(\P`L^\##<C%T(?
%q"2Q-M"K-t(\Q2XB_Mf7_Y>DZ/GLImReS03#PSE)V"M\/:%cR/g@kgS1Ae&!qkSQ8Z\/.aK`Llo""a0Q
%!lFWY!bh5T!Z1Lf!N,M^!B'N]!6"R:!>>,@!I"5j!Ts/*!`Sk@!l+I;!`J^H!VQ-Q!JC+V!TX'dL&83/
%qoFiqaH$>nWs0=2XTc*(Xp%esY6=Li%g9Q:F9I<gh?6aIhZU7UhusebhZ[ujEs8H5%0bS[%g@CR%g<sE
%F9LatFTk;4R</7pFShYQqjV[-o%sUio&'Zbo%sSUo%jLInjrs*n[\hinM13^nM14gnMLGunM^U$n\#)2
%nk0-Jnk0,Cnjrt5n[\isn[o",qjV^)Sp("/Hi'Ub!;*Gto^o?jPk;3`2>"6XeasLWSb%%-C%C9d3V)&0
%POdQ4o((W?;Y+u5L%GlY]^u^;>kAR0rUY+5`q+9T-2X0Rqk893UjDp0Fo_*i"B+gI"7l$?"-`<9"$,pJ
%!t"M6!oEH0!kRnY!snEP"(UjV"2OH<"7>YN"<R,)"2==t"(:Z2"#9>V"-38MG5J(]qlPAFVgAF62[%\$
%1B])q/-AoB49E+`[K;``3<FEn`<'H9YQEnSZ3.)p]*(aq0a)XgYQUckWWW.fU]W%7,m+2;.Ke)qUjDp?
%J,?g4qm1nTn%/]pn$3%pn#ulSn&5?9mns3ZmcX^6mYM!&mVi60mV2hcmWAW^maqX9mmR@$mlLW'mlCNj
%m`ts@m`Yc=qm1qP\qg1(O8I"Z!;*W#eb$?R;Y7^*ch,H`:%U1B)=sC"kjo8b]^kh!3V)G:\anb_3V.Fs
%C%N&@Sb*^#)Y>0SRe)@;BCgNQkPLrtqlt_L["J7OH3!Nr"$,r;!kIms!]fi^!PIuQ!KcjG!G_.L!DW)h
%!Q+@u!^Z?=!kRp<!oEKD!t"O"!fQV^!Y"VT!TW^o!b;,'HMb(%qmqR[Xa^?CblUW3gB#Ihn,Z&P&-0Z@
%HN9?&mJq+qBE1j"5lejp,QU.$%KX66SH7sH1'/?c6NNSH>6,T4b5gl"YQ8J8Z%;enO8I"Zqm:tUo*tf6
%o-=?$o0EApo4S,"o&B^)nmqe@naQSln[nj9nWa++nTY(/nb3'!np^\%ns9@lo!e[knhgDrne(rmqm;"Q
%aH-5>O8HMD!:`/Q]'qEUEUQC!610R22=@+<`pUeHC@:fs*q,a%qXAe3&b1)H:%;Hh_XU2!61@5BrU4%n
%ddMD]?1:ttJbuR!qoFiqaH-50LB-jh!DW'0!>4dn!;c-X!?U\Y!7UCL!1E;]!,h9q!#b;5!!)QZ!#"h7
%!,:tg!8$_1!2Ar&!1**O!(?=u!'pFmL\o/RqoFiqaH$~>
gsave
clp
gsave
/0 /CSA get_res setcolorspace
gsave
[1 0 0 -1 0 450 ]ct
[10.4995 0 0 8.50049 204.588 379.308 ]ct
snap_to_device
<<
/T 1
/W 22 
/H 18 
/M[22 0 0 -18 0 18 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~qtp9fqtp9fqtp9fqtp9fqu?]rs8Vunqtp9fqtp9fqtp9fqtp9fqu?]rqtp9fqtp9fqtp9fqtp9fqtp9f
s8Vunqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fs82]jqtp9fqtp9f
qtp9fqtp9fqtpEjqtp9fqtp9fqtp9fqtp9fqtp9fs8Vunqtp9fqtp9fqtp9fqtp9fqu?]rs82]jqtp9f
qtp9fqtp9fqtpEn~>
<~aN2?<_8s^=aN2HDaN2HDaT);?s8U0]_8="'_8XL:aN2HDaN2HDaT);?aMYa!\$`NP]=#SuaN2HDaN2HC
s8U*O[&pL,Y,8M4[C3QcaN2HDaN)<@^:(AKWMH;dV5C/kY-kp``lH-?`lGm'XJM\cTUVIEVl6StZF[ie
a2c3?`4N:NTUVI@S=QCKTrk]0\[fSs`lH-1\Z2EqS!ob6SY;^PVlR>:]YMS.aM,?dUS"'GR@9V8T:r6b
YHtsY`Q5j1]sXf2SXZ(:SXuIKVPpT"[_0JuaN2H-[&]mjSXl@FTVSKbXg5FL_8s^=aMkTdVPU,bVPBub
W2Zl'\\>u&aN2HD_6L#9W2Q\rWN*&%Za7<X_oKj>aN2H1[Bca1X0&S1Yd(OD]YMJ,s2`:&aM5TuZ*(75
Yd(RC]>))!aN4D&aN2H@aMbTs^:V%l\[oMl`5p$@s8U0]aN2HDaMts5^;%J)`lH0AaT);?s2`:&aN2HD
aN2HDaN2HDaN4D]~>
<~O,o9ZMiWp[O,o?_O,o?_O8o7[s8S.@Mi3INMiNjZO,o?_O,o?_O8o7[O,SpJKnP&4LkC\JO,o?_O,o?_
s8S+8K7AAsIsZd"KS>,@O,o?_O,o<^M1gJ0I!U'bH@(!fJ:r`>NfT6^NfT'NIX69`GB@tOH[L6kJqo5A
O,o<^NJN.3GB@tLF`hqRG^k?uL5(YINfT6UL4+>iFE;MEG'A.UI"$d'Ll.7SO,8[?H$4=PF)uGGG'JFa
J:i]9NfT*VLkL/!F`_\HF`qtSH[L9mKSYPIO,o?QK78#eF`hkOGBnO`ItEB1MiWp[O,epAH[:!aH?jg`
I!pHpL5CkMO,o?_Mh-;&I!g?kI!pHnJqJl9N/s$\O,o?TKS"T!IXcm!JUrE,Ll77Rs,W5%O,AjJJU`3#
JUrH,LPgqKO,s=%O,o?]O,\jHM2-nDL51VDNK9-]s8S.@O,o?_O,f'WM2I1ONfT6^O8o7[s,W5%O,o?_
O,o?_O,o?_O,s>@~>
]
/SI {level3}
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
grestore
grestore
np
229.197 68.293 mo
230.454 68.6626 232.092 68.5322 233.684 67.8286 cv
233.918 67.7236 234.14 67.5938 234.347 67.4438 cv
235.228 66.8022 235.85 65.7764 236.232 64.6665 cv
236.662 63.4214 236.79 62.0708 236.643 61.042 cv
236.592 60.6841 236.509 60.3652 236.393 60.103 cv
236.179 59.6196 235.874 59.3359 235.489 59.2144 cv
234.73 58.9717 233.665 59.3657 232.4 60.0908 cv
231.873 60.3926 231.313 60.752 230.726 61.1475 cv
229.33 62.085 228.146 63.1284 227.51 64.187 cv
227.085 64.895 226.904 65.6084 227.073 66.3032 cv
227.105 66.4365 227.15 66.5684 227.209 66.6992 cv
227.555 67.4805 228.273 68.022 229.197 68.293 cv
cp
level3{
gsave
clp
[1 0 0 1 -7966 -7966 ]ct
<<
/ShadingType 7 
/BBox [8193.01 8025.09 8202.72 8034.54 ] 
/ColorSpace /0 /CSA get_res
/BitsPerFlag 8
/BitsPerCoordinate 16
/BitsPerComponent 8
/Decode [8025.09 8202.72 8025.09 8202.72 0 1 0 1 0 1 ]
/DataSource Adobe_AGM_Utils/rdcmntline get /ASCII85Decode filter
>>shfill grestore
}if
%!;.ZJ6M:luLA)PpSG4lLJG6AYrqB+q9_S5hN:jXfoCRG>4nE:p@e8Xh`UnNe&G9QC<;(tS6M;$#V"E[U
%eGI=JqoFiq[Y4P!Nr\ca$tAjW$pF9m$hO)e$]OeT$I&3P$3'WE#t+@;$/5!/$>8p$$MO%H$\n6<$ioo9
%$`<T$$UaS&$@hZj$MXG=O8HA=ql,#@aH$>r1C\m1:(:e2GRYMeSICh]7LR-1r<hcb]F"r?KaOOK3t!A.
%p^<&T9aj_iZOHj.iXEEp+Ugg8cO4mjL^WkPaH-5>O8Go(qmM.Xp@o#SpcAj0q1T0LqRd.@qK`GrqEYBT
%q?[C5pq[4GpN$VBp*C#4p0e:,p7r&>p[&;gq)\o-q"Y3fpT4aMqmM1TWI4T3FSi%c!;i;qQM^:_E;W06
%5l?cR#lI='.Jsbb7/PaG?Mf?]RJRs1f_W5f#l=K,kkdgW_u#u4SGW<o@/I\GIJ[+R]_fd2qoFiqW-nKA
%HiX#U$4-MK$/#--$(:\G$"!M,#^H5i#E\gM#-.OT#3ku)#:0-P#@@6m#XnN8#q5Z-#kRp`#djI>#L<1G
%#R^I.I/BjiqjDO&RWJQ#8IG1^1CD+l+psV+(CF^E?O=F<X9fs@q$;EB#7.m6&d\j;,mcs2fEp:'M[F+g
%Fp^2"C'j>#\Hu7-_[3.9aH-5>O8Gl'ql+uDp*C#4p(@Z;p'1l6p%\lApI,>AplPe@q:,\*q;qn-q=b+1
%q?[C5pq[4GpN$VBpL"8CpJhJ>pnA"Cpok"Dql,#@W-nK1F8MDJ!;[!,?M\[I,l6:#l2*gPWr"RVA,@JT
%*W$HQf(u?M'Daru:ANEEM#$0;ch[;?(]%PEh>5>"UADG*=o(r!Q2@"lqjDO&R</7nErc-$$jcdk$dJW&
%$]4h($U4Mk$GZO*$9S2<$+0W\$3'jK$:F_9$A&+D$O-HB$]"Yk$V^L,$OQb!$AA>E$HW+cO8I"ZqmM1T
%Z\&8U,79#"H4!%;eHu6R/IAf_)$qnn#7.+&p';Q6OU,Rs.L<9U`!Gu3i<ac,!=A`&>RA.B]*W`[V?lYg
%64#UJZ\/.`K_q]qqkSN<rH&E2rB(EPr>>nmr:UC6rEBNNrOiG`rYc"lr[S7<r\=d[r\FmQrV6enrOE:,
%rK%?\rHAP+rR;+8rT"9aqoFiqW-nKHJc!NL!;j\?oDC'DYl'UhB)M?.)>rP#O8RH3#5l1>J,E1Kc26E(
%)Z+=UA,D)fkkh4_DYt(P./\Gth>Cpk<;ZLsU&1X3ql"o>T6C+$F9)2S#@mYh#9*M<#0m([#(QQN"o8([
%"a0`d"S_fs"[DmC"cE0i"kNQ*#$Un!#2]6t#*\sH#"JM7"i:);"qLO"FSh\RqjV^)R<&B+p';Q7>6iCN
%]a&ra)@%el&I+s."U5kCp'$f]PQg+G.g@a+^'9)bdg$*Tj9LbE9F!o_Z3KjtV$:W34pJOoW-nKHJbuBn
%qk&$3r4WAbr@8(,rKIKGrUpD]rTFD!rRD%<rP&I_rDs,9r94?fr,r5;r0%;,r2Kqrr>>d>rIY8\rGVns
%r<*9Qqk&'/W-nK<HMa1R!<+b]8cGUoRK!?peGi,H#lg:t,6,ml1]QP?:&f>>j8RL3M#J:t/,h%)55m;D
%<W:8LXoD9(n,IA3jSmj<Qi"jbqoFiqaH-5&JH5Zf#:odt#29($#)N9u"ulQ$"h"@F"Z65f"M=ZA"T\O)
%"\Sae"df2l"r[CP#,2$8##YBB"p+_?"b$A_"j6_HJc!*9qmM1TW-eUDp'$f^=TqFs[KQ[2$j=3B!X(jh
%o`NV@jTB>uM$'XS-NiK/^B>q_eHD9<kQM\"9E`N;WW[tRRfj6#49SOYW-nKNK_r*.qkSN<ru2/$ru2+s
%rriN_roF5us$-ZBs-3Zbs5=%)s82tXs8E.7s5aDYs/cHls(MZ"s)/&)s'5a"s0)U;s1AK2qn.a^Z\/.r
%O8I"Z!:gp5AFglLh=N6)>P0u^g%?QqMY.Da3qW4Ql1=HOIIcn7'(Pu.U@J6ij73E^,kDQRSb*g,'_DP7
%an#H<=o6:$qlPAFY^u\mNr\_M$)7"\#nlk##^u@@#O1mA#FP/2#=e@%#5.T)#F=r1#WhMk#iG1W#pAd<
%$"<Db#g;ht#Vkqr#NPC-#_W#qO8H/4qmV:VaH$>l'aW^fe-J,,_?ZD!_$9T)U'=NfOTi#^TEQ)%eHO@l
%/I%F0\-H++Ba<>^0aM%TbQk*<WWr@lV?UH!h?OhnaH-5-L&8rPqoFfuof3<2p-o<hpJV=Ipg","pd,2R
%paQK1p_3ogpC%8Bp&G=so_AaVoaM0focja"p+?UOpG`D%pE9b\p(dn5qlPAFSTXh&GPeUq!;-'ll1P)^
%<;-e*_>"]K1\^nQf(\J6Gk]ho)tq\`[Iq??<:n!2p%6W:7eGaHR.]\Jrq?'jB(k9i%e\<UWV`oNqk/01
%WI=ZQK`Lb]#5.Z*##t<E"h"*W"WR3@"C_%_"0)#u!ql7h"/>I("BkAi"VpZl"gR]o##b,_"fh9u"U4UW
%"BP2C"TeM0L&7itqoFiqaH$>r>mF.#7g@Q@0*YVW&d?k_qZV0>jTQCqcNL]PnHClHqusS)'F$Ag.L)%1
%63coS/-^@q(^9a3"9k1g'*]<NSTXgtF8MGKqk/-5p_3ogq"t<)q=+VIqTf;QqRH`0qP+/eqMGBCq6pJ?
%ppgNnpXfWgpZi!-p\tEJpuMZ\q;)8)q9/t_ps0*:qk/01RrnP'HMa[i!;G+L)u-rHQMIum'DdRgRJLn*
%48MqYhYK)2Jba-ao_<Y5Gk[a3#5>A*@e[eD^A+K,2Yj'LZMB@[;YZ7Sf))FpqkSQ8Z\/.aK`Lk<":"XG
%"*jWY!qc=H!eL1_![[[3!Qt5V!H7c7!T3Z.!b:t.!ql;/"&JZJ"02-*!ugu3!gWR5!]g$K!knK?L&83/
%qoFiqaH$>u&d?k_rWS#Plif6Bf`^C5<<SZcc3-l>63IMj<!6;#A-Ak/Fp.R;"9h$eN!5+9Gm-5*B*@Gq
%huoYKnHA=XR</7pFShYQqjV[-r,r5;r+#r/r)<f#r'CMjr3ldCr?h\prK.1FrLj=PrNHC[rP&I_rDs,9
%r94?fr7D-]r5]!PrAOi&rC6u3qjV^)Sp("/Hi'Ub!;b@OjSHn"PPVZi6i*JYoD9R2Vu)e_?Mk05)uLc[
%Ac+7b[JW>o#5c[K:&@onQhs/R8,G%DpA:lmXS][5r;2t*qk893UjDp0Fo_G,":"cY"1A%K"(hB<!uq/g
%!n[A=!h'!i!b2+F!i#XD!q6)M"$QT1"+:$U"2Fc2")n+%"!@IE!o<ej""a>@G5J(]qlPAFVgAFB^B>q_
%U'$YYJcas1=TW(2_?)7e-3=#CK)sI#XTCZbcN<2,jTB>uM$'XS-NiK0%0KZ0liNs]:]bG3EW[9XUjDp?
%J,?g4qm1nTroF5urm(Z,riH5brdt7#rnmgXs#'n8s+LJqs0)OSs3:[<s5=%)s-3Zbs$-ZBs""5RrsAf<
%s'Yros+1;tqm1qP\qg1(O8I"Z!;`AkoD4.CLAGQc)>Z`&Y55g5B)==b+o@u7iqpn#8,M]UYl"k2)uGs(
%?MbcGVu$Mt3Vqb;chglIM#2N#o)#,*qlt_L["J7OH3!jN!uq.*!jMRF!_<-^!TO"i!MfR@!G_Pm!BU/j
%!LWgE!WW+$!b2)r!h&t:!n[?Y!cS!"!XAS%!R(De!]0_LHMb(%qmqR[Xa^?I6isOf+9Fn*p&WhA_uXfQ
%3<:`.W;uJc'EGrG8HBe-Gl`<iU&j9N1'/Wq]`MgBQN@']CB9^sg]:FP$3@a8Z%;enO8I"Zqm:tUqk=,N
%qfr3iqagf-q\0%GqgJO*qr@`gr'UNUr."d&r3ZO[r8Rf=r-\T\r"9%*qr[uFqmHLar#PjAr)!J$qm;"Q
%aH-5>O8HMD!<$%%@f@nZo`""SU&TfIFT5VI)uhMjeGf.AT)N-uT)GelgAKt33rKTjR/JrEs8E6(QN"Z#
%8H+kSli#Z@1Ae2'qoFiqaH-50LB.84!BU1^!8@E\!1s2`!1s2(!,2@]!(6`F!%e)L!!)s"!"Jio!(d$<
%!/LK[!8RO$!/(8'!)idd!#GN%!''keL\o/RqoFiqaH$~>
gsave
clp
gsave
/0 /CSA get_res setcolorspace
gsave
[1 0 0 -1 0 450 ]ct
[9.71191 0 0 9.44482 227.01 381.462 ]ct
snap_to_device
<<
/T 1
/W 21 
/H 20 
/M[21 0 0 -20 0 20 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~s8W-!s82]jqtp9fqtp9fqtp9fqu?]rs82]jqtp9fqtp9fqtp9fqtpEnqtp9fqtp9fqtp9fqtp9fqtp9j
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fs82]jqtp9fqtp9fqtp9fqtp9fs8Vunqtp9f
qtp9fqtp9fqtp9fs8W-!qtp9fqtp9fqtp9fqtp9fqu?]r~>
<~s8W-!s2`:&aN2HDaN2HD`Q-'@aT);?s2`:&aN2HDaN2H?]#;G*aN4D]aN2HDaN2HDaN23)]"#)\_oTq!
aN2HDaN2HD^r3LfZ`(+1[_'Dta2l?CaN2HD`5&gcY,nFuX0K"FaN)BCaN2HD^pgbLV4jZUUSY#t]u\78
`Pog:_RZ\FVPK]RSY;j\\@Tc%aN2HA]Xb2EWM5uRS"#nBW49U`a2Q$5^9XuFTV7sIR[KY;Uo:r?aN)?<
^:CPNV4aEMS!oh;T:rNraN2H?^pghVVkfuVS=5n9SY<-h`Q6-?_niabXf%tfTU_OCSY<!\]ZA18aMbZu
XfA:pU8"?RUnOT^YeeE%aN2-.[BHR.Vl$;iW2HSjXLQ9kaN2H>]XY5LXK/A'XK&7u['dZiaN2HD_7mLg
['6a:Ycb(0Yd:s^aN2HDaN262\[JiQZEh'J]th8$aN2HDs2`:&`4rpu\A,bj]Y2A,aN2HDs8U0]aMl-:
_SO"&aN2HDaN2HDs8W-!aN2HDaN2HDaN2HDaN2HDaT);?~>
<~s8W-!s,W5%O,o?_O,o?_NK0'\O8o7[s,W5%O,o?_O,o?\LQ.4PO,s>@O,o?_O,o?_O,o3OLPCD;N/s&"
O,o?_O,o?_MN*1AJp`-!KnkVJO,o?_O,o?_NJ`F?Isu]kIY!-.O,o?_O,o?_MhQh2H?a^YH$XpkLl[UX
NK&pYMhZY-H[0^VFa/4]Knk_MO,o?]Lk^D-I!KmWFEDVMI"dH=O,]-VM1U;.GBe:RF)uGIH$kF)O,o?\
M2$V2H?XOTFE;PHG'JRiO,o?\MM6b6H[0gXF`_\HFa/CeNfT6]N/N@?IsZHbGBJ"MFa/:]Ll[UXO,\pJ
IslZhG^+FVH?X[^JW#SMO,o0RKReJuH[C'dI!g<fIYNlDO,o?[LkUD0IXZ]pIXQTkK7o,CO,o?_Mi!4B
K7JK&J:E#tJV/c>O,o?_O,o6UL4t85JqAc1Ll-tKO,o?_s,W5%NJ`LJL5LhDLkq+QO,o?_s8S.@O,]-Y
Mi3IMO,o?_O,o?_s8W-!O,o?_O,o?_O,o?_O,o?_O8o7[~>
]
/SI {level3}
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
grestore
grestore
np
216.141 51.7246 mo
212.932 51.0405 206.528 49.7256 205.155 50.6826 cv
204.47 51.1611 203.352 53.8398 203.337 54.7358 cv
204.207 53.6294 204.668 51.752 205.744 51.3975 cv
209.281 50.2329 214.169 52.8853 215.266 52.9561 cv
216.114 53.0112 216.396 51.7788 216.141 51.7246 cv
cp
0 0 0 rgb
f
233.29 47.6611 mo
231.744 47.0166 225.767 49.6616 222.776 51.0117 cv
222.538 51.1187 223.076 52.2632 223.892 52.0303 cv
224.948 51.7275 229.162 48.0967 232.867 48.4844 cv
233.993 48.6021 234.843 50.3384 235.928 51.2344 cv
235.723 50.3638 234.06 47.9824 233.29 47.6611 cv
cp
f
213.987 25.9614 mo
209.518 25.4961 208.202 26.418 206.723 28.5659 cv
208.202 27.6108 209.784 27.4619 210.417 27.689 cv
208.701 28.5474 197.581 33.8018 197.66 43.9077 cv
197.7 48.9541 201.327 56.2524 203.218 60.75 cv
202.73 58.1782 201.941 48.4712 203.848 44.5513 cv
205.266 41.6367 207.08 41.3794 209.215 42.1929 cv
214.038 44.8105 218.063 45.229 222.948 43.4893 cv
220.837 44.6006 218.687 46.0933 216.666 46.3477 cv
218.393 47.2104 220.216 47.8589 222.116 47.8584 cv
230.873 47.855 233.548 43.8496 233.38 39.1494 cv
236.375 42.3037 236.403 46.7578 237.207 54.0513 cv
245.686 30.1089 226.763 21.9927 213.987 25.9614 cv
cp
f
204.142 66.1978 mo
204.292 66.1187 204.406 65.9775 204.424 65.7959 cv
204.454 65.5078 204.245 65.2505 203.957 65.2202 cv
203.669 65.1904 203.411 65.3999 203.381 65.6875 cv
203.362 65.8687 203.444 66.0308 203.575 66.1387 cv
202.771 67.4302 201.671 73.1372 201.396 75.792 cv
201.081 78.8145 201.952 76.7354 202.75 76.8188 cv
203.549 76.9014 203.974 79.1152 204.288 76.0928 cv
204.564 73.4385 204.663 67.6279 204.142 66.1978 cv
cp
f
231.392 96.876 mo
231.392 97.4844 230.897 97.978 230.289 97.978 cv
229.68 97.978 229.187 97.4844 229.187 96.876 cv
229.187 96.2666 229.68 95.7734 230.289 95.7734 cv
230.897 95.7734 231.392 96.2666 231.392 96.876 cv
cp
f
231.27 99.2554 mo
231.27 99.8638 230.775 100.357 230.167 100.357 cv
229.558 100.357 229.064 99.8638 229.064 99.2554 cv
229.064 98.646 229.558 98.1528 230.167 98.1528 cv
230.775 98.1528 231.27 98.646 231.27 99.2554 cv
cp
f
231.146 101.634 mo
231.146 102.243 230.653 102.736 230.045 102.736 cv
229.436 102.736 228.942 102.243 228.942 101.634 cv
228.942 101.025 229.436 100.532 230.045 100.532 cv
230.653 100.532 231.146 101.025 231.146 101.634 cv
cp
f
229.419 103.167 mo
229.419 103.776 228.925 104.27 228.316 104.27 cv
227.707 104.27 227.214 103.776 227.214 103.167 cv
227.214 102.558 227.707 102.065 228.316 102.065 cv
228.925 102.065 229.419 102.558 229.419 103.167 cv
cp
f
227.525 104.614 mo
227.525 105.223 227.032 105.716 226.424 105.716 cv
225.814 105.716 225.321 105.223 225.321 104.614 cv
225.321 104.005 225.814 103.512 226.424 103.512 cv
227.032 103.512 227.525 104.005 227.525 104.614 cv
cp
f
225.46 104.774 mo
225.46 105.383 224.967 105.876 224.358 105.876 cv
223.75 105.876 223.256 105.383 223.256 104.774 cv
223.256 104.165 223.75 103.672 224.358 103.672 cv
224.967 103.672 225.46 104.165 225.46 104.774 cv
cp
f
223.254 103.876 mo
223.254 104.485 222.761 104.979 222.152 104.979 cv
221.543 104.979 221.049 104.485 221.049 103.876 cv
221.049 103.267 221.543 102.774 222.152 102.774 cv
222.761 102.774 223.254 103.267 223.254 103.876 cv
cp
f
221.047 102.979 mo
221.047 103.587 220.554 104.081 219.945 104.081 cv
219.336 104.081 218.843 103.587 218.843 102.979 cv
218.843 102.369 219.336 101.876 219.945 101.876 cv
220.554 101.876 221.047 102.369 221.047 102.979 cv
cp
f
218.932 101.947 mo
218.932 102.555 218.438 103.049 217.83 103.049 cv
217.221 103.049 216.727 102.555 216.727 101.947 cv
216.727 101.337 217.221 100.844 217.83 100.844 cv
218.438 100.844 218.932 101.337 218.932 101.947 cv
cp
f
217.29 100.221 mo
217.29 100.829 216.796 101.323 216.188 101.323 cv
215.579 101.323 215.085 100.829 215.085 100.221 cv
215.085 99.6113 215.579 99.1182 216.188 99.1182 cv
216.796 99.1182 217.29 99.6113 217.29 100.221 cv
cp
f
215.647 98.4951 mo
215.647 99.1035 215.154 99.5972 214.545 99.5972 cv
213.937 99.5972 213.443 99.1035 213.443 98.4951 cv
213.443 97.8857 213.937 97.3926 214.545 97.3926 cv
215.154 97.3926 215.647 97.8857 215.647 98.4951 cv
cp
f
214.005 96.769 mo
214.005 97.3774 213.512 97.8711 212.903 97.8711 cv
212.294 97.8711 211.801 97.3774 211.801 96.769 cv
211.801 96.1597 212.294 95.6665 212.903 95.6665 cv
213.512 95.6665 214.005 96.1597 214.005 96.769 cv
cp
f
212.363 95.043 mo
212.363 95.6514 211.87 96.145 211.261 96.145 cv
210.652 96.145 210.159 95.6514 210.159 95.043 cv
210.159 94.4336 210.652 93.9404 211.261 93.9404 cv
211.87 93.9404 212.363 94.4336 212.363 95.043 cv
cp
f
210.721 93.3169 mo
210.721 93.9253 210.228 94.4189 209.619 94.4189 cv
209.01 94.4189 208.517 93.9253 208.517 93.3169 cv
208.517 92.7075 209.01 92.2144 209.619 92.2144 cv
210.228 92.2144 210.721 92.7075 210.721 93.3169 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (German) ()
%%Title: (1403.m00.i004.n010_140705_beauty in evening dress with glass of vine.eps)
%%CreationDate: 7/5/2014 1:17 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBic6FZM+1+cftHPmpM6UXM"Vg#R!%D(^tY-)[iVF)/[saDU4+8gY[6"ZD<X_K#2@8K$g!5B5f=NQe3N<1@j;8eOI#SY1-6J
%)uhI$N(hfGN"#^Cq"'PnpRYCY_Y1N'$B7rm(=kRZX[XaU\(;PK7]X4i=o2'tB=<^GoLgq15-.d(IqMf_`R5WPPM^Hl2_*?sUX?(V
%3uKtiE2.Qs+2;^B=#9pVf'St";RK^=GNo"/]NM#eg\ctRaT'm'3uqKGc)S"B]r.q$`F-g_ccjGCn>+M#[#1DHU]+sC?1XPg9Y)<(
%Mt-rZ7cVjFB'@9/+ZqB#WuY>;VVd=2m*'&q`*?oPM3^&LjjHPSs't9maM3tsCP_tR<VX=X\'_t[\!aKV[`l(i>JM5UFDud5qUs@?
%W0%D51;f"Q$kL3YZWc^KN'u-:E_[r3rtGE&e=!PY*OD?*F'Z]-A6ms3"`D=7Fb:%jDr&0("QB)Iq"J7[=]d51/WK(DX0Z1/&)gJ$
%Nc*_><l<MSHDO!%1V#(KA8F3I@9&Dg5MrCTJ_iA:pqLs4K4=-llk$!OWa4Ol1#j5#D_J`1Xl>DGeW'hB%X4@MrLi\8(Re>n&EGCs
%Z8.a7k:Fpi1'[-moa#2*OAUbs8(b.^f9RAnC,?/"`,O*l*Y>bQPe#8CS5ed3=lg6G*RiD8qm9?PpPIHW1VWc'mj[G?r]c5<?S@rM
%dHQ>WBJ7Lj>he\-A/MlEIE]B20<[6J^^(e=hC9+dSTpm_375M7s1uIt&Da5?$o]0?CsWEP3X5TTO-fF,J%/_MdZ71.NG`gDIba_i
%O-tC+E>3!p>/_-Ibj6<t%84VV1V0:[f7(3W$$4'XF7t3ZBSW]D,JV[ir(m1HA,L86mtkOGXRlaZf(Jn6YhEd1#4Al5lfH@F@]Po/
%E0<KZ@Oo>\oZ#afI&C>/"K_UdrO,\C'%JfFE;U=B)4KQT%^DX(9i^PMOrt8#j`YQaq<-,aV(p5Vq`egcNG>:qlO=\Ll2@/nFe,a:
%hl4dS>M]!ek+L,#p&Q<WoM9l\[lX*)`(\VFS2:9F34X[F's#m-8ZUK+Xd#!g:\_U^d?niN;,N1DSi#Kc:VFk>^R0t*!9iH8Sb-9D
%V-Y6aNER!m<+c0;fL.NADT$kpa)qk`8B6F'2Od#qo5D989u=9+fCaHp(7(^i'g&aO)O^MqIi+StJ,f=7(OniM_n.#cf5pfS/%,=M
%\hCC\q=r(QPj+BUH[l$Wo`Eain:0!L?WPHPSgR6:_bL!2Xk8C8:&H0:<+YVpbeHOFQ#fKIP=dZP[VH^VJ@74LQSkKX(ks'5\2ZUK
%Sb%h+N@rPNOm)ZnG>Sj0a\ujF-b`nZ8\WZeHX5F#+l(^LV:],Hd"=^L71;qf)th8M-,hpc2q8jjA>_9$0qnVdJXF)H.Dbp2[XMa&
%dC+`.qX]d"RQQD%#)V@f#u)<.j8POGAB&h$k:Q?*`lnhZ[^TS+&]]A30'\t!Q818re>dZf0hVmj<K=Y]OHe6WFj.<u`Sj"Wdn7%'
%$L?KbbUdRnrpBZ?s6BL^PL5FIatW8.Aet)S:bkoQ3diY^]=QVOQ#c&09K2GPpS%iTIe+5dRFAB\EnX*iS#G@ID(!S?r^jAUIjTLM
%5>l=Va45#M^Nl3M2G]6dlJepFasm%9:04ik#(%MuW5Z`&3bI'ac=i*[%J65f\!9OKM4JPML`Go1.D-KYo$rG%km`)Q)nL8EXg$W`
%VNHd6a/doh]s6IoF@tR-;J]!CmY?lu)VQ4qI8uam0A]^B>MCTLMVh?L.c1!DZp;oU0&G/VYoR_h_J``>]JMZXW..EJ1N!H_]H(6.
%,f>7mKLTeBkMp!&77<t9N][O\*-tm*XmJ'YX]"pn*:5RE9!t@ngX"LU`\u4XL94p_d7U[/Ib-+4(\[XY*!8aJ0#)*8CogmSJ;$=7
%S6;;lEYGpMW@Ko1>IZ;gS3;#Vr\n)mj&V;$hs/BSV*/t`&iVUhk'l@Q;TP8Akffk/KM?m*W@p4'jefcIe<g&(pW(!>^0I\_>T7$&
%CYf&00&7j$hk+*^^PCA<dpflXpTHcR]8llNBM<SiDh,PaWclESo]t`+V!nTBST5nO?K"<;<)-3$q\<<9:Q+%P]2G`6NlTjagW_2:
%;bePLb?$))e$7-8F+,$,UsZF..o`d5j5Y=83JSRQV$st.?Jj_T>tZfR_KnU.?\tu%r-^W_D]',15H8F,K=]s)rVtD+OLDpQ*CjJg
%;>7!0IqX%1a2Lrd?RhqJ["7XHk1^b&2Fc?c<f=*QJ!u@C=AORPd8-o]KB`->eu6&>`CoU%s2d-@33nQQU`b4[pP+rqC)[iS&!Kqa
%C)d1EZ&Scg\W*lKW73n5l%27n^Mb"eRT6i(h/Fs*SkI',-N7Nu[=L"hFoL\gR\"OnU'+"qa.-9]d"+qn79M'=gY')b%dZJUZor]#
%7f8i`U%D'3LN*orJN_Z;5jhq\D0XOTafC[:(C7N:9!R$KFA?U[-OkP(Vj6:bFFl.Zl+IMs>pVhH_q%Bb87"r)-bTYnRJ?QZX-dMp
%r$koI9s]5emH2QtI%1n_RIm^q.[3VO:c#k3\CP=m='K,.T+hNQdsE#miSK=3V76cd.[DU@1_>L)?CC>5"3C1JAX91F_mOJ9b7t_p
%]U<[!G,*SM76SX)8nnF`OIIQ9dTe8iF>7qPK\&r0r\kQu'.^`$2^0@;-<0A)Fdm<tKiSOK9XA-)(ZYN!Kr)#]-D/i;aK(0\oe]_<
%Fg4b\FFf#XC!"u25X>bJRhdE^6KL!UcR@(3BsZa$2Z5e(cC+S5P+r^.RB"P(_8N`YSbWtT:MZlIH9J@tLXiVncG(J"jJqp_Qf<\f
%o(sC)jGL?>U!di<I47:IZX%BR99iF+dVpXqg9-.-dsoFg1\.F^q"*JSo:K_j];XbT8]I5rZnI]=STl0?!Ya0;PU!B4SL5[0>J;,S
%nDkpg44:A.`,eEU9O&ME0$We8s$Fhj8`R8>PfZJ:Q"i0^`_Q3lE1DMd4,l'T;.H?boXNGMV83=Z]/%QIS0\p]?%jZ*KV7aWARq'8
%/*/UQJu%!uD5153]D*Vi<_-,4MQN*u?$]i-Q<GHDEu4;E=>!\EH=i%/ot+P\Y#=JWpsu1]?h,NrhVV`@X4h*l;@e[7DOH`HeIp^G
%:9h-Sf;mV)]hqQmN29F]eibBbA,oo?c<':6'^M#fW[6!kXqf`B_JEBT#%XHmVO8iriLm#5`,uGp9J]Nm.6^tI$(33@jOM3?qD8lI
%RUi.g.3s*H;c0D&+&9?B8RYe/P?a>O>%dDI;+`bj(Zf6WcY5#S1`'_lM_`OG\Pt2=qB*dI.G]Y^PZ3N`icWa-(M2Ue>NmKqU828g
%M<Bn50$5in7C`o+1tOI[-C*)j"N+Lk0!BKh]MuFp;bUH2C),>*&\iH'=1No%<PL6&H!'#$*J_BhAp59g=.3OMFfG"SdgA]CX3=9!
%g/#gJG:M3BJ7'kYVK-N'f<0g4>AmB^e6JK3CQg=#64iB\W_K>DjeUV[=IU4E;lM[?C,\S]`D;-sIrWKEFVJ^B5k%!\!'"PbbHm<i
%AYTq^R'P,(NJ?,"\+3<sh5qHB*8Z@,N/j$?;Ih$[(AC]Q--#dfeZPcf$`*i$/$(VJehjmS`ER4V_%;lD0@Pe%=+Zm"=u)(rEp18t
%%/p2=rD!=(6pG4":gS@B?4N#Hp$pA\%\U!C(-@4LoGHn@<Em)'7:.[qce#qk9=p%L0,JPF>4L\m<d^;le*&49'@r@bgu#3B$I^0[
%g8+77_[hq_""o#g1@[<G;bFGhQNO'RXk@BOD7\1jnZMhuOU#CTIa-3Wefo3A9.>rH`cj<nKdMfiFLnd18;]QhgZQ?ne.m;d.JAim
%!2!Pjr(Vg!EG'V#Ha']58NH<%nT)e5>3X&a<8R(Y@Yq3ZkHl"JdTBuYdn90l*^j7rBW!ffVDnH#ir&Nt<4ABhrsnC7HN'B>RHaP9
%o_eIS2VZJ<s(,o$'4B9k8gucuB>2hNhqtc@Rt'Q^IH=sbju[:T,Em#l:X=D93/f^Xo:9\8:p(c[GLJ[h1%A`2L7Iq67`_tL!C+G9
%[IO"1)lcq6:-6rK>='(S'H8"ji6'j,'[EaeFfeLgJ$,@ICEm1[nEttHp/=/@0[T^>r7Vj2WS9H\+"HZd#.pe_99Z4_V@g*?NK?ll
%<1VMERAdTkP?&OOQcKF=QR_ZKjeT0R^!`j6SY]@h?>?j)os&.-e'Qc)FS9&I/>Y&'VX_!,r+m999<XTY'W3+ns&<ahcFB5<#&k4J
%]IGs`;f!h_d_A[LC1;Up3)!8LYS4DJ+aBio.0]8,[^7m*Q=PJ4!\NeO=<\((\lh&dA8U2a8BZM!D4fUCBnBXjVb%(YWZ]aR-Wdam
%'Y5Som3SK;URt3^0@R_[2":(N&9uT2((%Y;-k+.'VLb(Ji+3gOR0HupJX:*/j]VdnWoq;HY#>\I1k=(cRGYE6II6N/lNkp5]2F!T
%:sq0S2D$gAM>([2[QqX((RmroW+",49r,VC[+N;"AUe"gXa&<$nYfJL]>_qFYk3';MUNa_PH5b%Q'`mc3DM(Z9nm]$Umj73$8T:]
%\Mh$=>(Ppf:cVk&oCbfgm'QW;[//3NO_K:9E<!:IDZ"o-T&,kN.8&tc:Tq*#UeQrF!8@'+q\:k^MMED!.:+Lc:6WpX'@6Jg:bb]G
%%%uUP.o]Wka6g)5DJ4acPTop9AD'uRr!r2cJ'eMr)=63RB40.Ao,E`#Xq+F-*nkc+d$/D&]9kqbY*;k]U?R,.V=0Y6Ai$>n\hp?l
%a/doh<]MV;PK!m=65q3+-INa==(p(Vits_KK_.*]0o][Jml6%`NFPYh!UNVB(mDi4Bi$OD@nbo"dl>@t]?HInR;!XN)TT?7E=@)*
%SRSU0Q`5IX'E#2s<jC.'<aRa7C%BO1]*eYg)u`I<<4WCPL!hVL8X`aT>T7=dhUq9r3i-idgB!oar=1=-<4*tUH=,4bdM1iCGAB8c
%/&%q8<P7p'D9BqrW2F`:Ckit3n67iQQdYZW6iF3ffY:RCL2na"Qfp9S.'CRC;sSG(;+lNPmWMSlR2/F6YJRHT=OOQocul?-PX[`/
%b6B9ZCg&`1;T]4BY/&@L[rp3&&mno,T]"(oIZhk>Sofa1=ru``EpSbmPUb]?-%)QCbdC%;9!aol:\RJfKum-alDs-dE>8h`;bV@\
%TTB4GSVt^tlZSeK%8Famf-?6F,"q);7^7r0$"HbZ\c2tC/tL(QH?3#'DX,J@]t"GgKr3_^J(L/_@?=0r\XVO%h8&ZeWBYTTr4*Nl
%,Hd_)QXX#pGAc]k:#3@rD+rcrWB6Hp"*/:B4-s\<f>aB)WZ0mCV;&rL]6%s1NUfZAQq"AVrOJEUc_\:64mBJjBobmAYdtGr*1U_K
%M.qC^?Z=j"#0=(h;BTIQkVKnK^.RAWCC4TW9ea.Nk,Q(e]QdC-QHkdOdaVqG99me``DiP=G3;@Q9pAiU].-uXq,$_%MmnrJ\8H,i
%!Q)I7>kE)[@O=:[g#g/'C]@UD1\"M^InQP3"4C6dOIe<)QN$Eu8J_Fe`%srDODDc/J"NUL6!`$EZY.UJk4*j/IrJEb92U%*,B^+c
%Dg.(K+0QW&m"W9Bi8"]jm?`^04GA@C=1,(C.9Z%UlaU%(dr&s*HV0hcC"bgT.0*<E:SlW:FV`WqGu\Ni&TJHk>e):5%Y[pZ=3:eg
%XR?mn:PB,`\?0iXZLbhP+Y7WBZrX`'f%^_>JM-V/mF2W7&3K*jTMm5Hg06tMli/d\oe;Yb2u:W!Rs<=i04D\WIPNd<-H@O'g-el/
%ki.<_CEC4@7aXq':qi0:1q!"R_<u$A>H^8F_DiK9H6nR]FIHTIm;-%"JN]s4gHulAU_1LW="&dOlsX.J`P<P]X4p#<_k5'&MDm-/
%[9Dh](+WlXXm;o"MlfV7ZkfNb04V"%-W.-B\oLIhPUB`sVSU/L3DPrOEX`^nHA+-)NDnXmZ+BHd7ZaO/%8NqNo6Z/Mote[e?,a4I
%L`9I6k@VCWIUTdOl_sf$FBtU[q-;X\cKq?"nlh0192X=!>0(ZJ1%]sYrp$mr]Nb@k%?j4$YCi@;Gbt(t^2BR,olQ2^p@0H7mIPR>
%ZGjc,ZArhdjfrNZN6,\+C^OZcieq@F^&ZF.i8c4!RFmoCR@%O!ru(H6K<p_6Qtm?g"qZ%bJdu[!-0Jush'C-qb7WL:igge8#d4^/
%W&1]U:CZS>A>G]lJ_hE&Xc5s=$KE4lL>bnt-k1@'7<Hu%U^6M^L>Sd957[>"@VN-qXdAaaV&6a77$dF"7cpS3g!_C<>rA%LRkMud
%Y;A7m>o[*p5%k\smGg#V.81l/?i%XU`()sCB;]#CZVutXq[Cebk[PP-d-KkZ[sYSEol,AG!N.B4^F."k2m)#$O!*9%D^sdd]jC+i
%L;[p=RLW[_lFSk[Qa+Ztp=8Z.;NLkKk8u@Hr0o@Sm8gjkh`Lb!#q[Q4DB+@ueQ0/-Rb9=EM^Mp`ZdUDQ)DCqA,JWZ5Lm4iDH6"g\
%eV0\T[4n)lkp=]^#8ckK2D_og/9bc%Z^`)Dn@B+&QZ_V3Z*V4p6MPIDk<"E:R.O1DrdQ23BJu%X'T?D6\NkVe[lXC7&Dec-Hr4h[
%?0?]g7qY!uGn`imI3M:08K2%QhQPFteZdZIaR%j"U9#a?k?SZOHh:Z*a#=FQUeTRG@0H@4A_=.]Ifsq&(q0G3>om?@H[kbls*@Fi
%IAOBe1WmdTB0Lc"1?Caba#u*]9i@jrE.0bP3)7Qr?kM/D`SfE$<^X`mlsoeR&dt?-\46Y.4"UrE&tH1aGQ.^1#(QF>O51HIs([$D
%]h'l4VC`^.!&^NuQ7bBn'dO%Za8I*fUIGtcrP,ji(ht'MK3iYn;<l`RR4&b26kf;)(SV+1%fSJ]mAM2*$57k0Y?7`E:UU,0LA=9E
%N7.e$%aW\`pC:j(f@u)<Mll^$L$G-gj+e#uiSJ>'KE&UXTW42ORg)L87d2J:Ydb=L,jIET&K<j4eF?Yn`CZrVQY9tqm(DE8UtB@n
%ql_9&Ih.cbNMLoVks/*3r$N4lUqu\g'>ijb_W(=^@KCm)KAa#\;RbIre0[HYrDjP:C_pN"6&-'pVPhrD#2ecSS/_.Y?I-l*jnA6%
%'0tI,5a&UWQ.!nhj0iH.(A>USopd&#HM*WVd!tfaHL*3='>V8:fH\15^UK,FG%""HbW[3IaehATKpgu6J0,H1,n`&8NQ-8@3GNZW
%W7VH<4$0Reai/6q?HhV''4X82@$FJ@5:J]4"pF1uM-*8"lkIWR=oErk"TNd&GKMs/P)AC2]n[rUD^q%:Kj)PEl8CF;<<OZ7@4S\=
%$JSu:'6EArLahna6)Ie$;Q"]7eueZ;"oFr^QX[":e0qcJR=80-"CAOl89QhJjmqn?[:9#LQm^Y57VB5<Z!)uD`\It9LiThbMtDjD
%U8>6nYfUfqo%d%cZWCse_H,b_4na(Ohs0SS!mt2Vrk6t@ms"(h^"$j7QGM-j@X)o6a)]1O,GR#r?<k9#D:9TaeVnXaE7CXUXPflh
%`gJ*h/s-<I^\'b6*/+?61@+$oVg)1?<]WJA>M$cQda2%"IaTg>KULXcZeHH4\6)6+8H[4H$Wj-<%@&]r;%KUa4om21mW:P8DPr75
%VR=WSfPX[#0s\D&JFT0K"$;Lp,BHn(Pg11(f1E$j>P=Gu'q2ni#mo6-#?2la3Wj0T%bmo]HK?l/H@9<R,BMXMeJ:rCr>q7coZ9t8
%>3%3C,A<'ddu4jnp`?l4#g9Y0pnC`i1hfs/1B/ML4J=o+T/_:<hn*;)A[a^cn)73^m,8uoYP!B+I0"FbB<]`J?TSH0/Xdfn??M1!
%`QVBX4fhtoCr0kn;@bSN:9/Bc;ldnA]fSXUOh=[h:?CIA7;)G@NGc-BOo66Q"Ta7)9p?"oJ[f*,U7\&Y)hb<+Yh?.eq\1d[og,>j
%s)ulq)70qJ_s4R;LK:k6-l&cohJM\BCeaPJ'9L,_Amq?Nr:^;<c'UP3NN6mH`0\#fhb/r03@lPZ41"F^d2Djf`T>5<mXAd24L-e"
%,e8+UWqOIWG+dSU+/?*_Us&74K3ZaG)'.h5/O^k(Tl8C3Hu0kbLp8*b7b$sI^Eu]88X+rsWugM\Po$LO$bEal.a93$$tlp00<[f,
%eS9jK5$>R4NKLTZbW;M;@aP@]Ec=YF]Q(;]5Ak"@`:c!;DDk]ZM>NjM.Wd/`!Em@0JWmFaLq&6;`Z8UI<k2UScN/N:V@Xd^m?BCs
%5;Ip.ah%80qs]sF!IJU(o[<4q`qLBR6kYTk(G"MR&O!Y*d?1H2>cgjeJ*!eQY0f;PS\K.".1.1J@r+*<>L=DW_N*O"><_dr<_G[&
%TbcllWjg:X.<Xp;U!tk)&rH4UG*_GY[s_#L,Das03gEm.juM`kY'4pJl6(6_412[j]tIQ?PI5J^6%tfXjer5M4`AU4>Wk1u6Kt-"
%X44(lpd"8[:/qI]UtAmq1)WnY]U'VH_O*AUlipC]*k%h]4d.DQm@S!.`5kR9"H2N7ePhMuZdcL`8,GCSE0##uOu+8i_fDSXMj^!*
%`lK(pn,f1.WD;C8ek>05#OYTnf,LLaj[cig"`gRXQQe63Mp5]oZR1F2@@3ILiSSKq4ND8q^2LFua-@]URE:YSU'W>5,BFuY-#m&8
%fHI;gQoCPBrcY1X.2:?V(MHWefDT0g32^]$%.I6^kuZ7`?T>&nV;F(sJOi^=C1NHg#WNm1!g@tSH=H,d[48jo0kGLAEg?V:9=n;+
%2Y>PtMj3=B^I0$<*4@@Fom"7sM8FSicB4-_SNA1mN"bTh*K0<[8uG]P:Tg@oFD;83S)\TLM-;Z-3f'l-[p4%Bq28cWQHh957?prq
%5q63J!pY&)ZLYBMqG6!=9'jRN`<j9,aMbI.C9a2Df[(Yb1CmU2L3<8VkHgANA*0[K5'*Tb8B^3kN!dTLDUG"22PIQXl!/$`^iu`=
%)1>As<\4.768J^apo)h[T?I0rX+g?5@TbG4].Yg8FD_QA[MO'.O;@9:rj?5$X?Er]'YXAo:XM2:neBmb<h<uG%;`E+%`r'j\,8?`
%(8J+e3c<Hnj`i]$C(MZX$V5q%XKXKk4nV1I6`*@h6o&cG/?.r,.No"394V.;eB^qY-ip$"%%onp:UD%Z:spM_G5IfOffkP.>H.>V
%>iFB)g$"r\"#9,5YFL[MB*L^Z^"A%f&'aNCrX#X;@I#m(%4f!=0jGGX!2qjQTu0R#cB1D@ocoGJ)T?%.4)c#Cq5b_B\Y_`UHNPG4
%G\iWA9&+RJN<D[O#OV2/S6!3cD&(7@<LI=0X95rLF>jc!QER_.'?[fF.h7i*Ho6$&Jm_L14\P6b2EfbS3@GXJNq>sT*U/&fnAo5k
%i"J=0)BqMRr^Xl<__L3MHI!H)R6XWGITC<081&G*r]nD4S+X)rEgXmdf7*7:\4nl)Kb0FiMJ4ZD<h`UTpX_;^IA]=\.<B8%4o<@H
%rJu$CD]_,E.__C%DVa3lY-,.'ekR#WlF3@'gmXj\YZ<48g3;B)cdpo6M^u!'52N`?/8kFZ@!ea#/U8<$k-fb8g%HH(BG\Au:?IPJ
%.ncLU%p,([S*cL7$Zglr=]sIieV\Z9n#W*CHaU8eCkqn'Pt-m.Kj=&^aiI^kjnCU*=4k$lk^@^0.=D*$C4F=MkA-'Z2XS"q3qq:?
%e(lG)GMfQPXZgu&dhIh%k=:B(h=ZA0n'.noJ)q3lEc8tD)Xk01Bk@*Vj3u.[4'.n%bhq`(bWII!dkhK:NA$&Kh88][\)(kBV>>*"
%GkJGMG3XKP!tb9K^JIg4hc?&84Er@YdA#B2T2.X0kcam@$Cg/%>H:p,leVJfp.em/nZH!^dPSelRCUalaa#bMG%r*O/a)S*pZGRa
%c@;6d=aTXa@kI%2I/N.&S^XE5WHa04.Wapr>Gj6a1)>aRX)dsX@cd4QnnRjSP6]dlggAn8f)GVdfYHjrddpCqVK%sZHs4YD9+PcY
%O1(Aj]\6_R.\=,r5.:$ad\`Hp>?&9Z982Qr2Zu/060Q"iN:LFhD4sKk<ni[IZLd$ie_@4J*o:hk>?T]c^@QMr5&bJ;Ts4@?^%9l\
%COD^XIT-6UBHH"*`8a%ahkMbdFs#QA>!BN9h,e`LlLF/mXII`CqPLo:W)%WG$Oar8q]!$,5.!#'M]Y.S.,9NR0og-igAI#B`uE4u
%YN<7Z0;SX%r;%3Ic$XGI&d?$+jrQ`nT/R-R:*/YNhEG+L.XumBRBbFL0o`ZKl9s)tYLVgL-%+u26-VOG6a+l!2WrY+iK1l]#hr-k
%pOi@NPWpRDSLY[5]_JpA/3^SUl5mWf($se(pH$'q[^o[&hQM<2q=\OmKVhn[h]EgF5X2d?&*o!cm`hd10#+_iq"j]'Xn("J=?<V@
%45!^tI]*O,O2#qr?FeIUd,4k(H]d4=HMCsE0O&uLd"u-^/-$=H1iok_T"HM$P:\q@rSkuJ60EFji-D4^]"'!B`ZPj:j'CtO1t4^/
%d*<Q4GH?9Bh`ER-/3bR#)h4tl9F&aJQ8].=,7iu#<ZAm<@=/Lc2icZ!)+$M_:>9'/'6Y#oeaoo@q8;BQl"54D\b'HCk4h@tD_)uX
%0PBj'?C$ib6H&9Z"l[JFrT<J#WOmA_5.?g3kgM'P_>=EES,N"8#^(j2X*1*nG@u*djE/*&/X9Z2jh22egL3525-)C8)#X*Vp$DTR
%OG&qX/:=]le)V%JbB"qF*X@DLXnQI"lfG:SIS\jJa2C++VI;Zr[n"Q<Zb%s(>@#r23$6ATa%sJ.!_e)Z['.pJ`d5Jk<o*,f)jWWI
%p$BpccWXHGdX8S$[8X61<pOZBq1I.?GA3!PF1hUClgp+&k/RA$pG'F,I/8@WqfI><S_H3UU3!b^r8<u9lYW/L86gZ9mTCg_BndFr
%%]kYTP=P'an%TQsm*iH>fCqo)_1).MHNtXnrmtn.RAF+p04:5tLW4CFH1c!N=kQo+Wb,_7rkmU1@N6qp>@O=2)+WNUR7H/kp,11C
%Y9<%sNd!et%/37Qpg<0L2VZ7t^Ird@<Rn4#bjU%,^8?Ahnm>F`T<74RbEk.5&%:o0WXmq'r-nCUmf1G#+k*Bd[aHWWhA;Eq)0Op:
%nroWP]'$aThD(UG5->_UAnpZ(?fb;JKdu9IYNP?r"n^EYa4+-pM79IJ<W3'K`4HfXQS2rGetOh4dU0>sY'd$0O(OK)A@1J'om<u7
%Isin>(YuX$Vs,cE^#B.a1pt3i(pW2s^3G*-0'ME<R]ngoKbhMRaA."O/8KEO?eY-c]J#i\T+=;g\*2dR\!AmnBKXtma!\.<T6GIE
%WRpG`oNr^3EG4q@1S7_m5VBg/!C9!IiPE]NPgB.hE&#T[[Z^0-=_%qLU-FW_lY-JT>,q#jnSn]3!Jj:]r]c*MR!^U\kT\%6-4O.'
%&+WdYV#GMpT:cY5bo$"2LGh?Og5>@":G8L4iZEE6,^@FS)&NrR@_5+m7(>"'`-/7kfE^."`p"^2@;h+@ji"Z/2Z3+8^oSAKApsDU
%pnj+X6.?8:0Vn=g?mN"9k"L.,5)>CPch1;u"s#<(mL+l+U&IeF(Se>YpA5p<5G"tT'JV@HoS*N_bgVr-f%l2^i[nR`ZI]>2%GHIG
%o*92?e2LDLKEpQC*1LsH&`i8R4\rLE^21Pkgpm#2#IS/s7uMh,!G(Y^4]==EH$e`Ia]dftiQ?K2m+Zs9D)!!Il0OFSGN-'PgfnrG
%i2mH74M91\8TsfafS$l+Z[_Y5hLIh&gf\po?m\u;mI#BN]Qis`285p;__Ai,0C5e,Ir6:C\?2p`eDN0)lrksS1oc>Sfe4;(iEmC=
%c[I-0ohBM@1k2a6lHYmPQtr[%O%p&@_t@YjPD]mKkM;dA)f;/EjmU.#]=;E<r[SuHTXrN1(:.jgJ9No"Q>J0hn,8Nl_I,Wk/an)^
%2pP&'c\2h,J*FVAn6@/YYXbWpCebu9!>#"t=l4l%X1?e;NJH-[cEu9smeJ>:\:%3HLUqJc#Q*8<a7\f&_M_Fg!R3<F[/+P!j29DK
%pHE`P<&U=4<F,a*iiWVes'tdlY-@`P/+t+k`rj-+.*1#4H#K]e#PjqB08StO9nc(6.iIMk#Y6&Lm_^(f4C,)#-Qh##TP=8j_<=e7
%S\ij^HQhq4X(?rK9(^__k@sP];%Ur'fe3TNh&>=k/3hLuk%T:Z\hZdJT6sS6]dGo(b3N8_G%V=,L'4\9qh!aVq;L\cg?DtR(2:aC
%LCji?b0brbO92IqgN2GSllOnE7TkE%n9O]NHuuFh6]^Ah`H&(q!*.>M4DB"^@sS$V>]1<pj7B1(G;e%<?*L5P0<"\5?h8IX55JT"
%lhThHh3D8ep3l>)?>B65^&4ptqetDU7mFZbC2#@\mMk"cpLr12C?DNlgH/hZB^1C:LM$S:;q!Qdb1p*5[8()`Mq`0Bn-ht0PGKpO
%!8!1i?u7\XpeGo'frEk62:VQip8n?XI/KKFQ<n*K59/>5Eg=:^C[:RBXkV0oD*4>Z[n1\T,mS+t>UO[%\$9p4Hg;Am[8rTS51`lm
%^7)[KGWN<@+`/'DATEjRlB+o`ZY\TGlerXSBqockC]1M[m;_^4B^+1%FS#60-$%5l,#5TCEQ[n+349I(0mS\:j0_Lkic=f;qiQhp
%ol"V56`,YD`5[4JMj/M*`g1q^p7f]8(6sC8-)A?CqqY$H`HtT#>X!K(Z<Sg0K)(3*B5Wnps26=e4hDr].GMB*3%"_/M71*Gj=H$m
%mY;][cZU+*X1:A^KC7@E(85GQcBka5:[<e.msV"nTA3WG[eb9HVnu2Ue42:H]mGfj&Ssc=SZEnbI&IHW2CuU-ZAYndpso`[..?PH
%F+7#Y936&b=qB4Lmi3@2`NfX"F$.'@RPXrcgG?Yr&qt7PYn-L)et&)f-a2tT2J\S=X3R2Y\brL`]-mEfK=MH\c+U$I][\f<DT*&%
%;)"%H$C`-H*l8!3j";UXQhQ]0miU?"]>&?1kPk@q0nF/KlJJ-c4J/%4@?[TB"k^II\T^N-&_p\R^:Sl`0WRo_Fg&JBpWu'`lT=%*
%H+<]rjiuUVV`48aU&!c8gY(;2;n2*4jK\m&4h,'>IXJ`.a69L-NpCS44[*2R4F"8.[bcC\U[\99_kbNdoQ0/.R\`f>O+3_Plchfc
%ASGjkW68*6H1m3WDMp/DQ7D4lN=UobUndMXcGlc[[EcYpkkDJ4Cdr+&:7H@Kp8OE<:Y^.if3YVnGqqc1qWsu"lQ_hIht@?)/)OfJ
%UE7S!&VT&9/.J5D,iBh9N;CD6+)QCP[TobK3IM!4,P(Gs>D;,909*B^mCNkU\%S!/5Mg3%&JF+.[("L421t;V"dRtJ>^s#a[+^J.
%ja(de1FoSDd"R-Zaa9Z&0+5h:Q\G)C@H[V$8;"+J#7"cII"%]+SF/KBcj!(=B1;>Ts6;80QM"cE7OjH@\Q0?."D@Q'K=i#eYs!A7
%3.BD4Oqt$jfDFp[``iAjai<&WakjA9O47c*=?+JOGKE)I](4ukZad8FkercSEr"#JQ,U5kabntl*HEPa@@D=[p*&ISBPI2tm9[d2
%)]WGbBm%$GpXjih%/T,@LSa`.Cfr#@f@pT$^EOTlH@P&$nNf)lpga&D[uf>pB3,jUIQ`Tlmdsikmd6#1RQe=Ina3fuM5,mW)X5-?
%'Ki<HS;*ZN7,SRB3(0A*F:6DY\(cW4UQ+s.ft6ub'1KY8[T_F2m#2S%X4sGqc9AH5[A7D*kh5^OL-&Kc*$;Q/+#K!n0im(GJ,8a.
%hSuZ6/$1n*4,)]a/!iN1!U8!q=W@pbgK6Od@eJD&no%njGR32al*YO*h:INm3bP@EViU;#A9S0Z6uGY95.#[s/oAgKQJ]O[r<q'5
%>p3JP$qI$RfCol(a$eLrR9AE]/\NH?l06gtN`rj3)h2n:ZM_4X-dIs=F[U_E(LhnOg@HEAa04n']T[d6$6hh`9Z+PgWLl,nK1%#.
%HXj+j??5<fFZ)1J!3ZWQDh!+dnF1lchoHncN1#Ens2#j:`XE_b`l[66S41$^i;TiX/3?,q)E6[nTGP'r3lK;Kot4]sfm#r]ou1#d
%]l,obQ"S?[;<R`Z$p@[jl08)1.N^lE-HFo:k9$;9!(:Scdq[E;\]^S!4qMjV1>tC_6?MQGAri9_]tMEq(#.&HNR_dOq.7XnO&9(S
%Pom+M)9WQMp:VNqPooSI@Ych"4#lR]np?@u:18V7><+I3cFU]#&*Ot(k5K\k[eknDSQi4UFarl5YQaUbg"mLVdn@`hqtJ4Es6B;P
%U]d`+S)j<iNY.:cc7q/AhQG2l4I@?1Ia4P:n*r=+j,:N+ogUQJC7;"YqqICtlGdYq5T_%aIlmgbQbTZ9>S"QQJsgu@rXe]*,t',(
%ok<L<m!Et20,H*^(72G2)thoEX=h".0\u#Op[2QTmltZ5E0-[IR!G9OZ_h'\g.UDar>P'LD`0fPj)6e503LV+.><DKZ^^]MRO9g!
%_;b4,X5Yoj!ZT/-EAq\C$f]1D_F!UIhAJ+J%\as#<3T0<q#8:QapA[WIeTL_0c@Ui))EPr-#=5(]f!o&=l.Hmc`[mt:*.skVI:BK
%06M1Tk5B,a2G?P`Lr`+Oe\bDaXB]r+]`.QCpR\HL><Ddc^'tnFp<)qVlZ;%(Mri^,F6DN.@&IiUn#roGI<nU'WV:/Q0^$398EbO_
%,;jl(bjSQ&[f[hbphlokqsJXd`H-s9s3>@88\.A_!4s>cK>VRI@CuJ"CQAfMNdH+u^AD!NIJiKk3k7fm^MPN?PVc82A5uE!7H-n^
%['oZgG43a?>4HJH3#R9JnnHA'0/o2*W]0BqcLrKWMrf!D@*pMhgg.$oe\T^Y+5YNS2kAKJr(jo:r-[#Mq!tD2M@>LMlo\kFo*7/u
%,E?_qlNdheNYf!>$2^o=o(AcAG#-Bm%/JSXYuZhFD%)C#L@!X??%V&4HR.TWFo/pg8pd$lGjQOD_&&WDI,1OAfA7!j3<A@tDb4S!
%NHX/\IbBY`;AifA&!d_5%kA$ajn\X(<qH=g-H<Z)_/>WUHZmgskXPp,VVaGf=KA:rcAQ<pG<L3^8=0KpH?G^!7JLl%ppT]-0(-UQ
%f6\J&6)1abq;(:NP!.Lm$2qWKYBN0Ze\Yp6j0,_?Dp3Bj)XA\nelgh#SZR/0bu\uQYRcMo?]cqE^%$WOqX0.3m!JbCeUD:F@jFnH
%4F`MY.'t)-hd."h4<b;^L:j^$2)o#_P_Y=82b/d=Ns_L/n*e39XZ$g's.k9^j2S<0XduVZZ\?Zhg=mc,^bB-oF_>4H`MsI(m!b=?
%`'?!f6$IZ2U&lFe=[+rLGPYch@-S7V-D$J_dN&Ki4p2jS@8GT4b(K5P`V&5WYOhSdP?YX<?Y2Ki@#D]+cYjgCr<5ZC++@PMgj-?k
%0"u[\7(Waa[-^BeVrbp>!s)l`J$UuL?h$+j]6NL;WiRKo31O41SdUAOk2qMe%bg6Fa3SFtfCtbYK@fE2mfk.XiCVMPSfsu'qj]l1
%/Tn;?s*NPI^GBjE1pbY!6=2fQi8P]TZM\;uDH<fDc>%:)1-]if-Rhh&/(uRk*56<GS:#[&d3V#Q&E3e_m!0/CGn@`r3;0u_mSQ(4
%Cc(FJ4f%85F"]3C@Z<%X<>+US%/%Bnb.HoJkK["CZtTJJX;",ZF<dIC,.BdG0Kssn]U^o:_aWD5qJ#4J.eWE%Bgh829(,a?3mRsg
%]*@t8B`)/&C4!4R`dBX+cYfL]3VStVDbiVnYnJ1KG&'V@@\nBWRXXnVY1tAY0"0%8P%r,b/P[d3X>T;)JX\N,0!.Mt*OI:R9_1/k
%anXZi&<8@F31BrHY;2ojN8QqX3q!\_%oC6/E:`u81/V*s?>T8H]`+k1e:FU;n(<\V@)"Zh)C\R#GM\'ED^s`'WQ.3dh+F(q3"=VN
%L87VBEuJZ_jhM;H(DL@sBDt((l^;qd4(tElcTls)nop31`GMJGZ&Kj%X>s#'X+le\OANm2o\XN]DIDBENGbUrV,&''9F)i;=g/;P
%oV>TgB.A'"/e\oSo,4",2aEolPj("Y:asUfprYlW;_?.95>\hcfPD1=8Y),i[rdK2Dq5;DAZn=cbcKtPpiU<$NT:"i.d]p=IYJ3m
%\M6,i`mpndV4!FgSqN85Obje)Agt&IE7J^)Ca$dGCkh+ZhAdfeJNI"EQOr]]"_>qPf^BO?j^Kb=)HJN&dkiJB:n=E=fp/&?&C^eK
%2"?Is,q@t$?W)d4]A9DE8uJd\/aNkKOZNu.f=6-_kDQ/U1^&Z4^Dj;](^=GN/I"F6=$5\/cnQ!3nPuL\Yhlq/4n0[OL45IN.kuHd
%-XPVd"0`<I:#+RL+#Uc>TPROB*kK]lq&-5@80Ml:M>/R@Q/3ggb@*IbiKGq*-#:T/aA1Nk/s)=Wb9ZqE6-;%)E*&2[1kONS^E20K
%>0>38NnfW;QWfBD@V;b:,O>_044S4uShNX0;$ppb]f57';K""d^l++Q?&fKnk.pe'3/#dSdG^015"LE<C3-2SnohSBVGT)N`"]O@
%f#:<c.lO6j>pYG0/#$rM#-RWha%-qjK@^[p*c0&cRH`I&1(`kr2l,@#(!64^"3'q'*T,M]-:9G$gr#U$\5N'6ls1-6)L3VTH;I(B
%b`!?K9ZP!L(`<R<>=X2B0ghOJk==[1d]1T)[d*46':>!K+hukbOBX=Z*6JNGcl7c4"oUL:?gT#n;W1,OhYhl]dT!TVTr%^9>!XIK
%@d+;TqnU@R(<E*g`]m,,bcsssUje[8$BpD1f$KQZg6*VgjN$+!d;R'Trim2b'SbR&pe"1'a:,jVR6Etj%^SeNnkpn&o)DQSZO`t(
%jXD!*b8I2=]+2SfK]d@EDN=&Y[\`K+d:IlBqGtm#*&!M`kV(+54b1uigmmJ0(0]Oaj!cKg)-5%*I$:!#4OiEd"&3sa[>AZlJ,[i6
%[1,'m!lrHN[\#?\f;9nVj;c561<KuFG+cKM'7HoD3u8$k)X(kq*7p"8PXS;!NU$ht@U"MM2>YhsC&'BY2&/idm#5Yi3R9Q;#AI!J
%!uXiVs2%+)+D:IA8HWnI1\I\!XZbNOfJt0Q5(D.![/rV;+@+Sd+O^M$m$qo2`;?<;?"<_(-Bs;hk[W]YGkf@Q*<\"o0ETkg(Q`[?
%!Ajo%(4cL9"@0TD3*3Hkb9fXM(L)g,>(N)_Cl=TkW*E_u8sZ?%bDh(Mf0gQ8)&^7U^Hg`%9r;X:@lA)5.d-XL3dMiA$Ya;&(RAd1
%ai\n-%,7\2?5%!;dCtimX'6Uo]lE]b7R1qW\&9\uf4Z+r$f<+JVq$'G8j]PKZ\Z96&<B18CY8]Z13:V21N@C13Rb>$9EKl?BlIf"
%YrKObjg\>6N1'9r^rO>n1i7n=;`Sa2\4g;3g0guD^]ZhAK9-5[-(m2Z$qBJ-JZ=laP6Aj%:a]]tJaJYS6]r-T&2sn^.9Ut&K[/0c
%r#TB\Ai&o4C&q)N\!8_"?H4`be1A"5+&[rOJ2nN4p2LU^H`k5k%$SbcrdmD4^SrlJ5jS/m!\^!)dg&L1JnuQ\#BG#/I&l%-i5q9Y
%_ol0`Um"5/FpX?ZI@ru]fj;rHbsJ%cpp</fVrJ@)>l?*GAm(M=25+m2N!]VQU^,ZgPPZCuO:$Ae+#%@?.UAB/.WA1c#42eGXE(ad
%b5,A4Bo\V`%oc*L&hs#J;@k;AGu\8*RcZ.?gN<KUVE(*s%e+=sF"ENO!;3fY]dh)/O&9c8:/$jZm?*LnVSE3<84eoqk&4rJ_j#GG
%Q/jR@G$;Q]0U(Ga/I+p7q(61,Dud%Z7XRO-/`.1rgC/J]c7)2HAL\T$?eV/u(_A1<=h]_eR!-b#UreLHSF<+J&a3p\]O9k]_?s.r
%1cWY>-Mf1\IHG8gDi<aG/'VH',Tcn;K+kU7F>?0ZWDo!g35iE+(n^7.R1T]V6<#'QX?>JZLbD2HiC?OSR7Wc6]eVlH^lW8GRf\,I
%IA0),D)malU]:H,*)0/[$&eZS5X(#*&n08sal#IU&s][:a[0`F!>5$LFL2;a5RkZ$jTM51Jl=o7bF1Ul]eO^18Uq_5Ahqk1(gaq3
%3J_B_[nKN'"s5?=S&93!^dJ?p*k9H.<1>5.>%,G]KO$jmA-!UA=48F,oUSYWr)-(_0#+2Q9]H=.DFfr%r1kO]%g;^:UJ0SZR`>aJ
%rW)BQbk@[]TPZ)]`4H'G=d*]le5$q.FZ"Dk@1CqbAi/8K>Z"?>'V"4n!\S8f+QqFTac'UG$s@<h6d91SZ$kSVoFcm(Nq!!4%nP^:
%bFlrZ.X4u2G19n\So4$'Qbj][Uor.(o>jPY&r*)UF]X`J2@GWICStlpqSE=X&@;M9%GF#S%UKM0d==]<h8`^<;uhtj8s=%pCbQ0*
%L=RhjnF3oa`\CX[0<eO_8)&!iGZ9bg^(t?R=ja,ZfR8iM^`plS>jb,kj>$-DP2i:!#o^tXj]b7H(Ikb6T1,(K$^53\/4P<uX`)D:
%CkH7\J*KBNb0E*g)M2-`W4<#&6N&YTWJMpkjq#KC[)@&gH4cYuem=`\o7^(uNEm!'D>UT2G"&-p,UigiA9JO;)C@^.8tY;:`sbfe
%8M\VM"U.q.o-NtppDO-6om3nsm7XHJ!L08d:[9=j_j\rSK$1)E,iZotBdN4B',HF+J.T(5TMZmTd1h\'-bTR-l4ccj:glVF*S=!E
%gsX"/PSo8_Esu.I-Ahr3<YL5M;bMe,al]fmQ"I@>Mjk!`:(0^?>-\oD7&H9pP7Zlan]gAePN06*[\Xs:P:g\"5d)L77%)\RCF1+/
%R'(gJl((\X)sKa'OkS!!HIQO4>c>bE%QF3t&c#l:m<hXo;pX#>P!SDS7o*hifn#)nR[So^gP\8&9hfC3aS6/N)UK6GDE5;M-HdcG
%(c!,=]HIO$j.-cMF[sK]1C;!?ShC![b5JdV!"jfI)-iJh#;LBe'X*AIG$%^AX0Pi?OtcSS$"sNp@<,L.L(2aR7,@^nS7bj<P*.Z+
%DmIIT6+,K9k+cB?8]G-<';6]F!/q@F)G)R9gb3X!E?nIU"<^hQVU'Vmhil8?p*.SdULAOe^VVd^c/AnfHtmndal]Y?U<Y'#$`;dL
%=Kc3,\MT!,=PV.WCs5/YM%<q2n:kH<V:iRs8!E4=qLmF61@N,4nEobJjQmNT=OIP7JLR/6*Q&E+g?7Z(>)9-l[ufrfbF*/VK"D$+
%L,*2lP`lV3Q7^O<e1/QJP9Fj*[OoY=1:5Z/+F@u#ap(fT3\"4SG7qBXW.<-]^gaJLYRO:R(9gn'L,66#M/T^4U]"$;4^.'.:fSD=
%H6bt9Abf*>C(=B^6CgqrDBqe>=kr)l>*:Ah!,p!O1qbYeNX@8^n@0QC)d9!3^+$G7mLqN>J^NM)a,JLqgP@E.r('Yp5p2bLj0<Y*
%$02=@qUTc%BZV=]G%)lKd7kt[@`!;<WObaidU()jrAX_.6Sd8Ij$`SSNFRl=Fi_aJ?q%q-->XjB%ROd6S#FU*'aNQKLU3X3-?kIU
%=DXUAaabPCB)do[LrG*.H"(U8_tC5R#R;46[N`^YkRo'\AfBWq(s2;(D_N5H3FDWF,kP?[L?SdN\q?YO_NF3`KRKZd]RD>F0Y5Js
%//&E5+s'6J91qT:`oU43*fP;p)!uiQ2u?X/#*KT#0pimcNl%Q"+^eIn8&2!MU.G!2/Q.:7!,@4ACMV\P7]_aZeg*-=&2fXb6hJ]N
%Jl"bG8b6+2@6O=l*NSYB>HW5#e4T^jiPO@pFu%u8P!UB0)luREi&CqaFb3:0S4G%c=h;,M,6r+S"WNr5?1K6CEX=P;"JMC(OJM[1
%V=Uc8S:$X!E9Ucu_C]h2h"r3/GW1:X>If.eLqiQ^i]tGP"kj!^"hq#hFp"EA5Z<S2P(g=r;MP6JHdK42l,1F_G^@*P5*f\GR*]N,
%.16V2(r5#Ahud9n:l>l-RR@f&pdrtc(T^0aRbDr$Vo1EHbs6hhAQ;E6.#U5lg:eL+kcP)Y&QI`+<7:38Mg1]6mOJT2C^D-<!:_2u
%LW$qjL@16B,_:qE#rr18r#4H/bAjlk#'.*toOc!bZSYE>\5m8M4P'"t;ZdE=%D<a$BF0?h=?T^'6l_ePOc:,H>[bL4%G%b>>T?Cn
%$"+r@_/s7FRNMaNQ%6_!emN6%U:2]W.*tVW87E$+;W@Ncf*NZEPR"?=G#:.:D@XO2E\p*N',a9BX$&CCMa&%KA<@&n.EM``\;D-P
%i?fA,$?MKoBIC^)6n!tILO^U#)3\;91Q'mpAo8ke9!RJEHOCNBfp8_niqO)>@0%;d0JSrl?.eW8r[lj80UJ[SU^SeV?Yn)6`(:O?
%=JTN6_Y)kP0`4U]k5i2N.$k'*^1h9$3IjoAdS%4XD1k5jW^&ni"A-e`,*JVb);;q6J:'bVq+-O*!G)77UI:Baki"4Sm0M0ujlR+f
%C*GN?f89jYJQ#"\@t1#<R"E\Cj1j)3b0nh0V,lL4XV!]g+GQ1P7U.'1Cq-h8\)b&QW)i_3UdFI!_e>/2A-fGR+pR^O&kF6dJa:C?
%I9&LH_E`e&BR,E`Ch\kT&I,<J64_f%A(/IG\R7[e'$52KK0SJ($*>F'nJDQd(/tCSYZOWL@`-f/_<cuqCs[W)58)SV/[Cekb_MB=
%Rci=lE(r`I\-\=aS(Lcne&n'oN'u=ZUqq;DN,9'NZN)r;1P)#*o3<e66AG1lI?o8bj<DcC`!;3Ir\k(+1sB6F;@SJBYp!U;?6kIP
%J>)&?KKM6#_4%$#X"OrJA5&$U8#jQ$Hnbh!G&7P!^/A,b&K05]DWOeR-6)&[6I]1QKJkKf8X2TeQMZ"q0E`(6R>=I?hsS[)2YCd@
%b4%jnJ/F!tZ#DUO#`\1<$5mn9K[?Z"WGsSi'deGr@Og0uZ9(@>[7jfR2P3a<8TZ6PMF%\/XLa3S`Po&h*/QmGn1dW\+-P\'j6T;#
%GrbLG`"IUW0q<9Z+=P/HcPq[mC%OPE>A<bh<ao?qBh]R1?D%QQ\33-r/9!b[%EJl^^@_m\d`d`3+E;9$8r-r'L9RL$5JqP"n,jh>
%Ou1mc!q]Tt6N<O$-#<tRDqR77fJ(U>ckK%i?`[6cW>lLTctR*1`B@)9hEA;:qFf")$Z::m]j),&\Kp^*GcVNW+h3H4N4"f<,ZLeN
%;9csT7'_tS"hd#8BXW*!24u/`J0P8*@ndGnC_`.=(;$]1aZ\oD,Mcpf/eWHIO[pEgAI5,I*K+7<VXC+TD##d.p[n#q)UD='GI=mL
%"'Yo^i+@J<I/*@u/#V#J6QsF(JF:6?B"&/.Wo=\=,!Zo7pg:XW>(SPJ51<J'8Z[[</j'8)/@7_l':k9dPmECJ[YSOYhVr<I'9p)m
%8hP^HoG&Fo'Co48[<X_VaXRrV1QKac9SP>I1,-gF%Tq72f?dr3K`EK:E90=j6"h^c&]gI%iJ:8]R?pWYSC]fLer*!*#Q?^Fa3c9[
%5nm);@!%?F2MEkq#14$;JkWUd*)Jh`%SIVW1)VA$_nUhI;`5`?+e=0P":G;8Z(UK!U,'W/ChY.nP,&Ipene(]Wh_?p3PoDN$/"1_
%_3up0A*#h.A&HNDSVM:o*mTIc20$e+4$4Jk6r-BhP:<2=?F"Jm"9CTF9kuSJYs^?fFM"OC7".=-,3":YI:eunC(f&Ami=ZDqd@62
%`Mo+(=-LscK4d^"G&ZA-930J6#AjR]l4rZ)X::jt07Zn'g'fOnJcsejb]9uuLlZ&=0WJOT.h#l:*I)/Q<q0U:-=O_>O#_\:6Gfg]
%TIub1/1o3/W1cPB'^7;bnf`,j%Mt4^5iD1N,>j#c/Hk/HW>_'V)ls4a9BK>9YCnjn:8U#*+si;#'/LXB&j%n_4?#X&JFa_EbMd$p
%EK=s)YdgW=^rN6Wr$en\iJ8J)B(`QV:o7iERllfAQruO!`A(3fXb4]J*D!5^e-W542ZtZ#kRm$eER*c->#O<%#eQqa^jm>SHm$[K
%o=(U?HW-fo%uQm)a+U0V)OG*X@1Jr"4pFJ5?rLN<;G'-3!JhN;eXmJ^#!t)Z/J/5AW.r>XTMGk[8Bp_D(Z]9^*!ee\Onl,K![l>f
%7R2cdOABt498jZ_<^O+3j!LKiO7A#W"(-Ea?qUnFKrfj@[94J1!K/.*$G"B@1i]H9oD5]HG[?'5Pa7L%rQsObQ7p]*SBZ`-ffWig
%ZpZAF.G/c,K9W6U%AgQZ]</^Pn/'$#iaWT:e_9"1QWm4LGV.&A]2FjR04;a=Ym*oA!K1&jA-I"^9sfU1'2QukmK^Z6R0<@j'1_k3
%P*?/%`A$D0*Y_;HFCd>JDHJ#dBK$KS<(O-##^E(br*IYWPFB='-5%^#:,->T4ti">SUrYs&@#[RAs0CkPsC5:_cH=WEOAO3N(e:Q
%)TdT!YY^#U8rr4g>GA2G*3\j8\CHcG'1j&dn",I`a,Q!)kYg0AHKRUL&L(Ass%7M\pr<s^,f0^=5\cJ-8j6<!XfdRe2db_iJ;nE8
%AO`='(dTEj:UkZGd#7]?17AF=Co/]90V#ac^gJUu;H$a$87W!HNfrroHlF>!K&"@C+#VG44NT;<NZJi[LL2'DF<kfT40sL\dERQm
%^Wb@t2p'!mDW]#6(0#4/p9P$[g4I_3BOR6_>BmKZ-Ln)edIm$1Fua$,Z'HZ1+?"#bV!S<><5T_&gFtNj]W",6YI2-\hJg/6$u]1>
%aG[LFJC5*H.+k[_\/b8\X<27(d?#q;f]6`6*c0r:>^SM5&uLD`Sl[l8D^B?ecnWmZ>&:]t;gdGNCN"dOE3X6gmC,S\5BUe=,j-5r
%5#RHc]S>Aib^r(XLjb+;C_GPYk723o')@,;-IfO,q08qcQ'8"`'alIG26,S9>@15@U_HR%%CW[=<Z%isB3;Ft#+KjDrjL_,7Z*Cd
%%gW&IfE:a1-AHntJ\@*BD<Tpkp7(=u=2=,EO=[]"^/Q$!g0.u<k8Jdkc5bmO&DDdZ%ga8$g55$31hoI@#Ph:^>Q,DkUn$S$N.lf6
%$VIZ5LRUhZ3F\FC`Njj+epu:h7#O%@""ikc%=Z?[=$8_kDE&3u7/4Qe6,6uP'.H[87cpc9[ZORLXup-FS8HN1Y%1Q6L_?;45%]QR
%N+G&ej18r!TZnqGlso!NMYDq6)]m8rCc`4i(HXjJ@CQH9CJmtqOTVBj"Y,'+gU;KQfu28aZ-2,)IKRmXja95B#]%`;h;"rcPbQ2m
%A6#$BU`bM7ECA^fl9`uGctEJ,O6f%6KNX(LG3'jj7d*^UcNrJVOEV<R5V-'CXb2]\F1:%Y%$`!'TeV-(ips7ur?<7pJNcM4%W*E?
%epX)(hnsALYZ8bpCiDB@l]V[O*%11a9Sc`mAnsR722`Imp'&O+2W-l)SDqJ]e:r<b%uA[/m`EjuV-a?N?f+S8\&?+mVRO@fM!-S-
%.8@2V]2'0$+=@4Y-4FSn9)eGb6`q^=@_bIAf*FWVM'TPVQl\P/,4ZD'`0'pE0q^Ke?bbJR#/2=,8ANft/lINYni^qhJFcq&J)U%U
%o(hXh10r)a_[@F8Hl/1G%[UUN36i0+%<&[%NL#H2>jRb#/Y03c34`dJdUKiT]>hcG536$.m`=NK",]lFg"f*MTJ;NH"m@A]'6'.e
%TTEU$QRWTT0E`<:1&-:UZQ\Sd*7+hcp`+FtZFBWP`9`oc\-:<!72%]PQ8EU,9&,<%-CRDIM,r_-*A'!>3L7oa%cZEpj@;qA)arS0
%I.G.VaMnk-J3>\Fg!66fX.-J5D]/_[bTrM;7$B#hquRA\b>MS<k!c>IkN2>KDK9ka;FU;09;-p25BSsOPZr.2L0)7VOtl0[J2r=V
%\;YD:'3("/#7MJWB=IPVUG(jsYnhSSk+M?6,C(HDOjj6T'Ht>UYT!d&Ci,cr'$<P1NnT"$*(-f;_s)m>'Q1gJX>ZoS7e4>6Z.1&*
%pXR%;=C/XON$Z:XV]>TrX@eH/ZaU@0UXp!2$b=58%6s\Eco`6.C'BDUfl#<8FH\@]Kpm*gPJ:+Prg*HaTBC/EM%Ap9\C$kE;T5jE
%,"=;6N9n&DNrs>;(JPO`&^I`/@E&GQ:#PDL+cmfu7V#+(=,^R["=?e(7S+h9[^@\c1U:>ZAajPP;^^[H'=gYr@$fdb`''4-.9oDd
%@o:Pg.\PHg:-j[XHa#eEE@;C';K9?tS`mr2*XF0S0f"J8O\on*S15CW3=1Ql=bGtW#Bhq?>;Vm]C%/:`oCKpQOdpg\`JVAdq"1+e
%Mj?$C2(]t*h!f<bbQo5dU0XgTc'Xed@];?f$Xh6j#$[=iL;Ac-=^T>p:5Hh/1VG2<E[`/`FHk&Tb\^->2)nH))Nj'u44JLs4O;92
%Xu22rrg@72`h1'[(?$as;GT;'6X+YiKH'C*[7qYM1?H_46,K@gAE^s;#`asQ"Aqg0hQ`!URXs_JB:%91j>)ul=RU/lSE'3bPEh;H
%bFR,9@&nq7rfTPqmKYN7Hs`=9P80>j8Ss8"DYlI8#6QG\[jC/\#Lh\['NnU#0@So+F9H8N=3Gc/1g+&@W7^,uM?(-5dDABjRJ>3l
%)edl$(>$nk[XK#e.J1$T=u$O-asCA5"0LaJbRHSn"sP@T%NMFPZHpK=K,,iq#`'a8@nYlu@%V4WH+MOL77F^YCCRQd7(q68_JsR6
%;tIKZK6"`BeZQ.U\)V^i63o+cl-DJaKI_#oD/8YF2).S\j)Rg=%csQ5&hsQt&F`6;^l?kmqP0f'LirKqUhOm#;[pkT(_UCF.Z]-7
%OcT,o?T2+[-Uf0fe$??g^m?QG(IrsW+3si#@]%'=>Nga1AD_I'"A65[M;/BU>N<(J?WoQf8Ks!T.Wl`aNi#9@*9E!P@;pf;mLe/6
%,0=F>B@Vjl6;-<RC&2&SB;Zfmj!k<=8=n;0]V-ZB)e>_FYpINEK,g,kA]a<&R?=#8r=Tfq+[is;>6b35H'Tl>TU8i$dVMQS(_Y<A
%aD>>'%Z(FN=HtkCk(A(a`"&8#Hua)rc8H[<()V)F7^C"$al4:@iFXo'^G7Yq&m&eja6u$EYSDuJ$,F(-lYFJYX?"/6.>7&d51^Bg
%.2sIDXj#k?<52g,YN.)8km";.,3I=o0K@?uomm.AQu[.Mb7#%uiEigmA64,nj5@G$*-5F#aPsgJ@^DOrA<#T-h$=jSQ:i.NGpjqB
%q\LDY$1c%uIC/Ju_o7'@?_q3CHDXHEd30im#^/gFI;8if!+4A3l(GHMl*L];^4dNbM"K3i'A-UMA3WAL^+7/tPX*W\_fY.AK3adU
%43:5(7peE#^tEaScGXW.Q)?#<':<_u\S;eG$P'P;,3+[#+:]!ib@)Th?^H7?(/g?kJB3hPdK-+OQ'S*;OqhMZ(GY2i,eG>!Y(e31
%$1/$.l-(F'qO>^V,R6-Ar_N"r'"s-!ekP5o6ocqP/k/9%U?!2sjbM+ZnSZ19qiL#ON:TJm%.%CI4OI2*N1)$1<g#d'$'C[pGYWkg
%)&6)FU25e()jZE"_K5Xcf+?O]b(_W`3hrE]<#d2VXb;eZ873c)Js-c28I,SJRZXArk(lV*1[]>\7,1G+"X_0AU6q*Q_K:`=!(f2^
%M.h#S3:*%!K+0.K3(u$ScVqQdh&P;c4u-C)`1!F5&&Yg[3at'E7Pc;TeN4OtnYQ/4g5!j[(+]tT\@Gk()6K8/Y()IqOq9u%M)6T8
%U_@7i#ncUQkhGQ"e\n9m(6+tNA]YC"9Cm!9a-K8@`,.2'iC+.O"1VQInDuSCU+l6$$PR/%1`-Q/(gOVke#1'S,NUk'q%jc(CnLe&
%n>(Se`S$.(J;D/`h2;r@E8:O$h0`cQ$3O3^b75nVEGCc:h'=i9'SfUt\UITk8G;AZ<8*J)gX3sp0aYL?lb&SG_\^40/(t;OP_=.6
%`D'4:<=*\=qC8jQ$:k1rElH^re7lgdPOi36V2M/]3B;IL7KV*!qN\4%l<&oc?-MXM`j=dJ/688B/gTdIh!78_/a#,=9+H^]52W2V
%V#V13g1F4PcGHt`1V,O-,IpbGmQA(N_!S[QCGeR$2BXY1WM5P"/rG,];E'EE;4Cc`(o^1K`+'!,$U*R=Em4\k8-CaEqP)g0nl(s7
%L2"7H:)OYC%P0Vu`H<4+)RtVW/iXE&?ok7mg+V^O0WP4sHlGftb/BQ?-7rsiHmf0IOfP>6,XhoWLQaCZ.ZWJu:;g)&=B3kn[gLMN
%1hQ#"gp4r%:lC6Zn@(HtLl4e@Y&7gDi*HKj;$+O7CAbRA4rVX1":dBM-6Mt[aRKLuh.X?>bnIK5*-MjTkD@q#-+TVII2#(]CkP;l
%\\8Y5\[_1N]=71k>6K+,M9%C[p>Bt>2FlM4$r&(;&HMi'V>.Bk<*qbnoSmbl9/tg0?R0caa?/Mm0#$-f2?F?k9M=97d\l/<i7_$.
%;Vs779Mol@C9DWQ;08)Hj>]UcCFm.@YnET`NiHJ>7p6m\0s$]nX=nd/3!7uW*.=_YM=fs&A!cXu3kFY`";7=Ei^U:c6/u4tdW^mH
%EH$&dr_eE6pf#Z_1ND.U[)`R;E*dsh$eLbC][&9b1(D0;3EQL'T*k`<]d-`@;irV@P^-^1X_`FE&qq5EP<f86O/od8!bm7_P+!e7
%U1E=_*P>i'2C]NVlA*_SQBUr@P/L"*]qO5[R#+@#eBjHW6O4gFCqP*?`u*@6$O[#ibL7&IkQ4;R'4>f3#ZO;j;LQJl$O5]9\D/,Y
%`J7.I+qf(;S<co(6u;qc">MgN+%0OoAN)GuET*fHpt:2:!Rq;nP*@)6+LcA;4j)j?2bnIudc3AcI"*-t:AH*'"mWou(NrtISl0'U
%+c?DQ*"5nPKQ5+"bMt[K#2c+"mLnP1JU(-B3>4nncts9'7@)3m<ZTtZ"]l8kK8X$L;oUTK<h)Kcarf$5<h5$1kmOLKfrs1Fns(h#
%KA:m35Eg@;8&?UC0P3)tQD?JlFkO"E.P@acBkr5LBI_LC6AlEj[u+?5eCo9p`&GX$Pe$k]&qSG898[alD?T])ZZ5XJ.B-cqfiqlh
%^/gieU<Q;;5h2_8=1Q[4T2?/!e%kqqGDE^EDnK9IW9C3,M]Mq9^i$8_krk\q#k+#$Id"tV(,!)&:,J5l81n=Y><Q\R-lC]c0JDAW
%Tb7rq*`oA"M,#nGmN[;$U;tfnIX>Z4hoYB[AURgtZ":U$a+F;+U5+XGAoTVX6a)-:8+*=9(@s*!`<ndUadRSXb71gA%./ZYJrQg+
%DZle.>ZhHD-4s`r>LeuORO1OE9YTMBg_d!t'9s\[V-IDoCH5Ps,rknXWQU4[CVs\$Qu!*Rq$i,OluDjKR3\T/M49VU,4'7Wf>Ihf
%W?l$>bA7sb>d[6aKr1g!&Xb9e\pR#`_mB"FB##b)\A]J2/(,2`'\(>!-!u_DbMmg#aQ0C]6kLV!bTJrZ[Q(WFKg0[:ObJBXY)"4"
%O274Sos^7$Dp>E,p#P7XFSEYh[535.g6>NI4*Dh0MWWoY*7>&NQ"%D!&.r"BAG;LoAjF\j7L#Ti[\HcI8SA:4!Xndhlbnfm."rjs
%d+9X"3'Msaf<nk3I2\rheqC5BRi7_*?_CDRPZqVX\4W+70]8!A=W!jg@Mtu\P,4t1*S:0%!k6*ZM(Y#RVTq)C[6V'8=/T;Dd")R%
%]=*HJO*IQ\VPGIi:LUNP`9EtnTki\3&PFsklO8;ZVB9\tUr4<HOdNiC<)^s!q4?$hY['DbB,Z(+f@T\ad:rrV/$75RM<AVVl<0uj
%N72PDlUKkKeS):PMX!e'?kL;dY(\B'j.r`2&e]SMbE]tJ+AME1;&U%ue$1R:`=J6UPlN]"D>%$n?RfO(m_BuJBHnGL]C:RCCf4pu
%UbgAG>8NBOgl]MucOfgY)P8O2Z5@/6Lf\C^JQZa\71[3WiPSR>icJXIP+'X/1'4d`gKL=^.%b>1;4V&`)/0o=dKR'NfeZ/]'W(>o
%.^J+RF%8aG4kQpuds0K-BM+4<E0JX&q?=Y\nEgAT-jsXNj6=`?3fl&4<%1r>[l\s'kTdmhVA]e`M9Uh^OsF#dWXa]N&JZNV[Kni/
%\;*c&]"/k5PI],p>-8>__b;dnOLV6k"3U\d_<e#1XqZZ>llh]V?%)^0(+IMl>*9?5I2r4tB!AG$N!*t"c%70\S1)9S&8HbC%P4T3
%3O$9i!'cZ9>mZl?QRL[0q'lsS8t8X!Pf+=6p$"UX",EXp-q*4>T%V%>\Z.!l@Yu!Oa^>a!GAWk*6rii`A`O"4bc*!<#I-[F3*Uqu
%FC8g/4;r!5!1@WSE/UEcE2km$aF&fjX@oa,Tj5-u%h]!#J9^5?#(Jec044:sMGB^>=G*uU(bE+k:3!&2X`@GP=U2>TTYF>/%/,l0
%-)t);8$PB7K]:'"U.D_3"@iX;@^(P*/?+/'&mNjsi<VieI6p@+ITF6Q/qtSsrIid!'i0+gMEWd;Z<+Q)/$=E^I>f_A!,?\<mV`_/
%*Mp4rf^97,@lJa"LMP(mL`Z_FHnt0SEg)$!@)En)UolZZ!Qd/8bN75=`D2]7B/E/KiHn(F3Z$]6@L0^(/&]CRJr>jR0Ec,^U=_]j
%%r$;oRu9ooJ;A&J+VL'3:f7kjiaN*W";`HhFT_a3TTL8o@^'4Z4-f:UggrZb!p-,oFA9XD>c86o5)N6Xoe`fg#`@`F5d[aW`qQhb
%P'*QA*6VdlQ(q-p32[)ZNEWh=5I^ER*EC8B;MX$51EJ+h-iUWA==2h?<\*fuV/'(74_Y'-g6F.D>i:/Lcc%Ch3(d6A*c7lgK1<j@
%"J8ZRL9]%UcsRQ,L^AKG@,BpI7D5FEU7XSS3Ysk5,bjb=qVT#7AkUF@VCUUtc^'=q\6L$*&F2LFJ3n>8&'X3_3jJgRPRG<Q>eEdg
%b&K"@/DYCN(P>7@cUF<X\:V(.r:5/)O_pdSP9m8HEOB%=DWT4p_>)D"j9sr:Un2FSqVNW$_DEQYY9m;%m;NXeRft+)^P8mVJt[*S
%E5P\Ia@+eWrQ%NkqAS^DRpoC?dCX>>M^r`iV,WKdV6@"/1XJ^Q^65i2NpcJ5';!=ddYnZ8?&#T"?6\6mb'AB,SBLY0@aAZF;K+5:
%OUY';aFtk`%^"&k)QHkrh1U#?(sqA@*hl7tp@*1/:FLR0"]3FZd%NSsF9]TD*o&-pe!jA>APPpY_-KY31rJ.u8LM5q'=`!1kM^]H
%PSe&5k<fg5h5HRR>\qM6-(Lj#;GgD2/u&It=CYlo^D?+'jN/uBjZ:V"E+CkE@#uEp.M"#+_t/joZ&sWpn?$M4%$oHoC`W_8`UH//
%69lSAd<OY&aL_Uh_==`n\)JnSBJ_kR6>@iKqnZ)K!^q$MY)M>-SDtKXh`<<)["/KnO`Mf^P!TVFD%(mMM4H#b`M%CUVd?.*(qslb
%\cp5[>'+X5Hn;EjO13_WIBkC]Y<4drVVk+-q7sS5Nk.KVJ3#eT_M/DOI+Se8M>)rC'ZC"H>p$9=SF_#V-#hf:@Q:C*oj?(_&!`j-
%6=^KV3/1eh8!ecOJD_7<&0O<B8=&SYg2cmHLqmBBc2*:<rg>W8<SUI9r?69YOM+;f^]\Pn]e6W@c7Ehk6,sKmFrXf!T$useD0kq]
%@O:(X)An#\0#`G2pm&a-X<o,UJNu]gBU%:A8MYj98'*iD"VNh,PbEgk/chqC\/ulT0gm9EKQ%.8"h8P!bidL^0q\m20`$7+2/)ja
%&f)SK'A523:`I#5HrpO;`9I:F,__\E0T8,M1KVWhF=lT*5>Rtg2nQ.@EH5^'\o'R@7kdn)eW]>,VqMPWq9Y8@a4t,139:nqT]bMI
%FMNd_,f$?<']=29j==Lb>3R6Tki,$l&d;0%RrR^2P!DBL`YSernrj<M%NaXIdP?0qaTS&=FPmFr.sr[>b57r"TdiZF$'^*W$r_XF
%%\/3FUrngt$PQ/9.Zj,oC.h,BFcNG(O@5>8?c^WZDOL?@33H-)KA5*V`qVI86<uU1P<`5'$9(V9LT>pKD-h^E&aSuk6@O<:"!Se6
%:.HGL@ZoiZMD?,U-P2EbPpTui/Lh)^HBQ`1\C-rKLr%QA`-3SsY!abt9\>PN.]HtbU-b#`8]X\6SOE8!iR;m5!k][*i?K'5lRaPE
%YS?933!etVK*pFpZA0ueB!WkA4auA2dr%\JX;O5tk1Ru:r-AU?JF_GFY.WI5Se"L3V/&-`d4$#4N]<!g/<qAMAZi.p!BF_AKnKO;
%NA!2rd)a>JS4^\M:!XSZ)D,4mQWL1?l'Tl')4-0r;/#L[VJntC.qNgT^E2[SbK0pDagd'A$prdejaB!s7_s(WV[CK!NnjfK@0sWg
%.sQ=-ag4B9q2"S11J<+3`l-L3\qRJ&ZuL72O5r>gZ@):u$#ONDE7/&AZCqA_<JIQHUNM"P8P0-*Zuecna4HZJ*jU/fa*]MbqM66B
%noT/gd2i4@ka97&)0$_X]'QW*]+Deah`DNs"+EP/R8X>8q%5J_g5nl7W,X6m5b"qtiUoh)C0fe$.LMtUr0W?XKuK-3_^Vp*#s9(T
%0FcjYeY+#IG0:WU.K)N+d&s(c;41ZWbgn<6HPm/KT7^RC6$,$E3O2I?>/B.rIP%om@f.(E/6u=k7O*\h754"na0b3O#n6ebf@80o
%4,2ZL6uK;!5Y.,sUDHP7!EpF(d8NZ-Zm.Z`:R/dBd.AW>4ID(gc-SspQp\'OO<unir.\(ATA%9ZU0!+/pPXUS6aJ@U;JX]-G::go
%!eO*$r)=Tq?'J2#=A^opNSkr"g^q'fgn[\E6At;GH0<h7#\H<,As="hjR54UYm)R/@s!`DUBLs1]R[f]4jD+%1V?JC2R,6lR_X%<
%URhSbqpjU\oQsEIFt"^h";-HAim]ke1n:=t1:$g'T;e#)\KqlS0Y+`[-lNOhDHr*dLGJM6Z;T3f1E(FtmJT:g'9sG[,[9<GZ'D];
%K7@QSH^)]L2G3a<=B42q_`5BhAO\WRb=1O^>@D.9R&gPb7Nf[@e]9B)(L<\_,1Fh;r*ge`"X#uBfA4qJ%CX]Hk8I^&j1kVj4*j'f
%XHp`j)SRCb..tN"0FSKUAP5\!NS0KoMr\&jA0qXs8<I.>X,Cq#9cEi]#TAPa>h4O*CYj3qSH+,MSKA8ZF[^/L)%DV2\t0Zi#TIbE
%*EjF]hYjfA"VNCZ^UspXC;=TI2jm?ro?$#/(nVJ4=NPm;LJ@\;M4;*(Q)%Wk^sL'jUS1&0o(3WfV?so.pRrbD`88Q(GSUoDVEDDI
%l5bHDUC>[7%-H7X/e7e2Yr:["H*l4iIZtJe3n`07fCDfcoGAL/fe18Q+8%@qoMa+Ap`Ju%=OE%paH<b3?rD[oan`4r:C`2jKs1F4
%'K4*Q"o\:P/<t.5_e-=PN5Uq.!,-?m:Y*gj1aRu4nY9*s$@,n-Q`Jbt$pK;0$XT`=.!o"`I9=cQ@h?KW@tp*W^)KKFFJ]NYAbP$)
%1H=P;1U71Xo[E;Ci@AiZ<)X)?34gt%\:+<ai!6"6=;mle9?FMLKR&+a:;5)ZOls<dd1P#(*GfUJUDDJ5/OhCN@<":EN:2UjQ$:/P
%:S/Cg-h4<<Zp]s*5eQm>](k)W;nlSZ_i*=.F)4.')>#mUC<87E%9*#lH7dumMpB^(UWZ$qW1.`WB4mq>=2NY%22*"Y?/qB!hheiO
%V?:#o)%Y@I&3F#/"=F5KhK+_jUI2"fc]hP$-iX\Ob.t6[q:0NbjNg%+[_qfQk1qUGWQ`5KYgoV2R<Nk"T!`%.'=KF1H=l-o7l/Z>
%*sng:BTgMfU6^L"Yu?U1-/Cl%me6WOs4HZ1$bob8iSN&6bei(_Y6U\gkVEm#@Nl;5c%hUF*)oP3b7b1p5X0$sc0%GP>ms?QF>#9a
%)<S8k`)>`MFZ#rNOa*pc/BNt:"c55nZBC"iHdMVkH&gJ6GfJfD6oH"d3W<N(=6Y*XIB^u"';o!8i`GK/_^'#/(QB@nX<C4oq"7=&
%6Gt68m)"&j0kp\C?j7@`c:>,pjT&ENNaC@gmk7/kn-4VJ/&V40=8\0&jah8!-"l*(6WFcs;c/:c#+=L?2rS^i*#R]O?OpuDNC##N
%f58urCKclPTstpCS!jUhUFIu,#!E^Y.`PGlVj"BaL=hF.'P57gGR:+2=)QAOCJdZNOD8]MrJT<KQ%&*<VilFDlWXt_Eu$-J2t5$J
%,@_]dk_/$,WR2C<*K!DtF:*E$Ub5G&6QE)m'44\`0S\VD(gs9.!%Xn7H"`KH1B%S&EJ('0DugoC"Ln09nKF.U#FUJh;K+d8!HtY3
%o<rSXr,$3-ZOt"p,+ZCmWLr;"6&*l9N:(3NM6+(g?8&YE4&;UaVG&N=bMgN%.KB4!gOB`J7m^!DYoCVY$$^cN5--H#KSuX3b;7t'
%kQs\dR!Xq&Y2*1E&M^-m505&5>j"_OL2oa!lc["$aX7d36J1:=C?$.thXu)5Rg:T:'9@`9S?q2>!d*GB]7K*cM9AM"(t^K=<\K6Z
%?.%Arj<hn`OYl"7Q'!*d>.\D!gRAm5#:C2UC+drD=AZU"+q52<C`Vr\ca8=?HqP_MrW5j$o`5OD1e#7`&t1,?([kSeg6irPE2?mm
%&9hSS"Frnnp-_:]LKsc@MBg5j(;I;6g0oAnK0Glm+r@<i0;dYUOh]l=3YL=1/HT(:+=u?gjb^M8RPCO[I&Yu^86FY&q&0CW!a^Q?
%8sGS/96#UqKqm]k:t"])Q36J@U_0Q.G`l3YpJnt;/ob3V@Yf/X;_67["?0Y68s@H)e]#*\@0n1-ag!]>7rrd[M4]D=hq-AGSXr)`
%'Tso\AnXuqZ#sIuPcs'R@;%ql;FrMo!eHSSPR/0M6SVIYrKIeXK'Wb"E%V`0b$lIKdJ#rUE/:9a_44)2aN:.AEr)eo&k]l-.>`Dn
%@cT>gPkLI(UqpaH-[>K1.9GOZOZP1M]]$p<Z4fbkNpkQ1JZgl=?u*mG>#1!:i'[?,^`sZLdn5l9/(!:%QM(:$]9\aSN[q^XkW`aU
%AXdpW`6rO6(bj/b#(ouEo=9tmraaE^29`h-3fhA+WiVMlX%QRQmB*=3gl1EESDu[]f0?qE]F$U3:X:Tl.Vr-\2u(miNgGqD:KSos
%8s=jb*s:r8LF2S#W@J>\M$o8/*?dXfOZVCsTriZWldXP!<>cuRER%T<pioSo-Y`k3oV2.e!8W5E8;q\oXuQTbo.SMSg.sl1n#lVY
%F\WBOmQ1eLeYPBW.D+A#0DD?i^6IFl\KcJsg.n+>iL*0SO1L\f*oVXjf>D?-&?YgW'iUtA5Rr(D"3e&!22&Mf5CU^:T$_q7da]eJ
%'\]a0h07q6YQ&=(8iY70ZmbR;g_In)+#B#ZZN(Ua\K]q.3!TNJ"$_"%s$NM$NnFaV("u*[L]#qSQrZjFXq0uk$a&`g7M+8Wk"[F]
%;jUiN=!q1b+\L\_CRX<!G8>XjiRf=[&IT$7e'n4a9KPTS!ZC!#YrE@"dk<D\)_mq'j<3'@E@9#LYl&CW\C#Ln1]N?HFFCVei$2^%
%_fmR=+j9T:Em("sBZ(F'fa^Db)3\Qe#W5ia"g5kDDa<+fP05)]D(28K^_NN^I6:H"^5=Hpp,\>.W]-f/nra@/3>BT&6l\0LBOq_:
%(GIqg?64dJ2J9r^pC3lnH0@eml]PujT#nu>U+F1X>a]OGXk`2ZJTLGIlMdT,JhlM$pZ8FW"_Z8:P'\588JtsS!HUfOWm&[,k[j=K
%f:hmL&pC_++g/FUn73h4FN!65P%8CCSskN:JWMd19NJYZ\3I5+OG'<_pd!i,s%!n=^!>l"TDi+)W+Z^R*oSd?A]16uNX++YH-<N?
%2LkYi;`/n_n/XiPc:gX73#`/jBsb=A^Qgg_QCp%V2E2!%qQJ*'er4F_8"&hA6SZ6<+<XA(2LEXk7)#%c/LNJ8Fm%$Q3.MP"Hb)[2
%4XGZ'IHKGI^/5keJ?(+#:3fh>eGoJgNrr"c<sqP"LK0^7*3PSlqB-,BX-Is(Gd/l9P)sY':-;Z8TB#G&ZaXW.U_V.dl.TQ$]e_Z.
%\6+U5cLf-0P`"uTc)T9&//OBm1#j:O._:Y6lIMiDetc&m@D!aVXcj<3n]i>oBO((k/T,@@#23S6&iLkO*(!PEei)2j:tN[nMYti`
%Qn=m5=aOeBK'LM'?VO+;0c7f`8Bl2lNm7l\B!csgr23)K#uZWPD$KIfjdKekVdSQ[QlY#/Z!,q`W4sce"-R1_#m?XD[7ckn(F)ra
%h^M68j6PA/N.H&c`s&aHWf8^eiErW`9TPhFg!fL*:*&cCN:]R@FXhCV6aF-ua=(3Hh\iu2RR]`-(S!.Rlr03g`&8^+=jscZ3kp:q
%JotMj2Br7Sm&_V!=R'l]"X_FQ68=OkdcZTl=:@/r=qsL1_6dqT"jY,KqKNG=B4kFI!53oGBZlASVBE3jnVuct3@Nq.Ih*2:0GoEa
%,c);gCp]RB\p';_'"Y)(-K;s2*I/tWA`Y3=F!"iZ`'VDm%+.5#@61qGI7)F\?Q0S4e"O0hQ,oU["9_`L14^nu9<>)sL9[<5>Fq4W
%[#*eF6KenlTG!>MZBS6(M%&8O^6<oIpbW,lK61PBr[p)Q5gPuJ.mS$g0uU!Vd5H8ORt*@Ge)!LEFjZ5g,7cS:g?^!HOQF!DBgTJ]
%KgTo47:"<J:i7:@Vj1jf,"MuREDM]E["_csD-tDh0gNDbPX/1m]r)S"*oK5C\)n"pK42s=l/u%k2$]UUqSoUM'Hq-%.imm(l@=T%
%BaW4q"%aXA$Z(NAP3@6"m[:':UHd@ZG\7be\]<\tn'R?lAnCnQhN:q\I."+-:oW14MWB%1Q"uS%!`Z[4qGi)B:ifMm["9g%$bjTA
%RnWIiMqXTpIqIdY4/$CeL'U`;F]AGkKbnDWAHeq6&3:l$`.qp,/S3U0SYoU$n$IPue@ek)l;QOhCqXR0JUk[c8j#s,o%A9W6tMpa
%bG4TZ(_oZ@RMA+mq;]$1o!n%)Qae/qWJ`1'Lke][Qa^LD:H';k/nT9#T%"55OIG*T\[a3Y#am>KGI,l,!4eIHV,c>aMMe/$EK$cr
%h.DaIZZa0>EANrH(/PkQqI=:(MEq<:/1)E<5E(N.]hGKbja4EVL4g*!,!:B2]HuM6`[-T=9>a6U*!D@J4mM3:_EQ_'Ln29%;oD34
%kP+d$:k#2'GK/i\&BqTFOV-[A,:MK.r['1@,&]l?9o@DSC(g^?LOgZ3KE"AD;kcE=>n7T.`N]`V*`02^:QZ28ap)/sfrd$gSn8D&
%(7K&%L>)_m_05TISMc0(n85J@eD_i]8PuF1>o4rIJ;<#C1N%f"/-p@<cik62[jTT@EjTh_.CSoO<$k3jPX:V28p)($M#6pW?%9HE
%0H!?1MoPZWbktsm<3=TMY2=\S7Y69_7\qJKMX.>`1A`^kZq!Q<ntfJb-OnNhpqCdgBgt:L<)-4="Pp\Qcg"n1%B-Ch4T?bHI9_%7
%dY(OMW7-^Y4-&\E2]2\.SXeUp5pYW->rl$RmOcT:*/;,g[A[7qH52f+9'd3+j0Hd#]0o^TZ5dgme!bie(qR+4N"cVaL?(QS;OH&B
%?c4R@-qSHOI4ti%^;Y%mKq&erRZ*1%_GtY=`a=AO&@54D5*NSq$!fOPR)U<Hk"H1'XE^I%6P>PfC2Lgmif2(6ZM`T%4+S:N@W8q,
%q8T*EcTQhC02Z8I0"Z]dd=d3fU6l"oZk(";g[n9:*$+FSgJ)HI%15al3XX7D'-\:!?6CgVjdV0eS!$Y"5;(4K>k/C*LRm@k[-]L"
%c3&&"fOA(Vfu6Q^MeLc<[`V=2<!QqE-i)c./X,`*nXrnB^>-p1k-%d;V?^4IM=0O-ZMJqViT:SZ>o!:&gtkTg?$,n?':.BGZPa9M
%je^-^Sp<@/2:dt#0J+%Qh'eE`("YZNVTV9q#Z0Q6.[R^12[YA=VQVjsZQ'JZ@:j7_k4RSoQumtorq?@a_]^)snp,@0cZqMc![+q>
%X:*8q!)Ni47Zbq7K2$%u%>(a;g_tHg,/!)7d\U"ldp9Oa2\qmjEH(nS`CP9nX&#@4E24YoeB>kZlHp,cA@V,:047&p"[k`Z"?P)g
%/4C@\+ia$[)aY/.Rf##OkTQ)*XX\e14L8CUbn/M:bgU@K,\f*:)u:"Yb5t9Bc)E=Q"?@&oPoYM*OS2W7``[9kG^J*Kau+_ChM04s
%:cstAc%%1QjbOeqSE;;V1\7!!kAIWdcUAnk)X;X4SD@WoCF!PYe%4&)m!2d3n%VjA+!3;+W$m[kEDUb,nKrsS0#noSq]:h?#)(J^
%d51GS_-'KT(puhDd7E&5jp:ps6_si*+=E/&Q[;Oi&TE!Y_P&tYVhC]O2P)@iX>!1ul\I.K[GED'6m,Ep9,HRNAB^o4N]'$G`T/oM
%M`C[[N5gWD6bYhTZ_3Tqn4Ect_=JGQl?/b+,aV6<S.*CP^*SfolKI$BM4.";#co#n7PnWTS[9*>R+dBf_qV.Tfa=4D1ZEC7S;KsD
%(_2'9]ds1]D`Jh'^D`)j>#d/8hD5naJPe6Q8rpj,-(knsQW%@5N1dCkRV<9RR=$qdPPmA+C__9E6RKM\D'.KB[hp17<ACib=KIWl
%)XlqZ2V,2l7YbW1X\f^aE%+n%KS.]q9pEeJb"*!pPj0M-`_Ooq%5'IaFWm#QI1oTD>e?'!pVYu+(pY>jP8IsS%ke&>rTDl?Ik@Q_
%N&QK`DI^bm=%V;"gt*V>M@p_BZR>L+94[gHf<D?^*kX<e[(]"VV_oh>Huc\Na1*u"m)3:L_(^j'5c,DOO6DDI\`5-23r/A(WFC8!
%i^P4&\nIUq`D2&QSX%E3^sD?p\@RE(^fMl2j=!VPX>8Z/D?!X%-UM(U\bo31GkqF$UuqF0D45,>XkF^*$1DOUe>FAfGIhbJ*++QR
%,+b,Cc)(1aNF`tt\/u,@X:ADriJU6]LdE^%@J=1*j(&Qbk)Q1:=;5YfT&!JNC9^)L)SaqhOL$k`Jf3M2_hSMLF6bhNi?HPPDT:Li
%m@"NX3Rs;>]8Ig"rStGB%itUmk'g>$.o5E&4nuN.:?['\L]^JEN2FDdD+R:?]LkTp!Y8"pASGdm(2t_:'V,d+"c0BfYi%td>'uEZ
%Hs-F?e@SkNU3t*Qe>3?K.>Rqo[L_c\>7-E>W]?X^d,2OTq$!pdG<PD=d.K+!@_"7u$qmKueJ]6Z72!Q#bao4?Q8+"\La>6A%H1q$
%iiW+?\7)+^4grjYf<me[;rhMEWV'VEn:*JS3=1KYqIZh[=!nA0.C8#D#A)1c^?=TNQ!oOrgq[K&$c9f3d0"K:NAbT@g&SoNfM4lA
%<[MZT"r<shZPJ5B^==;YD+qjjE!fEO`,+KEa>X*u>\i-YkedNtWJJ_D2^aQh6OrqKX'W/n1J(2IGu8$<P`$ao'SG)"nnJ6jZ7?p]
%=uXbbUsTnePjLod+0YBZ&uMYD*R^AcX"ZJ<1uB.,#`tXSb4j0AN#+kP&BbWRfCf_W8itp/b6%G)N8b%C1;Z6Bn.hu\#O0-^]U<\'
%W=@<#V`ge._4BD[-RV!.$nTlDf`.LQ6QeJ9#.,Idd5O_OaKjK<i@IIP3Q;A5k6?iB2_ao22:#;#BrL^R"dp%>9)rp4!>"Jj85WJ6
%3+k'PB_ZBIiDrq1XE4KW^K+F9+.$/`AAP42al!G.UZ$`D*3CX<fDg]W#aH-@:S9890aEGJi7:1\rmNe0kHL]2.3)HuV$jO;ORQDp
%3DGGq,`[^EqaN>t2:l^=Z>1ie9hot-P_IGflu["sX]:.W,L*=K!`UL^.jB\8EWB^[`T4Z5">2CjRKR>9[KA:5$jJ+(\c=/0PG$oK
%5f!GG/A-+/HcF'29IW\`,"@`IoP6G`R0hsk5t6gTgPN%s1bkCl-`g2?Q-1@I$/p9Q&lY=tB0QNs"(f%F#l1f;>uGoHP?97qA=lMi
%.2&O(]<D9ocfCD?jAmOQJ\;ACRE",L?:Ou/q$6<RVY(2p=Ms3-f/*'d$0j6cZ8t(>85HGGX%aG,SHc]TW+&@A==PW=f6-*Ac,64n
%,=#YEW(A7(\ENOSak3=VP`q9JZb\hU3=[2e>9G@Lkc-"l,Fg5OF!MgB4<:^/nUsNMY%HAR"ZI!7*&/Os_oZLH`QVZ**l\Na_L18p
%PB\lOT,5:>[mu]'9SAl&@Y<a!W'h7f5QVD;$2F1YP!6d$d#15D^c$IeZ99DTOF*SQ&f>!ia-Mu?W'o:UHhFp`3%K$U*'`FYIJJZ6
%q>Z;]O5GD)QOOU?#0jOH9XAQ?Ps#Aa*=!Df'EgZ&mO>A)S7)S:+e221Z>2Um7'69'X"4R!Eil:_)S0_0P.>,RWO:Ar0WOD]GWM0T
%Kt;nT:.@!i'tYAXG:sXD/)H(+B*E!(1FP&q89Y[Wf0$<R\MTP5^K%_/YYG/H6;YW]>_?$^"Hed\Zc+AtRaeUEeCo1LF;X"IC(cVs
%R(Z.aHCE:*V5?4_J[)'d1$",[1BhC)<TNZc@TRCM)+-kS]!],?aR-^c&A'A#6A"$nK+fC\=7'1%L!:+1"o!XJFiX#9TJZ9Iq0HSY
%AN8`9XjhTqcGh(0FqS[t2a5;4Z6N[lW*;9PK_`3f]kG[Lfh%AEl#sJ2NTPJoC=-"i]=/R2#-la&)!rOt>N?X^#jF6p]p@Xt9"(UY
%6j"WQ+Jn5!h,X+,TEjHXmL!".^%^&o,.IG)@p#UmVWrSPdpg%,f-9O-G&T%C+.TAnN;!p\<P0tjag*m5I4).S2WEbKabgYWD9&<u
%g<370c=cZnmL*W>g$G`n6uLWVh5&GJS[FU>Bj<N2d<tl%Iqun!fMpU6[#_-oSXaJK"+7eJQC1X7`&()KJ[UcHVDf+a*pKucQc!Te
%jK$um;;Q#60.!(UXu9O5o!iGb,/5pHpXXrnTt.VLBHL(hHF\9=i!<\nV0TtMW_>502".+Um]5K@Ll_NY)MigXmPjH4h+j1mF^I_V
%%0+kl]#a3Q^=g$P8@Irsf[\&Bf5\#*BT+JI,^SQ>X>r"_P>4TbfQCEZW'fenc6CU"-K:s?#;>HOilSdMX6MU*gU2lLPNGOMLon62
%m[&@6@AAJ.F`8qB+.TAnN;!p\!D@W[JA$<CQ$2-(2fXDI"&)UO:$F@$Ln+bQHuE'iX).=<g3++;l@2\kL@X61W^$QB+QTZH.@I2J
%f=#.ps'&KYEB^+uC@leu\KfJhoh%45Fteg^\!)`GNlCoIV3XjH@]KffqR0j9N5rQ1<f(&Q+"^_#A%SdVd?B"1U*WjE415o/424g=
%42se_K_(Lh':2d8>%J(nCCQOu)QmN*C0Fs>hOfrIR:F\oAR?u4SZ_F^=s[pFs4bX>8RAioWZ<NmK9fWQmakWY2]c%C1VuYHPY=D"
%.eD(qDe*mt@h];E6\A6g9##5!cF&0c`[)QWrO!3RBD]!<B."!s`D*S<-jY<(;&8!PXuT.PC=T;kf\5l'Wghs1U7i]9-8\)-O4P>E
%M<D+9]:('Q8"fT%DA(^H"5GN@@bos;CJB-^)gqJPMk)O.Zt3<=ZHHfpd1WK]rL0RkY0WOH,Q'q]SM'\mhd$B"rK$e>hgG1]5J6m.
%pE/8)q2"P+YQ*qE\*s@o_n3\_mJVen^\IMXG<`hAlJ6[A_><^$qo_cBIJ`"%&-)G%L\G0Sn<^oi0-p>AqM28hroQFps5b's%tk2*rV~>
%AI9_PrivateDataEnd
